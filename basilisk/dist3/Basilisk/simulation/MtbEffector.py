# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable
from Basilisk.utilities import pythonVariableLogger



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MtbEffector
else:
    import _MtbEffector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _MtbEffector.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _MtbEffector.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _MtbEffector.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _MtbEffector.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _MtbEffector.new_longArray(nelements)

def delete_longArray(ary):
    return _MtbEffector.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _MtbEffector.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _MtbEffector.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _MtbEffector.new_intArray(nelements)

def delete_intArray(ary):
    return _MtbEffector.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _MtbEffector.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _MtbEffector.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _MtbEffector.new_shortArray(nelements)

def delete_shortArray(ary):
    return _MtbEffector.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _MtbEffector.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _MtbEffector.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _MtbEffector.MAX_LOGGING_LENGTH
BSK_DEBUG = _MtbEffector.BSK_DEBUG
BSK_INFORMATION = _MtbEffector.BSK_INFORMATION
BSK_WARNING = _MtbEffector.BSK_WARNING
BSK_ERROR = _MtbEffector.BSK_ERROR
BSK_SILENT = _MtbEffector.BSK_SILENT

def printDefaultLogLevel():
    return _MtbEffector.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _MtbEffector.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _MtbEffector.getDefaultLogLevel()
class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MtbEffector.BSKLogger_swiginit(self, _MtbEffector.new_BSKLogger(*args))
    __swig_destroy__ = _MtbEffector.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _MtbEffector.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _MtbEffector.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _MtbEffector.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _MtbEffector.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_MtbEffector.BSKLogger_logLevelMap_get, _MtbEffector.BSKLogger_logLevelMap_set)

# Register BSKLogger in _MtbEffector:
_MtbEffector.BSKLogger_swigregister(BSKLogger)
cvar = _MtbEffector.cvar


def _BSKLogger():
    return _MtbEffector._BSKLogger()

def _BSKLogger_d(arg1):
    return _MtbEffector._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _MtbEffector._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _MtbEffector._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _MtbEffector._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MtbEffector.SysModel_swiginit(self, _MtbEffector.new_SysModel(*args))
    __swig_destroy__ = _MtbEffector.delete_SysModel

    def SelfInit(self):
        return _MtbEffector.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _MtbEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MtbEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MtbEffector.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_MtbEffector.SysModel_ModelTag_get, _MtbEffector.SysModel_ModelTag_set)
    CallCounts = property(_MtbEffector.SysModel_CallCounts_get, _MtbEffector.SysModel_CallCounts_set)
    RNGSeed = property(_MtbEffector.SysModel_RNGSeed_get, _MtbEffector.SysModel_RNGSeed_set)
    moduleID = property(_MtbEffector.SysModel_moduleID_get, _MtbEffector.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        logging_functions = {
            variable_name: lambda _, vn=variable_name: getattr(self, vn)
            for variable_name in variableNames
        }

        for variable_name, log_fun in logging_functions.items():
            try:
                log_fun(0)
            except AttributeError:
                raise ValueError(f"Cannot log {variable_name} as it is not a "
                                f"variable of {type(self).__name__}")

        return pythonVariableLogger.PythonVariableLogger(logging_functions, recordingTime)


# Register SysModel in _MtbEffector:
_MtbEffector.SysModel_swigregister(SysModel)
class StateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_MtbEffector.StateData_state_get, _MtbEffector.StateData_state_set)
    stateDeriv = property(_MtbEffector.StateData_stateDeriv_get, _MtbEffector.StateData_stateDeriv_set)
    stateName = property(_MtbEffector.StateData_stateName_get, _MtbEffector.StateData_stateName_set)
    stateEnabled = property(_MtbEffector.StateData_stateEnabled_get, _MtbEffector.StateData_stateEnabled_set)
    bskLogger = property(_MtbEffector.StateData_bskLogger_get, _MtbEffector.StateData_bskLogger_set)

    def __init__(self, *args):
        _MtbEffector.StateData_swiginit(self, _MtbEffector.new_StateData(*args))
    __swig_destroy__ = _MtbEffector.delete_StateData

    def setState(self, newState):
        return _MtbEffector.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _MtbEffector.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _MtbEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _MtbEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _MtbEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _MtbEffector.StateData_getName(self)

    def getRowSize(self):
        return _MtbEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _MtbEffector.StateData_getColumnSize(self)

    def isStateActive(self):
        return _MtbEffector.StateData_isStateActive(self)

    def disable(self):
        return _MtbEffector.StateData_disable(self)

    def enable(self):
        return _MtbEffector.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _MtbEffector.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _MtbEffector.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _MtbEffector.StateData___mul__(self, scaleFactor)

# Register StateData in _MtbEffector:
_MtbEffector.StateData_swigregister(StateData)
class DynamicEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MtbEffector.delete_DynamicEffector

    def computeStateContribution(self, integTime):
        return _MtbEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _MtbEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _MtbEffector.DynamicEffector_computeForceTorque(self, integTime, timeStep)
    stateDerivContribution = property(_MtbEffector.DynamicEffector_stateDerivContribution_get, _MtbEffector.DynamicEffector_stateDerivContribution_set)
    forceExternal_N = property(_MtbEffector.DynamicEffector_forceExternal_N_get, _MtbEffector.DynamicEffector_forceExternal_N_set)
    forceExternal_B = property(_MtbEffector.DynamicEffector_forceExternal_B_get, _MtbEffector.DynamicEffector_forceExternal_B_set)
    torqueExternalPntB_B = property(_MtbEffector.DynamicEffector_torqueExternalPntB_B_get, _MtbEffector.DynamicEffector_torqueExternalPntB_B_set)
    bskLogger = property(_MtbEffector.DynamicEffector_bskLogger_get, _MtbEffector.DynamicEffector_bskLogger_set)

# Register DynamicEffector in _MtbEffector:
_MtbEffector.DynamicEffector_swigregister(DynamicEffector)
class StateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateMap = property(_MtbEffector.StateVector_stateMap_get, _MtbEffector.StateVector_stateMap_set)

    def __add__(self, operand):
        return _MtbEffector.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _MtbEffector.StateVector___mul__(self, scaleFactor)

    def __init__(self):
        _MtbEffector.StateVector_swiginit(self, _MtbEffector.new_StateVector())
    __swig_destroy__ = _MtbEffector.delete_StateVector

# Register StateVector in _MtbEffector:
_MtbEffector.StateVector_swigregister(StateVector)
class DynParamManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dynProperties = property(_MtbEffector.DynParamManager_dynProperties_get, _MtbEffector.DynParamManager_dynProperties_set)
    stateContainer = property(_MtbEffector.DynParamManager_stateContainer_get, _MtbEffector.DynParamManager_stateContainer_set)
    bskLogger = property(_MtbEffector.DynParamManager_bskLogger_get, _MtbEffector.DynParamManager_bskLogger_set)

    def __init__(self):
        _MtbEffector.DynParamManager_swiginit(self, _MtbEffector.new_DynParamManager())
    __swig_destroy__ = _MtbEffector.delete_DynParamManager

    def registerState(self, nRow, nCol, stateName):
        return _MtbEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _MtbEffector.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _MtbEffector.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _MtbEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _MtbEffector.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _MtbEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _MtbEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _MtbEffector.DynParamManager_setPropertyValue(self, propName, propValue)

# Register DynParamManager in _MtbEffector:
_MtbEffector.DynParamManager_swigregister(DynParamManager)
class MtbEffector(SysModel, DynamicEffector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MtbEffector.MtbEffector_swiginit(self, _MtbEffector.new_MtbEffector())
    __swig_destroy__ = _MtbEffector.delete_MtbEffector

    def Reset(self, CurrentSimNanos):
        return _MtbEffector.MtbEffector_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _MtbEffector.MtbEffector_UpdateState(self, CurrentSimNanos)

    def linkInStates(self, states):
        return _MtbEffector.MtbEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _MtbEffector.MtbEffector_computeForceTorque(self, integTime, timeStep)

    def WriteOutputMessages(self, CurrentClock):
        return _MtbEffector.MtbEffector_WriteOutputMessages(self, CurrentClock)
    mtbOutMsg = property(_MtbEffector.MtbEffector_mtbOutMsg_get, _MtbEffector.MtbEffector_mtbOutMsg_set)
    hubSigma = property(_MtbEffector.MtbEffector_hubSigma_get, _MtbEffector.MtbEffector_hubSigma_set)
    mtbCmdInMsg = property(_MtbEffector.MtbEffector_mtbCmdInMsg_get, _MtbEffector.MtbEffector_mtbCmdInMsg_set)
    magInMsg = property(_MtbEffector.MtbEffector_magInMsg_get, _MtbEffector.MtbEffector_magInMsg_set)
    mtbParamsInMsg = property(_MtbEffector.MtbEffector_mtbParamsInMsg_get, _MtbEffector.MtbEffector_mtbParamsInMsg_set)
    bskLogger = property(_MtbEffector.MtbEffector_bskLogger_get, _MtbEffector.MtbEffector_bskLogger_set)

# Register MtbEffector in _MtbEffector:
_MtbEffector.MtbEffector_swigregister(MtbEffector)
class MTBCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mtbDipoleCmds = property(_MtbEffector.MTBCmdMsgPayload_mtbDipoleCmds_get, _MtbEffector.MTBCmdMsgPayload_mtbDipoleCmds_set)

    def __init__(self):
        _MtbEffector.MTBCmdMsgPayload_swiginit(self, _MtbEffector.new_MTBCmdMsgPayload())
    __swig_destroy__ = _MtbEffector.delete_MTBCmdMsgPayload

# Register MTBCmdMsgPayload in _MtbEffector:
_MtbEffector.MTBCmdMsgPayload_swigregister(MTBCmdMsgPayload)
class MagneticFieldMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    magField_N = property(_MtbEffector.MagneticFieldMsgPayload_magField_N_get, _MtbEffector.MagneticFieldMsgPayload_magField_N_set)

    def __init__(self):
        _MtbEffector.MagneticFieldMsgPayload_swiginit(self, _MtbEffector.new_MagneticFieldMsgPayload())
    __swig_destroy__ = _MtbEffector.delete_MagneticFieldMsgPayload

# Register MagneticFieldMsgPayload in _MtbEffector:
_MtbEffector.MagneticFieldMsgPayload_swigregister(MagneticFieldMsgPayload)
class MTBArrayConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numMTB = property(_MtbEffector.MTBArrayConfigMsgPayload_numMTB_get, _MtbEffector.MTBArrayConfigMsgPayload_numMTB_set)
    GtMatrix_B = property(_MtbEffector.MTBArrayConfigMsgPayload_GtMatrix_B_get, _MtbEffector.MTBArrayConfigMsgPayload_GtMatrix_B_set)
    maxMtbDipoles = property(_MtbEffector.MTBArrayConfigMsgPayload_maxMtbDipoles_get, _MtbEffector.MTBArrayConfigMsgPayload_maxMtbDipoles_set)

    def __init__(self):
        _MtbEffector.MTBArrayConfigMsgPayload_swiginit(self, _MtbEffector.new_MTBArrayConfigMsgPayload())
    __swig_destroy__ = _MtbEffector.delete_MTBArrayConfigMsgPayload

# Register MTBArrayConfigMsgPayload in _MtbEffector:
_MtbEffector.MTBArrayConfigMsgPayload_swigregister(MTBArrayConfigMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


