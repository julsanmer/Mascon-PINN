# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable
from Basilisk.utilities import pythonVariableLogger



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _reactionWheelStateEffector
else:
    import _reactionWheelStateEffector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _reactionWheelStateEffector.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _reactionWheelStateEffector.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _reactionWheelStateEffector.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _reactionWheelStateEffector.new_longArray(nelements)

def delete_longArray(ary):
    return _reactionWheelStateEffector.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _reactionWheelStateEffector.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _reactionWheelStateEffector.new_intArray(nelements)

def delete_intArray(ary):
    return _reactionWheelStateEffector.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _reactionWheelStateEffector.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _reactionWheelStateEffector.new_shortArray(nelements)

def delete_shortArray(ary):
    return _reactionWheelStateEffector.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _reactionWheelStateEffector.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _reactionWheelStateEffector.MAX_LOGGING_LENGTH
BSK_DEBUG = _reactionWheelStateEffector.BSK_DEBUG
BSK_INFORMATION = _reactionWheelStateEffector.BSK_INFORMATION
BSK_WARNING = _reactionWheelStateEffector.BSK_WARNING
BSK_ERROR = _reactionWheelStateEffector.BSK_ERROR
BSK_SILENT = _reactionWheelStateEffector.BSK_SILENT

def printDefaultLogLevel():
    return _reactionWheelStateEffector.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _reactionWheelStateEffector.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _reactionWheelStateEffector.getDefaultLogLevel()
class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _reactionWheelStateEffector.BSKLogger_swiginit(self, _reactionWheelStateEffector.new_BSKLogger(*args))
    __swig_destroy__ = _reactionWheelStateEffector.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _reactionWheelStateEffector.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _reactionWheelStateEffector.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _reactionWheelStateEffector.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _reactionWheelStateEffector.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_reactionWheelStateEffector.BSKLogger_logLevelMap_get, _reactionWheelStateEffector.BSKLogger_logLevelMap_set)

# Register BSKLogger in _reactionWheelStateEffector:
_reactionWheelStateEffector.BSKLogger_swigregister(BSKLogger)
cvar = _reactionWheelStateEffector.cvar


def _BSKLogger():
    return _reactionWheelStateEffector._BSKLogger()

def _BSKLogger_d(arg1):
    return _reactionWheelStateEffector._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _reactionWheelStateEffector._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _reactionWheelStateEffector._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _reactionWheelStateEffector._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _reactionWheelStateEffector.SysModel_swiginit(self, _reactionWheelStateEffector.new_SysModel(*args))
    __swig_destroy__ = _reactionWheelStateEffector.delete_SysModel

    def SelfInit(self):
        return _reactionWheelStateEffector.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _reactionWheelStateEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _reactionWheelStateEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _reactionWheelStateEffector.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_reactionWheelStateEffector.SysModel_ModelTag_get, _reactionWheelStateEffector.SysModel_ModelTag_set)
    CallCounts = property(_reactionWheelStateEffector.SysModel_CallCounts_get, _reactionWheelStateEffector.SysModel_CallCounts_set)
    RNGSeed = property(_reactionWheelStateEffector.SysModel_RNGSeed_get, _reactionWheelStateEffector.SysModel_RNGSeed_set)
    moduleID = property(_reactionWheelStateEffector.SysModel_moduleID_get, _reactionWheelStateEffector.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        logging_functions = {
            variable_name: lambda _, vn=variable_name: getattr(self, vn)
            for variable_name in variableNames
        }

        for variable_name, log_fun in logging_functions.items():
            try:
                log_fun(0)
            except AttributeError:
                raise ValueError(f"Cannot log {variable_name} as it is not a "
                                f"variable of {type(self).__name__}")

        return pythonVariableLogger.PythonVariableLogger(logging_functions, recordingTime)


# Register SysModel in _reactionWheelStateEffector:
_reactionWheelStateEffector.SysModel_swigregister(SysModel)
class StateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_reactionWheelStateEffector.StateData_state_get, _reactionWheelStateEffector.StateData_state_set)
    stateDeriv = property(_reactionWheelStateEffector.StateData_stateDeriv_get, _reactionWheelStateEffector.StateData_stateDeriv_set)
    stateName = property(_reactionWheelStateEffector.StateData_stateName_get, _reactionWheelStateEffector.StateData_stateName_set)
    stateEnabled = property(_reactionWheelStateEffector.StateData_stateEnabled_get, _reactionWheelStateEffector.StateData_stateEnabled_set)
    bskLogger = property(_reactionWheelStateEffector.StateData_bskLogger_get, _reactionWheelStateEffector.StateData_bskLogger_set)

    def __init__(self, *args):
        _reactionWheelStateEffector.StateData_swiginit(self, _reactionWheelStateEffector.new_StateData(*args))
    __swig_destroy__ = _reactionWheelStateEffector.delete_StateData

    def setState(self, newState):
        return _reactionWheelStateEffector.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _reactionWheelStateEffector.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _reactionWheelStateEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _reactionWheelStateEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _reactionWheelStateEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _reactionWheelStateEffector.StateData_getName(self)

    def getRowSize(self):
        return _reactionWheelStateEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _reactionWheelStateEffector.StateData_getColumnSize(self)

    def isStateActive(self):
        return _reactionWheelStateEffector.StateData_isStateActive(self)

    def disable(self):
        return _reactionWheelStateEffector.StateData_disable(self)

    def enable(self):
        return _reactionWheelStateEffector.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _reactionWheelStateEffector.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _reactionWheelStateEffector.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _reactionWheelStateEffector.StateData___mul__(self, scaleFactor)

# Register StateData in _reactionWheelStateEffector:
_reactionWheelStateEffector.StateData_swigregister(StateData)
class BackSubMatrices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    matrixA = property(_reactionWheelStateEffector.BackSubMatrices_matrixA_get, _reactionWheelStateEffector.BackSubMatrices_matrixA_set)
    matrixB = property(_reactionWheelStateEffector.BackSubMatrices_matrixB_get, _reactionWheelStateEffector.BackSubMatrices_matrixB_set)
    matrixC = property(_reactionWheelStateEffector.BackSubMatrices_matrixC_get, _reactionWheelStateEffector.BackSubMatrices_matrixC_set)
    matrixD = property(_reactionWheelStateEffector.BackSubMatrices_matrixD_get, _reactionWheelStateEffector.BackSubMatrices_matrixD_set)
    vecTrans = property(_reactionWheelStateEffector.BackSubMatrices_vecTrans_get, _reactionWheelStateEffector.BackSubMatrices_vecTrans_set)
    vecRot = property(_reactionWheelStateEffector.BackSubMatrices_vecRot_get, _reactionWheelStateEffector.BackSubMatrices_vecRot_set)

    def __init__(self):
        _reactionWheelStateEffector.BackSubMatrices_swiginit(self, _reactionWheelStateEffector.new_BackSubMatrices())
    __swig_destroy__ = _reactionWheelStateEffector.delete_BackSubMatrices

# Register BackSubMatrices in _reactionWheelStateEffector:
_reactionWheelStateEffector.BackSubMatrices_swigregister(BackSubMatrices)
class EffectorMassProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mEff = property(_reactionWheelStateEffector.EffectorMassProps_mEff_get, _reactionWheelStateEffector.EffectorMassProps_mEff_set)
    mEffDot = property(_reactionWheelStateEffector.EffectorMassProps_mEffDot_get, _reactionWheelStateEffector.EffectorMassProps_mEffDot_set)
    IEffPntB_B = property(_reactionWheelStateEffector.EffectorMassProps_IEffPntB_B_get, _reactionWheelStateEffector.EffectorMassProps_IEffPntB_B_set)
    rEff_CB_B = property(_reactionWheelStateEffector.EffectorMassProps_rEff_CB_B_get, _reactionWheelStateEffector.EffectorMassProps_rEff_CB_B_set)
    rEffPrime_CB_B = property(_reactionWheelStateEffector.EffectorMassProps_rEffPrime_CB_B_get, _reactionWheelStateEffector.EffectorMassProps_rEffPrime_CB_B_set)
    IEffPrimePntB_B = property(_reactionWheelStateEffector.EffectorMassProps_IEffPrimePntB_B_get, _reactionWheelStateEffector.EffectorMassProps_IEffPrimePntB_B_set)

    def __init__(self):
        _reactionWheelStateEffector.EffectorMassProps_swiginit(self, _reactionWheelStateEffector.new_EffectorMassProps())
    __swig_destroy__ = _reactionWheelStateEffector.delete_EffectorMassProps

# Register EffectorMassProps in _reactionWheelStateEffector:
_reactionWheelStateEffector.EffectorMassProps_swigregister(EffectorMassProps)
class StateEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    nameOfSpacecraftAttachedTo = property(_reactionWheelStateEffector.StateEffector_nameOfSpacecraftAttachedTo_get, _reactionWheelStateEffector.StateEffector_nameOfSpacecraftAttachedTo_set)
    parentSpacecraftName = property(_reactionWheelStateEffector.StateEffector_parentSpacecraftName_get, _reactionWheelStateEffector.StateEffector_parentSpacecraftName_set)
    effProps = property(_reactionWheelStateEffector.StateEffector_effProps_get, _reactionWheelStateEffector.StateEffector_effProps_set)
    stateDerivContribution = property(_reactionWheelStateEffector.StateEffector_stateDerivContribution_get, _reactionWheelStateEffector.StateEffector_stateDerivContribution_set)
    forceOnBody_B = property(_reactionWheelStateEffector.StateEffector_forceOnBody_B_get, _reactionWheelStateEffector.StateEffector_forceOnBody_B_set)
    torqueOnBodyPntB_B = property(_reactionWheelStateEffector.StateEffector_torqueOnBodyPntB_B_get, _reactionWheelStateEffector.StateEffector_torqueOnBodyPntB_B_set)
    torqueOnBodyPntC_B = property(_reactionWheelStateEffector.StateEffector_torqueOnBodyPntC_B_get, _reactionWheelStateEffector.StateEffector_torqueOnBodyPntC_B_set)
    r_BP_P = property(_reactionWheelStateEffector.StateEffector_r_BP_P_get, _reactionWheelStateEffector.StateEffector_r_BP_P_set)
    dcm_BP = property(_reactionWheelStateEffector.StateEffector_dcm_BP_get, _reactionWheelStateEffector.StateEffector_dcm_BP_set)
    bskLogger = property(_reactionWheelStateEffector.StateEffector_bskLogger_get, _reactionWheelStateEffector.StateEffector_bskLogger_set)
    __swig_destroy__ = _reactionWheelStateEffector.delete_StateEffector

    def updateEffectorMassProps(self, integTime):
        return _reactionWheelStateEffector.StateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _reactionWheelStateEffector.StateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _reactionWheelStateEffector.StateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _reactionWheelStateEffector.StateEffector_modifyStates(self, integTime)

    def calcForceTorqueOnBody(self, integTime, omega_BN_B):
        return _reactionWheelStateEffector.StateEffector_calcForceTorqueOnBody(self, integTime, omega_BN_B)

    def writeOutputStateMessages(self, integTimeNanos):
        return _reactionWheelStateEffector.StateEffector_writeOutputStateMessages(self, integTimeNanos)

    def registerStates(self, states):
        return _reactionWheelStateEffector.StateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _reactionWheelStateEffector.StateEffector_linkInStates(self, states)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _reactionWheelStateEffector.StateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def prependSpacecraftNameToStates(self):
        return _reactionWheelStateEffector.StateEffector_prependSpacecraftNameToStates(self)

    def receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP):
        return _reactionWheelStateEffector.StateEffector_receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP)

# Register StateEffector in _reactionWheelStateEffector:
_reactionWheelStateEffector.StateEffector_swigregister(StateEffector)
class DynamicEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _reactionWheelStateEffector.delete_DynamicEffector

    def computeStateContribution(self, integTime):
        return _reactionWheelStateEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _reactionWheelStateEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _reactionWheelStateEffector.DynamicEffector_computeForceTorque(self, integTime, timeStep)
    stateDerivContribution = property(_reactionWheelStateEffector.DynamicEffector_stateDerivContribution_get, _reactionWheelStateEffector.DynamicEffector_stateDerivContribution_set)
    forceExternal_N = property(_reactionWheelStateEffector.DynamicEffector_forceExternal_N_get, _reactionWheelStateEffector.DynamicEffector_forceExternal_N_set)
    forceExternal_B = property(_reactionWheelStateEffector.DynamicEffector_forceExternal_B_get, _reactionWheelStateEffector.DynamicEffector_forceExternal_B_set)
    torqueExternalPntB_B = property(_reactionWheelStateEffector.DynamicEffector_torqueExternalPntB_B_get, _reactionWheelStateEffector.DynamicEffector_torqueExternalPntB_B_set)
    bskLogger = property(_reactionWheelStateEffector.DynamicEffector_bskLogger_get, _reactionWheelStateEffector.DynamicEffector_bskLogger_set)

# Register DynamicEffector in _reactionWheelStateEffector:
_reactionWheelStateEffector.DynamicEffector_swigregister(DynamicEffector)
class StateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateMap = property(_reactionWheelStateEffector.StateVector_stateMap_get, _reactionWheelStateEffector.StateVector_stateMap_set)

    def __add__(self, operand):
        return _reactionWheelStateEffector.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _reactionWheelStateEffector.StateVector___mul__(self, scaleFactor)

    def __init__(self):
        _reactionWheelStateEffector.StateVector_swiginit(self, _reactionWheelStateEffector.new_StateVector())
    __swig_destroy__ = _reactionWheelStateEffector.delete_StateVector

# Register StateVector in _reactionWheelStateEffector:
_reactionWheelStateEffector.StateVector_swigregister(StateVector)
class DynParamManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dynProperties = property(_reactionWheelStateEffector.DynParamManager_dynProperties_get, _reactionWheelStateEffector.DynParamManager_dynProperties_set)
    stateContainer = property(_reactionWheelStateEffector.DynParamManager_stateContainer_get, _reactionWheelStateEffector.DynParamManager_stateContainer_set)
    bskLogger = property(_reactionWheelStateEffector.DynParamManager_bskLogger_get, _reactionWheelStateEffector.DynParamManager_bskLogger_set)

    def __init__(self):
        _reactionWheelStateEffector.DynParamManager_swiginit(self, _reactionWheelStateEffector.new_DynParamManager())
    __swig_destroy__ = _reactionWheelStateEffector.delete_DynParamManager

    def registerState(self, nRow, nCol, stateName):
        return _reactionWheelStateEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _reactionWheelStateEffector.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _reactionWheelStateEffector.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _reactionWheelStateEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _reactionWheelStateEffector.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _reactionWheelStateEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _reactionWheelStateEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _reactionWheelStateEffector.DynParamManager_setPropertyValue(self, propName, propValue)

# Register DynParamManager in _reactionWheelStateEffector:
_reactionWheelStateEffector.DynParamManager_swigregister(DynParamManager)
class DynamicObject(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    dynManager = property(_reactionWheelStateEffector.DynamicObject_dynManager_get, _reactionWheelStateEffector.DynamicObject_dynManager_set)
    integrator = property(_reactionWheelStateEffector.DynamicObject_integrator_get, _reactionWheelStateEffector.DynamicObject_integrator_set)
    bskLogger = property(_reactionWheelStateEffector.DynamicObject_bskLogger_get, _reactionWheelStateEffector.DynamicObject_bskLogger_set)
    __swig_destroy__ = _reactionWheelStateEffector.delete_DynamicObject

    def UpdateState(self, callTime):
        return _reactionWheelStateEffector.DynamicObject_UpdateState(self, callTime)

    def equationsOfMotion(self, t, timeStep):
        return _reactionWheelStateEffector.DynamicObject_equationsOfMotion(self, t, timeStep)

    def preIntegration(self, callTime):
        return _reactionWheelStateEffector.DynamicObject_preIntegration(self, callTime)

    def postIntegration(self, callTime):
        return _reactionWheelStateEffector.DynamicObject_postIntegration(self, callTime)

    def initializeDynamics(self):
        return _reactionWheelStateEffector.DynamicObject_initializeDynamics(self)

    def computeEnergyMomentum(self, t):
        return _reactionWheelStateEffector.DynamicObject_computeEnergyMomentum(self, t)

    def integrateState(self, t):
        return _reactionWheelStateEffector.DynamicObject_integrateState(self, t)

    def setIntegrator(self, newIntegrator):
        return _reactionWheelStateEffector.DynamicObject_setIntegrator(self, newIntegrator)

    def syncDynamicsIntegration(self, dynPtr):
        return _reactionWheelStateEffector.DynamicObject_syncDynamicsIntegration(self, dynPtr)
    isDynamicsSynced = property(_reactionWheelStateEffector.DynamicObject_isDynamicsSynced_get, _reactionWheelStateEffector.DynamicObject_isDynamicsSynced_set)
    timeStep = property(_reactionWheelStateEffector.DynamicObject_timeStep_get, _reactionWheelStateEffector.DynamicObject_timeStep_set)
    timeBefore = property(_reactionWheelStateEffector.DynamicObject_timeBefore_get, _reactionWheelStateEffector.DynamicObject_timeBefore_set)

# Register DynamicObject in _reactionWheelStateEffector:
_reactionWheelStateEffector.DynamicObject_swigregister(DynamicObject)
BalancedWheels = _reactionWheelStateEffector.BalancedWheels
JitterSimple = _reactionWheelStateEffector.JitterSimple
JitterFullyCoupled = _reactionWheelStateEffector.JitterFullyCoupled
class ReactionWheelStateEffector(SysModel, StateEffector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _reactionWheelStateEffector.ReactionWheelStateEffector_swiginit(self, _reactionWheelStateEffector.new_ReactionWheelStateEffector())
    __swig_destroy__ = _reactionWheelStateEffector.delete_ReactionWheelStateEffector

    def registerStates(self, states):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_linkInStates(self, states)

    def writeOutputStateMessages(self, integTimeNanos):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_writeOutputStateMessages(self, integTimeNanos)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def updateEffectorMassProps(self, integTime):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def Reset(self, CurrentSimNanos):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_Reset(self, CurrentSimNanos)

    def addReactionWheel(self, NewRW):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_addReactionWheel(self, NewRW)

    def UpdateState(self, CurrentSimNanos):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_UpdateState(self, CurrentSimNanos)

    def WriteOutputMessages(self, CurrentClock):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_WriteOutputMessages(self, CurrentClock)

    def ReadInputs(self):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_ReadInputs(self)

    def ConfigureRWRequests(self, CurrentTime):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_ConfigureRWRequests(self, CurrentTime)
    ReactionWheelData = property(_reactionWheelStateEffector.ReactionWheelStateEffector_ReactionWheelData_get, _reactionWheelStateEffector.ReactionWheelStateEffector_ReactionWheelData_set)
    rwMotorCmdInMsg = property(_reactionWheelStateEffector.ReactionWheelStateEffector_rwMotorCmdInMsg_get, _reactionWheelStateEffector.ReactionWheelStateEffector_rwMotorCmdInMsg_set)
    rwSpeedOutMsg = property(_reactionWheelStateEffector.ReactionWheelStateEffector_rwSpeedOutMsg_get, _reactionWheelStateEffector.ReactionWheelStateEffector_rwSpeedOutMsg_set)
    rwOutMsgs = property(_reactionWheelStateEffector.ReactionWheelStateEffector_rwOutMsgs_get, _reactionWheelStateEffector.ReactionWheelStateEffector_rwOutMsgs_set)
    NewRWCmds = property(_reactionWheelStateEffector.ReactionWheelStateEffector_NewRWCmds_get, _reactionWheelStateEffector.ReactionWheelStateEffector_NewRWCmds_set)
    rwSpeedMsgBuffer = property(_reactionWheelStateEffector.ReactionWheelStateEffector_rwSpeedMsgBuffer_get, _reactionWheelStateEffector.ReactionWheelStateEffector_rwSpeedMsgBuffer_set)
    nameOfReactionWheelOmegasState = property(_reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelOmegasState_get, _reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelOmegasState_set)
    nameOfReactionWheelThetasState = property(_reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelThetasState_get, _reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelThetasState_set)
    numRW = property(_reactionWheelStateEffector.ReactionWheelStateEffector_numRW_get, _reactionWheelStateEffector.ReactionWheelStateEffector_numRW_set)
    numRWJitter = property(_reactionWheelStateEffector.ReactionWheelStateEffector_numRWJitter_get, _reactionWheelStateEffector.ReactionWheelStateEffector_numRWJitter_set)
    bskLogger = property(_reactionWheelStateEffector.ReactionWheelStateEffector_bskLogger_get, _reactionWheelStateEffector.ReactionWheelStateEffector_bskLogger_set)

# Register ReactionWheelStateEffector in _reactionWheelStateEffector:
_reactionWheelStateEffector.ReactionWheelStateEffector_swigregister(ReactionWheelStateEffector)
MAX_CIRCLE_NUM = _reactionWheelStateEffector.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _reactionWheelStateEffector.MAX_LIMB_PNTS
MAX_EFF_CNT = _reactionWheelStateEffector.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _reactionWheelStateEffector.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _reactionWheelStateEffector.MAX_ST_VEH_COUNT
NANO2SEC = _reactionWheelStateEffector.NANO2SEC
SEC2NANO = _reactionWheelStateEffector.SEC2NANO
SEC2HOUR = _reactionWheelStateEffector.SEC2HOUR
class RWSpeedMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelSpeeds = property(_reactionWheelStateEffector.RWSpeedMsgPayload_wheelSpeeds_get, _reactionWheelStateEffector.RWSpeedMsgPayload_wheelSpeeds_set)
    wheelThetas = property(_reactionWheelStateEffector.RWSpeedMsgPayload_wheelThetas_get, _reactionWheelStateEffector.RWSpeedMsgPayload_wheelThetas_set)

    def __init__(self):
        _reactionWheelStateEffector.RWSpeedMsgPayload_swiginit(self, _reactionWheelStateEffector.new_RWSpeedMsgPayload())
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWSpeedMsgPayload

# Register RWSpeedMsgPayload in _reactionWheelStateEffector:
_reactionWheelStateEffector.RWSpeedMsgPayload_swigregister(RWSpeedMsgPayload)
class RWCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u_cmd = property(_reactionWheelStateEffector.RWCmdMsgPayload_u_cmd_get, _reactionWheelStateEffector.RWCmdMsgPayload_u_cmd_set)

    def __init__(self):
        _reactionWheelStateEffector.RWCmdMsgPayload_swiginit(self, _reactionWheelStateEffector.new_RWCmdMsgPayload())
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWCmdMsgPayload

# Register RWCmdMsgPayload in _reactionWheelStateEffector:
_reactionWheelStateEffector.RWCmdMsgPayload_swigregister(RWCmdMsgPayload)
class RWConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rWB_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_rWB_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_rWB_B_set)
    gsHat_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_gsHat_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_gsHat_B_set)
    w2Hat0_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_w2Hat0_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_w2Hat0_B_set)
    w3Hat0_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_w3Hat0_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_w3Hat0_B_set)
    mass = property(_reactionWheelStateEffector.RWConfigMsgPayload_mass_get, _reactionWheelStateEffector.RWConfigMsgPayload_mass_set)
    theta = property(_reactionWheelStateEffector.RWConfigMsgPayload_theta_get, _reactionWheelStateEffector.RWConfigMsgPayload_theta_set)
    Omega = property(_reactionWheelStateEffector.RWConfigMsgPayload_Omega_get, _reactionWheelStateEffector.RWConfigMsgPayload_Omega_set)
    Js = property(_reactionWheelStateEffector.RWConfigMsgPayload_Js_get, _reactionWheelStateEffector.RWConfigMsgPayload_Js_set)
    Jt = property(_reactionWheelStateEffector.RWConfigMsgPayload_Jt_get, _reactionWheelStateEffector.RWConfigMsgPayload_Jt_set)
    Jg = property(_reactionWheelStateEffector.RWConfigMsgPayload_Jg_get, _reactionWheelStateEffector.RWConfigMsgPayload_Jg_set)
    U_s = property(_reactionWheelStateEffector.RWConfigMsgPayload_U_s_get, _reactionWheelStateEffector.RWConfigMsgPayload_U_s_set)
    U_d = property(_reactionWheelStateEffector.RWConfigMsgPayload_U_d_get, _reactionWheelStateEffector.RWConfigMsgPayload_U_d_set)
    d = property(_reactionWheelStateEffector.RWConfigMsgPayload_d_get, _reactionWheelStateEffector.RWConfigMsgPayload_d_set)
    J13 = property(_reactionWheelStateEffector.RWConfigMsgPayload_J13_get, _reactionWheelStateEffector.RWConfigMsgPayload_J13_set)
    u_current = property(_reactionWheelStateEffector.RWConfigMsgPayload_u_current_get, _reactionWheelStateEffector.RWConfigMsgPayload_u_current_set)
    u_max = property(_reactionWheelStateEffector.RWConfigMsgPayload_u_max_get, _reactionWheelStateEffector.RWConfigMsgPayload_u_max_set)
    u_min = property(_reactionWheelStateEffector.RWConfigMsgPayload_u_min_get, _reactionWheelStateEffector.RWConfigMsgPayload_u_min_set)
    fCoulomb = property(_reactionWheelStateEffector.RWConfigMsgPayload_fCoulomb_get, _reactionWheelStateEffector.RWConfigMsgPayload_fCoulomb_set)
    fStatic = property(_reactionWheelStateEffector.RWConfigMsgPayload_fStatic_get, _reactionWheelStateEffector.RWConfigMsgPayload_fStatic_set)
    betaStatic = property(_reactionWheelStateEffector.RWConfigMsgPayload_betaStatic_get, _reactionWheelStateEffector.RWConfigMsgPayload_betaStatic_set)
    cViscous = property(_reactionWheelStateEffector.RWConfigMsgPayload_cViscous_get, _reactionWheelStateEffector.RWConfigMsgPayload_cViscous_set)
    omegaLimitCycle = property(_reactionWheelStateEffector.RWConfigMsgPayload_omegaLimitCycle_get, _reactionWheelStateEffector.RWConfigMsgPayload_omegaLimitCycle_set)
    frictionTorque = property(_reactionWheelStateEffector.RWConfigMsgPayload_frictionTorque_get, _reactionWheelStateEffector.RWConfigMsgPayload_frictionTorque_set)
    omegaBefore = property(_reactionWheelStateEffector.RWConfigMsgPayload_omegaBefore_get, _reactionWheelStateEffector.RWConfigMsgPayload_omegaBefore_set)
    frictionStribeck = property(_reactionWheelStateEffector.RWConfigMsgPayload_frictionStribeck_get, _reactionWheelStateEffector.RWConfigMsgPayload_frictionStribeck_set)
    Omega_max = property(_reactionWheelStateEffector.RWConfigMsgPayload_Omega_max_get, _reactionWheelStateEffector.RWConfigMsgPayload_Omega_max_set)
    P_max = property(_reactionWheelStateEffector.RWConfigMsgPayload_P_max_get, _reactionWheelStateEffector.RWConfigMsgPayload_P_max_set)
    RWModel = property(_reactionWheelStateEffector.RWConfigMsgPayload_RWModel_get, _reactionWheelStateEffector.RWConfigMsgPayload_RWModel_set)
    aOmega = property(_reactionWheelStateEffector.RWConfigMsgPayload_aOmega_get, _reactionWheelStateEffector.RWConfigMsgPayload_aOmega_set)
    bOmega = property(_reactionWheelStateEffector.RWConfigMsgPayload_bOmega_get, _reactionWheelStateEffector.RWConfigMsgPayload_bOmega_set)
    cOmega = property(_reactionWheelStateEffector.RWConfigMsgPayload_cOmega_get, _reactionWheelStateEffector.RWConfigMsgPayload_cOmega_set)
    IRWPntWc_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_IRWPntWc_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_IRWPntWc_B_set)
    IPrimeRWPntWc_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_IPrimeRWPntWc_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_IPrimeRWPntWc_B_set)
    rWcB_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_rWcB_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_rWcB_B_set)
    rTildeWcB_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_rTildeWcB_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_rTildeWcB_B_set)
    rPrimeWcB_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_rPrimeWcB_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_rPrimeWcB_B_set)
    w2Hat_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_w2Hat_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_w2Hat_B_set)
    w3Hat_B = property(_reactionWheelStateEffector.RWConfigMsgPayload_w3Hat_B_get, _reactionWheelStateEffector.RWConfigMsgPayload_w3Hat_B_set)
    label = property(_reactionWheelStateEffector.RWConfigMsgPayload_label_get, _reactionWheelStateEffector.RWConfigMsgPayload_label_set)

    def __init__(self):
        _reactionWheelStateEffector.RWConfigMsgPayload_swiginit(self, _reactionWheelStateEffector.new_RWConfigMsgPayload())
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWConfigMsgPayload

# Register RWConfigMsgPayload in _reactionWheelStateEffector:
_reactionWheelStateEffector.RWConfigMsgPayload_swigregister(RWConfigMsgPayload)
class RWConfigLogMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rWB_B = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_rWB_B_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_rWB_B_set)
    gsHat_B = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_gsHat_B_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_gsHat_B_set)
    w2Hat0_B = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_w2Hat0_B_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_w2Hat0_B_set)
    w3Hat0_B = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_w3Hat0_B_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_w3Hat0_B_set)
    mass = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_mass_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_mass_set)
    theta = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_theta_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_theta_set)
    Omega = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_Omega_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_Omega_set)
    Js = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_Js_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_Js_set)
    Jt = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_Jt_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_Jt_set)
    Jg = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_Jg_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_Jg_set)
    U_s = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_U_s_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_U_s_set)
    U_d = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_U_d_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_U_d_set)
    d = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_d_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_d_set)
    J13 = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_J13_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_J13_set)
    u_current = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_u_current_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_u_current_set)
    frictionTorque = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_frictionTorque_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_frictionTorque_set)
    u_max = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_u_max_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_u_max_set)
    u_min = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_u_min_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_u_min_set)
    u_f = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_u_f_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_u_f_set)
    Omega_max = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_Omega_max_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_Omega_max_set)
    P_max = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_P_max_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_P_max_set)
    linearFrictionRatio = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_linearFrictionRatio_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_linearFrictionRatio_set)
    RWModel = property(_reactionWheelStateEffector.RWConfigLogMsgPayload_RWModel_get, _reactionWheelStateEffector.RWConfigLogMsgPayload_RWModel_set)

    def __init__(self):
        _reactionWheelStateEffector.RWConfigLogMsgPayload_swiginit(self, _reactionWheelStateEffector.new_RWConfigLogMsgPayload())
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWConfigLogMsgPayload

# Register RWConfigLogMsgPayload in _reactionWheelStateEffector:
_reactionWheelStateEffector.RWConfigLogMsgPayload_swigregister(RWConfigLogMsgPayload)
class ArrayMotorTorqueMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    motorTorque = property(_reactionWheelStateEffector.ArrayMotorTorqueMsgPayload_motorTorque_get, _reactionWheelStateEffector.ArrayMotorTorqueMsgPayload_motorTorque_set)

    def __init__(self):
        _reactionWheelStateEffector.ArrayMotorTorqueMsgPayload_swiginit(self, _reactionWheelStateEffector.new_ArrayMotorTorqueMsgPayload())
    __swig_destroy__ = _reactionWheelStateEffector.delete_ArrayMotorTorqueMsgPayload

# Register ArrayMotorTorqueMsgPayload in _reactionWheelStateEffector:
_reactionWheelStateEffector.ArrayMotorTorqueMsgPayload_swigregister(ArrayMotorTorqueMsgPayload)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _reactionWheelStateEffector.delete_SwigPyIterator

    def value(self):
        return _reactionWheelStateEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _reactionWheelStateEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _reactionWheelStateEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _reactionWheelStateEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _reactionWheelStateEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _reactionWheelStateEffector.SwigPyIterator_copy(self)

    def next(self):
        return _reactionWheelStateEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _reactionWheelStateEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _reactionWheelStateEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _reactionWheelStateEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _reactionWheelStateEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _reactionWheelStateEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _reactionWheelStateEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _reactionWheelStateEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _reactionWheelStateEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _reactionWheelStateEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _reactionWheelStateEffector:
_reactionWheelStateEffector.SwigPyIterator_swigregister(SwigPyIterator)
class RWConfigPointerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.RWConfigPointerVector___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.RWConfigPointerVector___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.RWConfigPointerVector___len__(self)

    def __getslice__(self, i, j):
        return _reactionWheelStateEffector.RWConfigPointerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _reactionWheelStateEffector.RWConfigPointerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _reactionWheelStateEffector.RWConfigPointerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _reactionWheelStateEffector.RWConfigPointerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _reactionWheelStateEffector.RWConfigPointerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _reactionWheelStateEffector.RWConfigPointerVector___setitem__(self, *args)

    def pop(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_pop(self)

    def append(self, x):
        return _reactionWheelStateEffector.RWConfigPointerVector_append(self, x)

    def empty(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_empty(self)

    def size(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_size(self)

    def swap(self, v):
        return _reactionWheelStateEffector.RWConfigPointerVector_swap(self, v)

    def begin(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_begin(self)

    def end(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_rend(self)

    def clear(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_clear(self)

    def get_allocator(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_get_allocator(self)

    def pop_back(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_pop_back(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.RWConfigPointerVector_erase(self, *args)

    def __init__(self, *args):
        _reactionWheelStateEffector.RWConfigPointerVector_swiginit(self, _reactionWheelStateEffector.new_RWConfigPointerVector(*args))

    def push_back(self, x):
        return _reactionWheelStateEffector.RWConfigPointerVector_push_back(self, x)

    def front(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_front(self)

    def back(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_back(self)

    def assign(self, n, x):
        return _reactionWheelStateEffector.RWConfigPointerVector_assign(self, n, x)

    def resize(self, *args):
        return _reactionWheelStateEffector.RWConfigPointerVector_resize(self, *args)

    def insert(self, *args):
        return _reactionWheelStateEffector.RWConfigPointerVector_insert(self, *args)

    def reserve(self, n):
        return _reactionWheelStateEffector.RWConfigPointerVector_reserve(self, n)

    def capacity(self):
        return _reactionWheelStateEffector.RWConfigPointerVector_capacity(self)
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWConfigPointerVector

# Register RWConfigPointerVector in _reactionWheelStateEffector:
_reactionWheelStateEffector.RWConfigPointerVector_swigregister(RWConfigPointerVector)

import sys
protectAllClasses(sys.modules[__name__])


