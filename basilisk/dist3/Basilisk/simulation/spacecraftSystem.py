# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable
from Basilisk.utilities import pythonVariableLogger



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _spacecraftSystem
else:
    import _spacecraftSystem

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *
from Basilisk.simulation.gravityEffector import GravBodyVector


def new_doubleArray(nelements):
    return _spacecraftSystem.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _spacecraftSystem.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _spacecraftSystem.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _spacecraftSystem.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _spacecraftSystem.new_longArray(nelements)

def delete_longArray(ary):
    return _spacecraftSystem.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _spacecraftSystem.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _spacecraftSystem.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _spacecraftSystem.new_intArray(nelements)

def delete_intArray(ary):
    return _spacecraftSystem.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _spacecraftSystem.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _spacecraftSystem.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _spacecraftSystem.new_shortArray(nelements)

def delete_shortArray(ary):
    return _spacecraftSystem.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _spacecraftSystem.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _spacecraftSystem.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _spacecraftSystem.MAX_LOGGING_LENGTH
BSK_DEBUG = _spacecraftSystem.BSK_DEBUG
BSK_INFORMATION = _spacecraftSystem.BSK_INFORMATION
BSK_WARNING = _spacecraftSystem.BSK_WARNING
BSK_ERROR = _spacecraftSystem.BSK_ERROR
BSK_SILENT = _spacecraftSystem.BSK_SILENT

def printDefaultLogLevel():
    return _spacecraftSystem.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _spacecraftSystem.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _spacecraftSystem.getDefaultLogLevel()
class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spacecraftSystem.BSKLogger_swiginit(self, _spacecraftSystem.new_BSKLogger(*args))
    __swig_destroy__ = _spacecraftSystem.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _spacecraftSystem.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _spacecraftSystem.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _spacecraftSystem.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _spacecraftSystem.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_spacecraftSystem.BSKLogger_logLevelMap_get, _spacecraftSystem.BSKLogger_logLevelMap_set)

# Register BSKLogger in _spacecraftSystem:
_spacecraftSystem.BSKLogger_swigregister(BSKLogger)
cvar = _spacecraftSystem.cvar


def _BSKLogger():
    return _spacecraftSystem._BSKLogger()

def _BSKLogger_d(arg1):
    return _spacecraftSystem._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _spacecraftSystem._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _spacecraftSystem._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _spacecraftSystem._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spacecraftSystem.SysModel_swiginit(self, _spacecraftSystem.new_SysModel(*args))
    __swig_destroy__ = _spacecraftSystem.delete_SysModel

    def SelfInit(self):
        return _spacecraftSystem.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _spacecraftSystem.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _spacecraftSystem.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _spacecraftSystem.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_spacecraftSystem.SysModel_ModelTag_get, _spacecraftSystem.SysModel_ModelTag_set)
    CallCounts = property(_spacecraftSystem.SysModel_CallCounts_get, _spacecraftSystem.SysModel_CallCounts_set)
    RNGSeed = property(_spacecraftSystem.SysModel_RNGSeed_get, _spacecraftSystem.SysModel_RNGSeed_set)
    moduleID = property(_spacecraftSystem.SysModel_moduleID_get, _spacecraftSystem.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        logging_functions = {
            variable_name: lambda _, vn=variable_name: getattr(self, vn)
            for variable_name in variableNames
        }

        for variable_name, log_fun in logging_functions.items():
            try:
                log_fun(0)
            except AttributeError:
                raise ValueError(f"Cannot log {variable_name} as it is not a "
                                f"variable of {type(self).__name__}")

        return pythonVariableLogger.PythonVariableLogger(logging_functions, recordingTime)


# Register SysModel in _spacecraftSystem:
_spacecraftSystem.SysModel_swigregister(SysModel)
class StateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_spacecraftSystem.StateData_state_get, _spacecraftSystem.StateData_state_set)
    stateDeriv = property(_spacecraftSystem.StateData_stateDeriv_get, _spacecraftSystem.StateData_stateDeriv_set)
    stateName = property(_spacecraftSystem.StateData_stateName_get, _spacecraftSystem.StateData_stateName_set)
    stateEnabled = property(_spacecraftSystem.StateData_stateEnabled_get, _spacecraftSystem.StateData_stateEnabled_set)
    bskLogger = property(_spacecraftSystem.StateData_bskLogger_get, _spacecraftSystem.StateData_bskLogger_set)

    def __init__(self, *args):
        _spacecraftSystem.StateData_swiginit(self, _spacecraftSystem.new_StateData(*args))
    __swig_destroy__ = _spacecraftSystem.delete_StateData

    def setState(self, newState):
        return _spacecraftSystem.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _spacecraftSystem.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _spacecraftSystem.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _spacecraftSystem.StateData_getState(self)

    def getStateDeriv(self):
        return _spacecraftSystem.StateData_getStateDeriv(self)

    def getName(self):
        return _spacecraftSystem.StateData_getName(self)

    def getRowSize(self):
        return _spacecraftSystem.StateData_getRowSize(self)

    def getColumnSize(self):
        return _spacecraftSystem.StateData_getColumnSize(self)

    def isStateActive(self):
        return _spacecraftSystem.StateData_isStateActive(self)

    def disable(self):
        return _spacecraftSystem.StateData_disable(self)

    def enable(self):
        return _spacecraftSystem.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _spacecraftSystem.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _spacecraftSystem.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _spacecraftSystem.StateData___mul__(self, scaleFactor)

# Register StateData in _spacecraftSystem:
_spacecraftSystem.StateData_swigregister(StateData)
class StateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateMap = property(_spacecraftSystem.StateVector_stateMap_get, _spacecraftSystem.StateVector_stateMap_set)

    def __add__(self, operand):
        return _spacecraftSystem.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _spacecraftSystem.StateVector___mul__(self, scaleFactor)

    def __init__(self):
        _spacecraftSystem.StateVector_swiginit(self, _spacecraftSystem.new_StateVector())
    __swig_destroy__ = _spacecraftSystem.delete_StateVector

# Register StateVector in _spacecraftSystem:
_spacecraftSystem.StateVector_swigregister(StateVector)
class DynParamManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dynProperties = property(_spacecraftSystem.DynParamManager_dynProperties_get, _spacecraftSystem.DynParamManager_dynProperties_set)
    stateContainer = property(_spacecraftSystem.DynParamManager_stateContainer_get, _spacecraftSystem.DynParamManager_stateContainer_set)
    bskLogger = property(_spacecraftSystem.DynParamManager_bskLogger_get, _spacecraftSystem.DynParamManager_bskLogger_set)

    def __init__(self):
        _spacecraftSystem.DynParamManager_swiginit(self, _spacecraftSystem.new_DynParamManager())
    __swig_destroy__ = _spacecraftSystem.delete_DynParamManager

    def registerState(self, nRow, nCol, stateName):
        return _spacecraftSystem.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _spacecraftSystem.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _spacecraftSystem.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _spacecraftSystem.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _spacecraftSystem.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _spacecraftSystem.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _spacecraftSystem.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _spacecraftSystem.DynParamManager_setPropertyValue(self, propName, propValue)

# Register DynParamManager in _spacecraftSystem:
_spacecraftSystem.DynParamManager_swigregister(DynParamManager)
class DynamicObject(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    dynManager = property(_spacecraftSystem.DynamicObject_dynManager_get, _spacecraftSystem.DynamicObject_dynManager_set)
    integrator = property(_spacecraftSystem.DynamicObject_integrator_get, _spacecraftSystem.DynamicObject_integrator_set)
    bskLogger = property(_spacecraftSystem.DynamicObject_bskLogger_get, _spacecraftSystem.DynamicObject_bskLogger_set)
    __swig_destroy__ = _spacecraftSystem.delete_DynamicObject

    def UpdateState(self, callTime):
        return _spacecraftSystem.DynamicObject_UpdateState(self, callTime)

    def equationsOfMotion(self, t, timeStep):
        return _spacecraftSystem.DynamicObject_equationsOfMotion(self, t, timeStep)

    def preIntegration(self, callTime):
        return _spacecraftSystem.DynamicObject_preIntegration(self, callTime)

    def postIntegration(self, callTime):
        return _spacecraftSystem.DynamicObject_postIntegration(self, callTime)

    def initializeDynamics(self):
        return _spacecraftSystem.DynamicObject_initializeDynamics(self)

    def computeEnergyMomentum(self, t):
        return _spacecraftSystem.DynamicObject_computeEnergyMomentum(self, t)

    def integrateState(self, t):
        return _spacecraftSystem.DynamicObject_integrateState(self, t)

    def setIntegrator(self, newIntegrator):
        return _spacecraftSystem.DynamicObject_setIntegrator(self, newIntegrator)

    def syncDynamicsIntegration(self, dynPtr):
        return _spacecraftSystem.DynamicObject_syncDynamicsIntegration(self, dynPtr)
    isDynamicsSynced = property(_spacecraftSystem.DynamicObject_isDynamicsSynced_get, _spacecraftSystem.DynamicObject_isDynamicsSynced_set)
    timeStep = property(_spacecraftSystem.DynamicObject_timeStep_get, _spacecraftSystem.DynamicObject_timeStep_set)
    timeBefore = property(_spacecraftSystem.DynamicObject_timeBefore_get, _spacecraftSystem.DynamicObject_timeBefore_set)

# Register DynamicObject in _spacecraftSystem:
_spacecraftSystem.DynamicObject_swigregister(DynamicObject)
import Basilisk.simulation.gravityEffector
import Basilisk.simulation.gravityModel
class BackSubMatrices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    matrixA = property(_spacecraftSystem.BackSubMatrices_matrixA_get, _spacecraftSystem.BackSubMatrices_matrixA_set)
    matrixB = property(_spacecraftSystem.BackSubMatrices_matrixB_get, _spacecraftSystem.BackSubMatrices_matrixB_set)
    matrixC = property(_spacecraftSystem.BackSubMatrices_matrixC_get, _spacecraftSystem.BackSubMatrices_matrixC_set)
    matrixD = property(_spacecraftSystem.BackSubMatrices_matrixD_get, _spacecraftSystem.BackSubMatrices_matrixD_set)
    vecTrans = property(_spacecraftSystem.BackSubMatrices_vecTrans_get, _spacecraftSystem.BackSubMatrices_vecTrans_set)
    vecRot = property(_spacecraftSystem.BackSubMatrices_vecRot_get, _spacecraftSystem.BackSubMatrices_vecRot_set)

    def __init__(self):
        _spacecraftSystem.BackSubMatrices_swiginit(self, _spacecraftSystem.new_BackSubMatrices())
    __swig_destroy__ = _spacecraftSystem.delete_BackSubMatrices

# Register BackSubMatrices in _spacecraftSystem:
_spacecraftSystem.BackSubMatrices_swigregister(BackSubMatrices)
class EffectorMassProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mEff = property(_spacecraftSystem.EffectorMassProps_mEff_get, _spacecraftSystem.EffectorMassProps_mEff_set)
    mEffDot = property(_spacecraftSystem.EffectorMassProps_mEffDot_get, _spacecraftSystem.EffectorMassProps_mEffDot_set)
    IEffPntB_B = property(_spacecraftSystem.EffectorMassProps_IEffPntB_B_get, _spacecraftSystem.EffectorMassProps_IEffPntB_B_set)
    rEff_CB_B = property(_spacecraftSystem.EffectorMassProps_rEff_CB_B_get, _spacecraftSystem.EffectorMassProps_rEff_CB_B_set)
    rEffPrime_CB_B = property(_spacecraftSystem.EffectorMassProps_rEffPrime_CB_B_get, _spacecraftSystem.EffectorMassProps_rEffPrime_CB_B_set)
    IEffPrimePntB_B = property(_spacecraftSystem.EffectorMassProps_IEffPrimePntB_B_get, _spacecraftSystem.EffectorMassProps_IEffPrimePntB_B_set)

    def __init__(self):
        _spacecraftSystem.EffectorMassProps_swiginit(self, _spacecraftSystem.new_EffectorMassProps())
    __swig_destroy__ = _spacecraftSystem.delete_EffectorMassProps

# Register EffectorMassProps in _spacecraftSystem:
_spacecraftSystem.EffectorMassProps_swigregister(EffectorMassProps)
class StateEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    nameOfSpacecraftAttachedTo = property(_spacecraftSystem.StateEffector_nameOfSpacecraftAttachedTo_get, _spacecraftSystem.StateEffector_nameOfSpacecraftAttachedTo_set)
    parentSpacecraftName = property(_spacecraftSystem.StateEffector_parentSpacecraftName_get, _spacecraftSystem.StateEffector_parentSpacecraftName_set)
    effProps = property(_spacecraftSystem.StateEffector_effProps_get, _spacecraftSystem.StateEffector_effProps_set)
    stateDerivContribution = property(_spacecraftSystem.StateEffector_stateDerivContribution_get, _spacecraftSystem.StateEffector_stateDerivContribution_set)
    forceOnBody_B = property(_spacecraftSystem.StateEffector_forceOnBody_B_get, _spacecraftSystem.StateEffector_forceOnBody_B_set)
    torqueOnBodyPntB_B = property(_spacecraftSystem.StateEffector_torqueOnBodyPntB_B_get, _spacecraftSystem.StateEffector_torqueOnBodyPntB_B_set)
    torqueOnBodyPntC_B = property(_spacecraftSystem.StateEffector_torqueOnBodyPntC_B_get, _spacecraftSystem.StateEffector_torqueOnBodyPntC_B_set)
    r_BP_P = property(_spacecraftSystem.StateEffector_r_BP_P_get, _spacecraftSystem.StateEffector_r_BP_P_set)
    dcm_BP = property(_spacecraftSystem.StateEffector_dcm_BP_get, _spacecraftSystem.StateEffector_dcm_BP_set)
    bskLogger = property(_spacecraftSystem.StateEffector_bskLogger_get, _spacecraftSystem.StateEffector_bskLogger_set)
    __swig_destroy__ = _spacecraftSystem.delete_StateEffector

    def updateEffectorMassProps(self, integTime):
        return _spacecraftSystem.StateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _spacecraftSystem.StateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _spacecraftSystem.StateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _spacecraftSystem.StateEffector_modifyStates(self, integTime)

    def calcForceTorqueOnBody(self, integTime, omega_BN_B):
        return _spacecraftSystem.StateEffector_calcForceTorqueOnBody(self, integTime, omega_BN_B)

    def writeOutputStateMessages(self, integTimeNanos):
        return _spacecraftSystem.StateEffector_writeOutputStateMessages(self, integTimeNanos)

    def registerStates(self, states):
        return _spacecraftSystem.StateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _spacecraftSystem.StateEffector_linkInStates(self, states)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _spacecraftSystem.StateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def prependSpacecraftNameToStates(self):
        return _spacecraftSystem.StateEffector_prependSpacecraftNameToStates(self)

    def receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP):
        return _spacecraftSystem.StateEffector_receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP)

# Register StateEffector in _spacecraftSystem:
_spacecraftSystem.StateEffector_swigregister(StateEffector)
class DockingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_DB_B = property(_spacecraftSystem.DockingData_r_DB_B_get, _spacecraftSystem.DockingData_r_DB_B_set)
    dcm_DB = property(_spacecraftSystem.DockingData_dcm_DB_get, _spacecraftSystem.DockingData_dcm_DB_set)
    r_DP_P = property(_spacecraftSystem.DockingData_r_DP_P_get, _spacecraftSystem.DockingData_r_DP_P_set)
    dcm_DP = property(_spacecraftSystem.DockingData_dcm_DP_get, _spacecraftSystem.DockingData_dcm_DP_set)
    portName = property(_spacecraftSystem.DockingData_portName_get, _spacecraftSystem.DockingData_portName_set)

    def __init__(self):
        _spacecraftSystem.DockingData_swiginit(self, _spacecraftSystem.new_DockingData())
    __swig_destroy__ = _spacecraftSystem.delete_DockingData

# Register DockingData in _spacecraftSystem:
_spacecraftSystem.DockingData_swigregister(DockingData)
class SpacecraftUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    docked = property(_spacecraftSystem.SpacecraftUnit_docked_get, _spacecraftSystem.SpacecraftUnit_docked_set)
    spacecraftName = property(_spacecraftSystem.SpacecraftUnit_spacecraftName_get, _spacecraftSystem.SpacecraftUnit_spacecraftName_set)
    scStateOutMsg = property(_spacecraftSystem.SpacecraftUnit_scStateOutMsg_get, _spacecraftSystem.SpacecraftUnit_scStateOutMsg_set)
    scMassStateOutMsg = property(_spacecraftSystem.SpacecraftUnit_scMassStateOutMsg_get, _spacecraftSystem.SpacecraftUnit_scMassStateOutMsg_set)
    scEnergyMomentumOutMsg = property(_spacecraftSystem.SpacecraftUnit_scEnergyMomentumOutMsg_get, _spacecraftSystem.SpacecraftUnit_scEnergyMomentumOutMsg_set)
    totOrbEnergy = property(_spacecraftSystem.SpacecraftUnit_totOrbEnergy_get, _spacecraftSystem.SpacecraftUnit_totOrbEnergy_set)
    totRotEnergy = property(_spacecraftSystem.SpacecraftUnit_totRotEnergy_get, _spacecraftSystem.SpacecraftUnit_totRotEnergy_set)
    rotEnergyContr = property(_spacecraftSystem.SpacecraftUnit_rotEnergyContr_get, _spacecraftSystem.SpacecraftUnit_rotEnergyContr_set)
    orbPotentialEnergyContr = property(_spacecraftSystem.SpacecraftUnit_orbPotentialEnergyContr_get, _spacecraftSystem.SpacecraftUnit_orbPotentialEnergyContr_set)
    totOrbAngMomPntN_N = property(_spacecraftSystem.SpacecraftUnit_totOrbAngMomPntN_N_get, _spacecraftSystem.SpacecraftUnit_totOrbAngMomPntN_N_set)
    totRotAngMomPntC_N = property(_spacecraftSystem.SpacecraftUnit_totRotAngMomPntC_N_get, _spacecraftSystem.SpacecraftUnit_totRotAngMomPntC_N_set)
    rotAngMomPntCContr_B = property(_spacecraftSystem.SpacecraftUnit_rotAngMomPntCContr_B_get, _spacecraftSystem.SpacecraftUnit_rotAngMomPntCContr_B_set)
    backSubMatricesContributions = property(_spacecraftSystem.SpacecraftUnit_backSubMatricesContributions_get, _spacecraftSystem.SpacecraftUnit_backSubMatricesContributions_set)
    sumForceExternal_N = property(_spacecraftSystem.SpacecraftUnit_sumForceExternal_N_get, _spacecraftSystem.SpacecraftUnit_sumForceExternal_N_set)
    sumForceExternal_B = property(_spacecraftSystem.SpacecraftUnit_sumForceExternal_B_get, _spacecraftSystem.SpacecraftUnit_sumForceExternal_B_set)
    sumTorquePntB_B = property(_spacecraftSystem.SpacecraftUnit_sumTorquePntB_B_get, _spacecraftSystem.SpacecraftUnit_sumTorquePntB_B_set)
    oldV_CN_N = property(_spacecraftSystem.SpacecraftUnit_oldV_CN_N_get, _spacecraftSystem.SpacecraftUnit_oldV_CN_N_set)
    oldV_BN_N = property(_spacecraftSystem.SpacecraftUnit_oldV_BN_N_get, _spacecraftSystem.SpacecraftUnit_oldV_BN_N_set)
    oldOmega_BN_B = property(_spacecraftSystem.SpacecraftUnit_oldOmega_BN_B_get, _spacecraftSystem.SpacecraftUnit_oldOmega_BN_B_set)
    dvAccum_CN_B = property(_spacecraftSystem.SpacecraftUnit_dvAccum_CN_B_get, _spacecraftSystem.SpacecraftUnit_dvAccum_CN_B_set)
    dvAccum_BN_B = property(_spacecraftSystem.SpacecraftUnit_dvAccum_BN_B_get, _spacecraftSystem.SpacecraftUnit_dvAccum_BN_B_set)
    nonConservativeAccelpntB_B = property(_spacecraftSystem.SpacecraftUnit_nonConservativeAccelpntB_B_get, _spacecraftSystem.SpacecraftUnit_nonConservativeAccelpntB_B_set)
    omegaDot_BN_B = property(_spacecraftSystem.SpacecraftUnit_omegaDot_BN_B_get, _spacecraftSystem.SpacecraftUnit_omegaDot_BN_B_set)
    hub = property(_spacecraftSystem.SpacecraftUnit_hub_get, _spacecraftSystem.SpacecraftUnit_hub_set)
    gravField = property(_spacecraftSystem.SpacecraftUnit_gravField_get, _spacecraftSystem.SpacecraftUnit_gravField_set)
    states = property(_spacecraftSystem.SpacecraftUnit_states_get, _spacecraftSystem.SpacecraftUnit_states_set)
    dynEffectors = property(_spacecraftSystem.SpacecraftUnit_dynEffectors_get, _spacecraftSystem.SpacecraftUnit_dynEffectors_set)
    dockingPoints = property(_spacecraftSystem.SpacecraftUnit_dockingPoints_get, _spacecraftSystem.SpacecraftUnit_dockingPoints_set)
    inertialPositionProperty = property(_spacecraftSystem.SpacecraftUnit_inertialPositionProperty_get, _spacecraftSystem.SpacecraftUnit_inertialPositionProperty_set)
    inertialVelocityProperty = property(_spacecraftSystem.SpacecraftUnit_inertialVelocityProperty_get, _spacecraftSystem.SpacecraftUnit_inertialVelocityProperty_set)
    bskLogger = property(_spacecraftSystem.SpacecraftUnit_bskLogger_get, _spacecraftSystem.SpacecraftUnit_bskLogger_set)

    def __init__(self):
        _spacecraftSystem.SpacecraftUnit_swiginit(self, _spacecraftSystem.new_SpacecraftUnit())
    __swig_destroy__ = _spacecraftSystem.delete_SpacecraftUnit

    def addStateEffector(self, newStateEffector):
        return _spacecraftSystem.SpacecraftUnit_addStateEffector(self, newStateEffector)

    def addDynamicEffector(self, newDynamicEffector):
        return _spacecraftSystem.SpacecraftUnit_addDynamicEffector(self, newDynamicEffector)

    def addDockingPort(self, newDockingPort):
        return _spacecraftSystem.SpacecraftUnit_addDockingPort(self, newDockingPort)

    def SelfInitSC(self, moduleID):
        return _spacecraftSystem.SpacecraftUnit_SelfInitSC(self, moduleID)

    def ResetSC(self, CurrentSimNanos):
        return _spacecraftSystem.SpacecraftUnit_ResetSC(self, CurrentSimNanos)

    def writeOutputMessagesSC(self, clockTime, moduleID):
        return _spacecraftSystem.SpacecraftUnit_writeOutputMessagesSC(self, clockTime, moduleID)

    def linkInStatesSC(self, statesIn):
        return _spacecraftSystem.SpacecraftUnit_linkInStatesSC(self, statesIn)

    def initializeDynamicsSC(self, statesIn):
        return _spacecraftSystem.SpacecraftUnit_initializeDynamicsSC(self, statesIn)

# Register SpacecraftUnit in _spacecraftSystem:
_spacecraftSystem.SpacecraftUnit_swigregister(SpacecraftUnit)
class SpacecraftSystem(DynamicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    simTimePrevious = property(_spacecraftSystem.SpacecraftSystem_simTimePrevious_get, _spacecraftSystem.SpacecraftSystem_simTimePrevious_set)
    numOutMsgBuffers = property(_spacecraftSystem.SpacecraftSystem_numOutMsgBuffers_get, _spacecraftSystem.SpacecraftSystem_numOutMsgBuffers_set)
    sysTimePropertyName = property(_spacecraftSystem.SpacecraftSystem_sysTimePropertyName_get, _spacecraftSystem.SpacecraftSystem_sysTimePropertyName_set)
    currTimeStep = property(_spacecraftSystem.SpacecraftSystem_currTimeStep_get, _spacecraftSystem.SpacecraftSystem_currTimeStep_set)
    timePrevious = property(_spacecraftSystem.SpacecraftSystem_timePrevious_get, _spacecraftSystem.SpacecraftSystem_timePrevious_set)
    primaryCentralSpacecraft = property(_spacecraftSystem.SpacecraftSystem_primaryCentralSpacecraft_get, _spacecraftSystem.SpacecraftSystem_primaryCentralSpacecraft_set)
    spacecraftDockedToPrimary = property(_spacecraftSystem.SpacecraftSystem_spacecraftDockedToPrimary_get, _spacecraftSystem.SpacecraftSystem_spacecraftDockedToPrimary_set)
    unDockedSpacecraft = property(_spacecraftSystem.SpacecraftSystem_unDockedSpacecraft_get, _spacecraftSystem.SpacecraftSystem_unDockedSpacecraft_set)
    numberOfSCAttachedToPrimary = property(_spacecraftSystem.SpacecraftSystem_numberOfSCAttachedToPrimary_get, _spacecraftSystem.SpacecraftSystem_numberOfSCAttachedToPrimary_set)
    bskLogger = property(_spacecraftSystem.SpacecraftSystem_bskLogger_get, _spacecraftSystem.SpacecraftSystem_bskLogger_set)

    def __init__(self):
        _spacecraftSystem.SpacecraftSystem_swiginit(self, _spacecraftSystem.new_SpacecraftSystem())
    __swig_destroy__ = _spacecraftSystem.delete_SpacecraftSystem

    def initializeDynamics(self):
        return _spacecraftSystem.SpacecraftSystem_initializeDynamics(self)

    def computeEnergyMomentum(self, time):
        return _spacecraftSystem.SpacecraftSystem_computeEnergyMomentum(self, time)

    def computeEnergyMomentumSC(self, time, spacecraft):
        return _spacecraftSystem.SpacecraftSystem_computeEnergyMomentumSC(self, time, spacecraft)

    def computeEnergyMomentumSystem(self, time):
        return _spacecraftSystem.SpacecraftSystem_computeEnergyMomentumSystem(self, time)

    def updateSpacecraftMassProps(self, time, spacecraft):
        return _spacecraftSystem.SpacecraftSystem_updateSpacecraftMassProps(self, time, spacecraft)

    def updateSystemMassProps(self, time):
        return _spacecraftSystem.SpacecraftSystem_updateSystemMassProps(self, time)

    def initializeSCPosVelocity(self, spacecraft):
        return _spacecraftSystem.SpacecraftSystem_initializeSCPosVelocity(self, spacecraft)

    def Reset(self, CurrentSimNanos):
        return _spacecraftSystem.SpacecraftSystem_Reset(self, CurrentSimNanos)

    def writeOutputMessages(self, clockTime):
        return _spacecraftSystem.SpacecraftSystem_writeOutputMessages(self, clockTime)

    def UpdateState(self, CurrentSimNanos):
        return _spacecraftSystem.SpacecraftSystem_UpdateState(self, CurrentSimNanos)

    def equationsOfMotion(self, integTimeSeconds, timeStep):
        return _spacecraftSystem.SpacecraftSystem_equationsOfMotion(self, integTimeSeconds, timeStep)

    def equationsOfMotionSC(self, integTimeSeconds, timeStep, spacecraft):
        return _spacecraftSystem.SpacecraftSystem_equationsOfMotionSC(self, integTimeSeconds, timeStep, spacecraft)

    def equationsOfMotionSystem(self, integTimeSeconds, timeStep):
        return _spacecraftSystem.SpacecraftSystem_equationsOfMotionSystem(self, integTimeSeconds, timeStep)

    def findPriorStateInformation(self, spacecraft):
        return _spacecraftSystem.SpacecraftSystem_findPriorStateInformation(self, spacecraft)

    def calculateDeltaVandAcceleration(self, spacecraft, localTimeStep):
        return _spacecraftSystem.SpacecraftSystem_calculateDeltaVandAcceleration(self, spacecraft, localTimeStep)

    def attachSpacecraftToPrimary(self, newSpacecraft, dockingPortNameOfNewSpacecraft, dockingToPortName):
        return _spacecraftSystem.SpacecraftSystem_attachSpacecraftToPrimary(self, newSpacecraft, dockingPortNameOfNewSpacecraft, dockingToPortName)

    def addSpacecraftUndocked(self, newSpacecraft):
        return _spacecraftSystem.SpacecraftSystem_addSpacecraftUndocked(self, newSpacecraft)

    def determineAttachedSCStates(self):
        return _spacecraftSystem.SpacecraftSystem_determineAttachedSCStates(self)

    def preIntegration(self, callTime):
        return _spacecraftSystem.SpacecraftSystem_preIntegration(self, callTime)

    def postIntegration(self, callTime):
        return _spacecraftSystem.SpacecraftSystem_postIntegration(self, callTime)

# Register SpacecraftSystem in _spacecraftSystem:
_spacecraftSystem.SpacecraftSystem_swigregister(SpacecraftSystem)
class HubEffector(StateEffector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mHub = property(_spacecraftSystem.HubEffector_mHub_get, _spacecraftSystem.HubEffector_mHub_set)
    MRPSwitchCount = property(_spacecraftSystem.HubEffector_MRPSwitchCount_get, _spacecraftSystem.HubEffector_MRPSwitchCount_set)
    nameOfHubPosition = property(_spacecraftSystem.HubEffector_nameOfHubPosition_get, _spacecraftSystem.HubEffector_nameOfHubPosition_set)
    nameOfHubVelocity = property(_spacecraftSystem.HubEffector_nameOfHubVelocity_get, _spacecraftSystem.HubEffector_nameOfHubVelocity_set)
    nameOfHubSigma = property(_spacecraftSystem.HubEffector_nameOfHubSigma_get, _spacecraftSystem.HubEffector_nameOfHubSigma_set)
    nameOfHubOmega = property(_spacecraftSystem.HubEffector_nameOfHubOmega_get, _spacecraftSystem.HubEffector_nameOfHubOmega_set)
    nameOfHubGravVelocity = property(_spacecraftSystem.HubEffector_nameOfHubGravVelocity_get, _spacecraftSystem.HubEffector_nameOfHubGravVelocity_set)
    nameOfBcGravVelocity = property(_spacecraftSystem.HubEffector_nameOfBcGravVelocity_get, _spacecraftSystem.HubEffector_nameOfBcGravVelocity_set)
    r_BcB_B = property(_spacecraftSystem.HubEffector_r_BcB_B_get, _spacecraftSystem.HubEffector_r_BcB_B_set)
    IHubPntBc_B = property(_spacecraftSystem.HubEffector_IHubPntBc_B_get, _spacecraftSystem.HubEffector_IHubPntBc_B_set)
    hubBackSubMatrices = property(_spacecraftSystem.HubEffector_hubBackSubMatrices_get, _spacecraftSystem.HubEffector_hubBackSubMatrices_set)
    r_CN_NInit = property(_spacecraftSystem.HubEffector_r_CN_NInit_get, _spacecraftSystem.HubEffector_r_CN_NInit_set)
    v_CN_NInit = property(_spacecraftSystem.HubEffector_v_CN_NInit_get, _spacecraftSystem.HubEffector_v_CN_NInit_set)
    sigma_BNInit = property(_spacecraftSystem.HubEffector_sigma_BNInit_get, _spacecraftSystem.HubEffector_sigma_BNInit_set)
    omega_BN_BInit = property(_spacecraftSystem.HubEffector_omega_BN_BInit_get, _spacecraftSystem.HubEffector_omega_BN_BInit_set)
    bskLogger = property(_spacecraftSystem.HubEffector_bskLogger_get, _spacecraftSystem.HubEffector_bskLogger_set)

    def __init__(self):
        _spacecraftSystem.HubEffector_swiginit(self, _spacecraftSystem.new_HubEffector())
    __swig_destroy__ = _spacecraftSystem.delete_HubEffector

    def linkInStates(self, statesIn):
        return _spacecraftSystem.HubEffector_linkInStates(self, statesIn)

    def registerStates(self, states):
        return _spacecraftSystem.HubEffector_registerStates(self, states)

    def updateEffectorMassProps(self, integTime):
        return _spacecraftSystem.HubEffector_updateEffectorMassProps(self, integTime)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _spacecraftSystem.HubEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _spacecraftSystem.HubEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _spacecraftSystem.HubEffector_modifyStates(self, integTime)

    def prependSpacecraftNameToStates(self):
        return _spacecraftSystem.HubEffector_prependSpacecraftNameToStates(self)

    def matchGravitytoVelocityState(self, v_CN_N):
        return _spacecraftSystem.HubEffector_matchGravitytoVelocityState(self, v_CN_N)

# Register HubEffector in _spacecraftSystem:
_spacecraftSystem.HubEffector_swigregister(HubEffector)
class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_spacecraftSystem.SCStatesMsgPayload_r_BN_N_get, _spacecraftSystem.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_spacecraftSystem.SCStatesMsgPayload_v_BN_N_get, _spacecraftSystem.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_spacecraftSystem.SCStatesMsgPayload_r_CN_N_get, _spacecraftSystem.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_spacecraftSystem.SCStatesMsgPayload_v_CN_N_get, _spacecraftSystem.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_spacecraftSystem.SCStatesMsgPayload_sigma_BN_get, _spacecraftSystem.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_spacecraftSystem.SCStatesMsgPayload_omega_BN_B_get, _spacecraftSystem.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_spacecraftSystem.SCStatesMsgPayload_omegaDot_BN_B_get, _spacecraftSystem.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_spacecraftSystem.SCStatesMsgPayload_TotalAccumDVBdy_get, _spacecraftSystem.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_spacecraftSystem.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _spacecraftSystem.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    nonConservativeAccelpntB_B = property(_spacecraftSystem.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _spacecraftSystem.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_spacecraftSystem.SCStatesMsgPayload_MRPSwitchCount_get, _spacecraftSystem.SCStatesMsgPayload_MRPSwitchCount_set)

    def __init__(self):
        _spacecraftSystem.SCStatesMsgPayload_swiginit(self, _spacecraftSystem.new_SCStatesMsgPayload())
    __swig_destroy__ = _spacecraftSystem.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _spacecraftSystem:
_spacecraftSystem.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)
class SCMassPropsMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    massSC = property(_spacecraftSystem.SCMassPropsMsgPayload_massSC_get, _spacecraftSystem.SCMassPropsMsgPayload_massSC_set)
    c_B = property(_spacecraftSystem.SCMassPropsMsgPayload_c_B_get, _spacecraftSystem.SCMassPropsMsgPayload_c_B_set)
    ISC_PntB_B = property(_spacecraftSystem.SCMassPropsMsgPayload_ISC_PntB_B_get, _spacecraftSystem.SCMassPropsMsgPayload_ISC_PntB_B_set)

    def __init__(self):
        _spacecraftSystem.SCMassPropsMsgPayload_swiginit(self, _spacecraftSystem.new_SCMassPropsMsgPayload())
    __swig_destroy__ = _spacecraftSystem.delete_SCMassPropsMsgPayload

# Register SCMassPropsMsgPayload in _spacecraftSystem:
_spacecraftSystem.SCMassPropsMsgPayload_swigregister(SCMassPropsMsgPayload)
class SCEnergyMomentumMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftOrbEnergy = property(_spacecraftSystem.SCEnergyMomentumMsgPayload_spacecraftOrbEnergy_get, _spacecraftSystem.SCEnergyMomentumMsgPayload_spacecraftOrbEnergy_set)
    spacecraftRotEnergy = property(_spacecraftSystem.SCEnergyMomentumMsgPayload_spacecraftRotEnergy_get, _spacecraftSystem.SCEnergyMomentumMsgPayload_spacecraftRotEnergy_set)
    spacecraftOrbAngMomPntN_N = property(_spacecraftSystem.SCEnergyMomentumMsgPayload_spacecraftOrbAngMomPntN_N_get, _spacecraftSystem.SCEnergyMomentumMsgPayload_spacecraftOrbAngMomPntN_N_set)
    spacecraftRotAngMomPntC_N = property(_spacecraftSystem.SCEnergyMomentumMsgPayload_spacecraftRotAngMomPntC_N_get, _spacecraftSystem.SCEnergyMomentumMsgPayload_spacecraftRotAngMomPntC_N_set)

    def __init__(self):
        _spacecraftSystem.SCEnergyMomentumMsgPayload_swiginit(self, _spacecraftSystem.new_SCEnergyMomentumMsgPayload())
    __swig_destroy__ = _spacecraftSystem.delete_SCEnergyMomentumMsgPayload

# Register SCEnergyMomentumMsgPayload in _spacecraftSystem:
_spacecraftSystem.SCEnergyMomentumMsgPayload_swigregister(SCEnergyMomentumMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


