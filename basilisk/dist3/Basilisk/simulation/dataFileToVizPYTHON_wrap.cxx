/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ActuatorGuiSettings swig_types[0]
#define SWIGTYPE_p_BSKLogger swig_types[1]
#define SWIGTYPE_p_CustomModel swig_types[2]
#define SWIGTYPE_p_DataFileToViz swig_types[3]
#define SWIGTYPE_p_Ellipsoid swig_types[4]
#define SWIGTYPE_p_GenericSensor swig_types[5]
#define SWIGTYPE_p_GenericStorage swig_types[6]
#define SWIGTYPE_p_GravBodyInfo swig_types[7]
#define SWIGTYPE_p_InstrumentGuiSettings swig_types[8]
#define SWIGTYPE_p_KeepOutInCone swig_types[9]
#define SWIGTYPE_p_Light swig_types[10]
#define SWIGTYPE_p_LiveVizSettings swig_types[11]
#define SWIGTYPE_p_LocationPbMsg swig_types[12]
#define SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t swig_types[13]
#define SWIGTYPE_p_MessageT_THROutputMsgPayload_t swig_types[14]
#define SWIGTYPE_p_MsgCurrStatus swig_types[15]
#define SWIGTYPE_p_MultiSphere swig_types[16]
#define SWIGTYPE_p_MultiSphereInfo swig_types[17]
#define SWIGTYPE_p_PointLine swig_types[18]
#define SWIGTYPE_p_RWConfigLogMsgPayload swig_types[19]
#define SWIGTYPE_p_RWModels swig_types[20]
#define SWIGTYPE_p_ReadFunctorT_ChargeMsmMsgPayload_t swig_types[21]
#define SWIGTYPE_p_ReadFunctorT_ColorMsgPayload_t swig_types[22]
#define SWIGTYPE_p_ReadFunctorT_DataStorageStatusMsgPayload_t swig_types[23]
#define SWIGTYPE_p_ReadFunctorT_DeviceCmdMsgPayload_t swig_types[24]
#define SWIGTYPE_p_ReadFunctorT_FuelTankMsgPayload_t swig_types[25]
#define SWIGTYPE_p_ReadFunctorT_PowerStorageStatusMsgPayload_t swig_types[26]
#define SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t swig_types[27]
#define SWIGTYPE_p_ReadFunctorT_SCStatesMsgPayload_t swig_types[28]
#define SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t swig_types[29]
#define SWIGTYPE_p_SCStatesMsgPayload swig_types[30]
#define SWIGTYPE_p_StdCameraSettings swig_types[31]
#define SWIGTYPE_p_SysModel swig_types[32]
#define SWIGTYPE_p_THROutputMsgPayload swig_types[33]
#define SWIGTYPE_p_ThrClusterMap swig_types[34]
#define SWIGTYPE_p_Transceiver swig_types[35]
#define SWIGTYPE_p_VizSettings swig_types[36]
#define SWIGTYPE_p_VizSpacecraftData swig_types[37]
#define SWIGTYPE_p_allocator_type swig_types[38]
#define SWIGTYPE_p_char swig_types[39]
#define SWIGTYPE_p_difference_type swig_types[40]
#define SWIGTYPE_p_double swig_types[41]
#define SWIGTYPE_p_int swig_types[42]
#define SWIGTYPE_p_logLevel_t swig_types[43]
#define SWIGTYPE_p_long swig_types[44]
#define SWIGTYPE_p_long_long swig_types[45]
#define SWIGTYPE_p_p_PyObject swig_types[46]
#define SWIGTYPE_p_short swig_types[47]
#define SWIGTYPE_p_signed_char swig_types[48]
#define SWIGTYPE_p_size_type swig_types[49]
#define SWIGTYPE_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t swig_types[50]
#define SWIGTYPE_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t swig_types[51]
#define SWIGTYPE_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t swig_types[52]
#define SWIGTYPE_p_std__allocatorT_MessageT_THROutputMsgPayload_t_t swig_types[53]
#define SWIGTYPE_p_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t swig_types[54]
#define SWIGTYPE_p_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t swig_types[55]
#define SWIGTYPE_p_std__allocatorT_ThrClusterMap_t swig_types[56]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t swig_types[57]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t swig_types[58]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t swig_types[59]
#define SWIGTYPE_p_std__invalid_argument swig_types[60]
#define SWIGTYPE_p_std__mapT_int_char_const_p_t swig_types[61]
#define SWIGTYPE_p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t swig_types[62]
#define SWIGTYPE_p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t swig_types[63]
#define SWIGTYPE_p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t swig_types[64]
#define SWIGTYPE_p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t swig_types[65]
#define SWIGTYPE_p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t swig_types[66]
#define SWIGTYPE_p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t swig_types[67]
#define SWIGTYPE_p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t swig_types[68]
#define SWIGTYPE_p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t swig_types[69]
#define SWIGTYPE_p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t swig_types[70]
#define SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t swig_types[71]
#define SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t swig_types[72]
#define SWIGTYPE_p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t swig_types[73]
#define SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t swig_types[74]
#define SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t swig_types[75]
#define SWIGTYPE_p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t swig_types[76]
#define SWIGTYPE_p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t swig_types[77]
#define SWIGTYPE_p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t swig_types[78]
#define SWIGTYPE_p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t swig_types[79]
#define SWIGTYPE_p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t swig_types[80]
#define SWIGTYPE_p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t swig_types[81]
#define SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t swig_types[82]
#define SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t swig_types[83]
#define SWIGTYPE_p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t swig_types[85]
#define SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t swig_types[86]
#define SWIGTYPE_p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t swig_types[87]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[88]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[89]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[90]
#define SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t swig_types[91]
#define SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t swig_types[92]
#define SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t swig_types[93]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[94]
#define SWIGTYPE_p_unsigned_char swig_types[95]
#define SWIGTYPE_p_unsigned_int swig_types[96]
#define SWIGTYPE_p_unsigned_long_long swig_types[97]
#define SWIGTYPE_p_unsigned_short swig_types[98]
#define SWIGTYPE_p_value_type swig_types[99]
static swig_type_info *swig_types[101];
static swig_module_info swig_module = {swig_types, 100, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _dataFileToViz.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__dataFileToViz

#else
#  define SWIG_init    init_dataFileToViz

#endif
#define SWIG_name    "_dataFileToViz"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


   #include "dataFileToViz.h"


#include <stdint.h>		// Use the C99 official header


#include <stdlib.h>


  static double *new_doubleArray(size_t nelements) { 
    return (new double[nelements]());
  }

  static void delete_doubleArray(double *ary) {
    delete[] ary;
  }

  static double doubleArray_getitem(double *ary, size_t index) {
    return ary[index];
  }
  static void doubleArray_setitem(double *ary, size_t index, double value) {
    ary[index] = value;
  }


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


  static long *new_longArray(size_t nelements) { 
    return (new long[nelements]());
  }

  static void delete_longArray(long *ary) {
    delete[] ary;
  }

  static long longArray_getitem(long *ary, size_t index) {
    return ary[index];
  }
  static void longArray_setitem(long *ary, size_t index, long value) {
    ary[index] = value;
  }


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


  static int *new_intArray(size_t nelements) { 
    return (new int[nelements]());
  }

  static void delete_intArray(int *ary) {
    delete[] ary;
  }

  static int intArray_getitem(int *ary, size_t index) {
    return ary[index];
  }
  static void intArray_setitem(int *ary, size_t index, int value) {
    ary[index] = value;
  }


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  static short *new_shortArray(size_t nelements) { 
    return (new short[nelements]());
  }

  static void delete_shortArray(short *ary) {
    delete[] ary;
  }

  static short shortArray_getitem(short *ary, size_t index) {
    return ary[index];
  }
  static void shortArray_setitem(short *ary, size_t index, short value) {
    ary[index] = value;
  }


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


#include <string>


   #include "sys_model.h"


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICEOBJECT PyObject
#else
# define SWIGPY_SLICEOBJECT PySliceObject
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits< ThrClusterMap > {
      typedef pointer_category category;
      static const char* type_name() { return"ThrClusterMap"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< ThrClusterMap, std::allocator< ThrClusterMap > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ThrClusterMap" "," "std::allocator< ThrClusterMap >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_ThrClusterMap_Sg__iterator(std::vector< ThrClusterMap > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_ThrClusterMap_Sg____nonzero__(std::vector< ThrClusterMap > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_ThrClusterMap_Sg____bool__(std::vector< ThrClusterMap > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ThrClusterMap >::size_type std_vector_Sl_ThrClusterMap_Sg____len__(std::vector< ThrClusterMap > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *std_vector_Sl_ThrClusterMap_Sg____getslice__(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::difference_type i,std::vector< ThrClusterMap >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg____setslice____SWIG_0(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::difference_type i,std::vector< ThrClusterMap >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >());
    }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg____setslice____SWIG_1(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::difference_type i,std::vector< ThrClusterMap >::difference_type j,std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg____delslice__(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::difference_type i,std::vector< ThrClusterMap >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg____delitem____SWIG_0(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *std_vector_Sl_ThrClusterMap_Sg____getitem____SWIG_0(std::vector< ThrClusterMap > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::difference_type id = i;
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg____setitem____SWIG_0(std::vector< ThrClusterMap > *self,SWIGPY_SLICEOBJECT *slice,std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::difference_type id = i;
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg____setitem____SWIG_1(std::vector< ThrClusterMap > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::difference_type id = i;
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg____delitem____SWIG_1(std::vector< ThrClusterMap > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::difference_type id = i;
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< ThrClusterMap >::value_type const &std_vector_Sl_ThrClusterMap_Sg____getitem____SWIG_1(std::vector< ThrClusterMap > const *self,std::vector< ThrClusterMap >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg____setitem____SWIG_2(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::difference_type i,std::vector< ThrClusterMap >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< ThrClusterMap >::value_type std_vector_Sl_ThrClusterMap_Sg__pop(std::vector< ThrClusterMap > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg__append(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< ThrClusterMap >::iterator std_vector_Sl_ThrClusterMap_Sg__erase__SWIG_0(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< ThrClusterMap >::iterator std_vector_Sl_ThrClusterMap_Sg__erase__SWIG_1(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::iterator first,std::vector< ThrClusterMap >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< ThrClusterMap >::iterator std_vector_Sl_ThrClusterMap_Sg__insert__SWIG_0(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::iterator pos,std::vector< ThrClusterMap >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_ThrClusterMap_Sg__insert__SWIG_1(std::vector< ThrClusterMap > *self,std::vector< ThrClusterMap >::iterator pos,std::vector< ThrClusterMap >::size_type n,std::vector< ThrClusterMap >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >, std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >" "," "std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__iterator(std::vector< std::vector< ThrClusterMap > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____nonzero__(std::vector< std::vector< ThrClusterMap > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____bool__(std::vector< std::vector< ThrClusterMap > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< ThrClusterMap > >::size_type std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____len__(std::vector< std::vector< ThrClusterMap > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____getslice__(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::difference_type i,std::vector< std::vector< ThrClusterMap > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::difference_type i,std::vector< std::vector< ThrClusterMap > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setslice____SWIG_1(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::difference_type i,std::vector< std::vector< ThrClusterMap > >::difference_type j,std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____delslice__(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::difference_type i,std::vector< std::vector< ThrClusterMap > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< ThrClusterMap > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::difference_type id = i;
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< ThrClusterMap > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::difference_type id = i;
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< ThrClusterMap > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::difference_type id = i;
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< ThrClusterMap > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::difference_type id = i;
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< ThrClusterMap > >::value_type const &std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< ThrClusterMap > > const *self,std::vector< std::vector< ThrClusterMap > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::difference_type i,std::vector< std::vector< ThrClusterMap > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< ThrClusterMap > >::value_type std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__pop(std::vector< std::vector< ThrClusterMap > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__append(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< ThrClusterMap > >::iterator std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__erase__SWIG_0(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< ThrClusterMap > >::iterator std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__erase__SWIG_1(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::iterator first,std::vector< std::vector< ThrClusterMap > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< ThrClusterMap > >::iterator std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__insert__SWIG_0(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::iterator pos,std::vector< std::vector< ThrClusterMap > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__insert__SWIG_1(std::vector< std::vector< ThrClusterMap > > *self,std::vector< std::vector< ThrClusterMap > >::iterator pos,std::vector< std::vector< ThrClusterMap > >::size_type n,std::vector< std::vector< ThrClusterMap > >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Message< THROutputMsgPayload > > {
      typedef pointer_category category;
      static const char* type_name() { return"Message< THROutputMsgPayload >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Message< THROutputMsgPayload >, std::allocator< Message< THROutputMsgPayload > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Message< THROutputMsgPayload >" "," "std::allocator< Message< THROutputMsgPayload > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__iterator(std::vector< Message< THROutputMsgPayload > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____nonzero__(std::vector< Message< THROutputMsgPayload > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____bool__(std::vector< Message< THROutputMsgPayload > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > >::size_type std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____len__(std::vector< Message< THROutputMsgPayload > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____getslice__(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::difference_type i,std::vector< Message< THROutputMsgPayload > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setslice____SWIG_0(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::difference_type i,std::vector< Message< THROutputMsgPayload > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >());
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setslice____SWIG_1(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::difference_type i,std::vector< Message< THROutputMsgPayload > >::difference_type j,std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____delslice__(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::difference_type i,std::vector< Message< THROutputMsgPayload > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____delitem____SWIG_0(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____getitem____SWIG_0(std::vector< Message< THROutputMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::difference_type id = i;
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_0(std::vector< Message< THROutputMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::difference_type id = i;
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_1(std::vector< Message< THROutputMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::difference_type id = i;
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____delitem____SWIG_1(std::vector< Message< THROutputMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::difference_type id = i;
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > >::value_type const &std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____getitem____SWIG_1(std::vector< Message< THROutputMsgPayload > > const *self,std::vector< Message< THROutputMsgPayload > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_2(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::difference_type i,std::vector< Message< THROutputMsgPayload > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > >::value_type std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__pop(std::vector< Message< THROutputMsgPayload > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__append(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > >::iterator std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__erase__SWIG_0(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Message< THROutputMsgPayload > >::iterator std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__erase__SWIG_1(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::iterator first,std::vector< Message< THROutputMsgPayload > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Message< THROutputMsgPayload > >::iterator std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__insert__SWIG_0(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::iterator pos,std::vector< Message< THROutputMsgPayload > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__insert__SWIG_1(std::vector< Message< THROutputMsgPayload > > *self,std::vector< Message< THROutputMsgPayload > >::iterator pos,std::vector< Message< THROutputMsgPayload > >::size_type n,std::vector< Message< THROutputMsgPayload > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< Message< THROutputMsgPayload >*, std::allocator< Message< THROutputMsgPayload > * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "Message< THROutputMsgPayload >" " *," "std::allocator< Message< THROutputMsgPayload > * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__iterator(std::vector< Message< THROutputMsgPayload > * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____nonzero__(std::vector< Message< THROutputMsgPayload > * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____bool__(std::vector< Message< THROutputMsgPayload > * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > * >::size_type std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____len__(std::vector< Message< THROutputMsgPayload > * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____getslice__(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::difference_type i,std::vector< Message< THROutputMsgPayload > * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setslice____SWIG_0(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::difference_type i,std::vector< Message< THROutputMsgPayload > * >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >());
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setslice____SWIG_1(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::difference_type i,std::vector< Message< THROutputMsgPayload > * >::difference_type j,std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____delslice__(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::difference_type i,std::vector< Message< THROutputMsgPayload > * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____delitem____SWIG_0(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____getitem____SWIG_0(std::vector< Message< THROutputMsgPayload > * > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::difference_type id = i;
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setitem____SWIG_0(std::vector< Message< THROutputMsgPayload > * > *self,SWIGPY_SLICEOBJECT *slice,std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::difference_type id = i;
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setitem____SWIG_1(std::vector< Message< THROutputMsgPayload > * > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::difference_type id = i;
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____delitem____SWIG_1(std::vector< Message< THROutputMsgPayload > * > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::difference_type id = i;
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > * >::value_type std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____getitem____SWIG_1(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setitem____SWIG_2(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::difference_type i,std::vector< Message< THROutputMsgPayload > * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > * >::value_type std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__pop(std::vector< Message< THROutputMsgPayload > * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__append(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Message< THROutputMsgPayload > * >::iterator std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__erase__SWIG_0(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Message< THROutputMsgPayload > * >::iterator std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__erase__SWIG_1(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::iterator first,std::vector< Message< THROutputMsgPayload > * >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Message< THROutputMsgPayload > * >::iterator std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__insert__SWIG_0(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::iterator pos,std::vector< Message< THROutputMsgPayload > * >::value_type x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__insert__SWIG_1(std::vector< Message< THROutputMsgPayload > * > *self,std::vector< Message< THROutputMsgPayload > * >::iterator pos,std::vector< Message< THROutputMsgPayload > * >::size_type n,std::vector< Message< THROutputMsgPayload > * >::value_type x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< ReadFunctor< THROutputMsgPayload > > {
      typedef pointer_category category;
      static const char* type_name() { return"ReadFunctor< THROutputMsgPayload >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< ReadFunctor< THROutputMsgPayload >, std::allocator< ReadFunctor< THROutputMsgPayload > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ReadFunctor< THROutputMsgPayload >" "," "std::allocator< ReadFunctor< THROutputMsgPayload > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__iterator(std::vector< ReadFunctor< THROutputMsgPayload > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____nonzero__(std::vector< ReadFunctor< THROutputMsgPayload > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____bool__(std::vector< ReadFunctor< THROutputMsgPayload > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ReadFunctor< THROutputMsgPayload > >::size_type std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____len__(std::vector< ReadFunctor< THROutputMsgPayload > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____getslice__(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type i,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setslice____SWIG_0(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type i,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >());
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setslice____SWIG_1(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type i,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type j,std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____delslice__(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type i,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____delitem____SWIG_0(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____getitem____SWIG_0(std::vector< ReadFunctor< THROutputMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::difference_type id = i;
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_0(std::vector< ReadFunctor< THROutputMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::difference_type id = i;
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_1(std::vector< ReadFunctor< THROutputMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::difference_type id = i;
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____delitem____SWIG_1(std::vector< ReadFunctor< THROutputMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::difference_type id = i;
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____getitem____SWIG_1(std::vector< ReadFunctor< THROutputMsgPayload > > const *self,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_2(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type i,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< ReadFunctor< THROutputMsgPayload > >::value_type std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__pop(std::vector< ReadFunctor< THROutputMsgPayload > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__append(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< ReadFunctor< THROutputMsgPayload > >::iterator std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__erase__SWIG_0(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< ReadFunctor< THROutputMsgPayload > >::iterator std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__erase__SWIG_1(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::iterator first,std::vector< ReadFunctor< THROutputMsgPayload > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< ReadFunctor< THROutputMsgPayload > >::iterator std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__insert__SWIG_0(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::iterator pos,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__insert__SWIG_1(std::vector< ReadFunctor< THROutputMsgPayload > > *self,std::vector< ReadFunctor< THROutputMsgPayload > >::iterator pos,std::vector< ReadFunctor< THROutputMsgPayload > >::size_type n,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >, std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >" "," "std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__iterator(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____nonzero__(std::vector< std::vector< Message< THROutputMsgPayload > * > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____bool__(std::vector< std::vector< Message< THROutputMsgPayload > * > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____len__(std::vector< std::vector< Message< THROutputMsgPayload > * > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____getslice__(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setslice____SWIG_0(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setslice____SWIG_1(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type j,std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____delslice__(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____delitem____SWIG_0(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____getitem____SWIG_0(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::difference_type id = i;
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_0(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::difference_type id = i;
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_1(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::difference_type id = i;
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____delitem____SWIG_1(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::difference_type id = i;
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____getitem____SWIG_1(std::vector< std::vector< Message< THROutputMsgPayload > * > > const *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_2(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__pop(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__append(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__erase__SWIG_0(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__erase__SWIG_1(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator first,std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__insert__SWIG_0(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator pos,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__insert__SWIG_1(std::vector< std::vector< Message< THROutputMsgPayload > * > > *self,std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator pos,std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type n,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Message< RWConfigLogMsgPayload > > {
      typedef pointer_category category;
      static const char* type_name() { return"Message< RWConfigLogMsgPayload >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Message< RWConfigLogMsgPayload >, std::allocator< Message< RWConfigLogMsgPayload > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Message< RWConfigLogMsgPayload >" "," "std::allocator< Message< RWConfigLogMsgPayload > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__iterator(std::vector< Message< RWConfigLogMsgPayload > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____nonzero__(std::vector< Message< RWConfigLogMsgPayload > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____bool__(std::vector< Message< RWConfigLogMsgPayload > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > >::size_type std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____len__(std::vector< Message< RWConfigLogMsgPayload > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____getslice__(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setslice____SWIG_0(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >());
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setslice____SWIG_1(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > >::difference_type j,std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____delslice__(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____delitem____SWIG_0(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____getitem____SWIG_0(std::vector< Message< RWConfigLogMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::difference_type id = i;
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_0(std::vector< Message< RWConfigLogMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::difference_type id = i;
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_1(std::vector< Message< RWConfigLogMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::difference_type id = i;
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____delitem____SWIG_1(std::vector< Message< RWConfigLogMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::difference_type id = i;
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > >::value_type const &std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____getitem____SWIG_1(std::vector< Message< RWConfigLogMsgPayload > > const *self,std::vector< Message< RWConfigLogMsgPayload > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_2(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > >::value_type std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__pop(std::vector< Message< RWConfigLogMsgPayload > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__append(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > >::iterator std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__erase__SWIG_0(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > >::iterator std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__erase__SWIG_1(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::iterator first,std::vector< Message< RWConfigLogMsgPayload > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > >::iterator std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__insert__SWIG_0(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::iterator pos,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__insert__SWIG_1(std::vector< Message< RWConfigLogMsgPayload > > *self,std::vector< Message< RWConfigLogMsgPayload > >::iterator pos,std::vector< Message< RWConfigLogMsgPayload > >::size_type n,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< Message< RWConfigLogMsgPayload >*, std::allocator< Message< RWConfigLogMsgPayload > * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "Message< RWConfigLogMsgPayload >" " *," "std::allocator< Message< RWConfigLogMsgPayload > * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__iterator(std::vector< Message< RWConfigLogMsgPayload > * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____nonzero__(std::vector< Message< RWConfigLogMsgPayload > * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____bool__(std::vector< Message< RWConfigLogMsgPayload > * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > * >::size_type std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____len__(std::vector< Message< RWConfigLogMsgPayload > * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____getslice__(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setslice____SWIG_0(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >());
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setslice____SWIG_1(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type j,std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____delslice__(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____delitem____SWIG_0(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____getitem____SWIG_0(std::vector< Message< RWConfigLogMsgPayload > * > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::difference_type id = i;
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setitem____SWIG_0(std::vector< Message< RWConfigLogMsgPayload > * > *self,SWIGPY_SLICEOBJECT *slice,std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::difference_type id = i;
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setitem____SWIG_1(std::vector< Message< RWConfigLogMsgPayload > * > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::difference_type id = i;
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____delitem____SWIG_1(std::vector< Message< RWConfigLogMsgPayload > * > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::difference_type id = i;
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > * >::value_type std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____getitem____SWIG_1(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setitem____SWIG_2(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type i,std::vector< Message< RWConfigLogMsgPayload > * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > * >::value_type std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__pop(std::vector< Message< RWConfigLogMsgPayload > * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__append(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > * >::iterator std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__erase__SWIG_0(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > * >::iterator std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__erase__SWIG_1(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::iterator first,std::vector< Message< RWConfigLogMsgPayload > * >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Message< RWConfigLogMsgPayload > * >::iterator std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__insert__SWIG_0(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::iterator pos,std::vector< Message< RWConfigLogMsgPayload > * >::value_type x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__insert__SWIG_1(std::vector< Message< RWConfigLogMsgPayload > * > *self,std::vector< Message< RWConfigLogMsgPayload > * >::iterator pos,std::vector< Message< RWConfigLogMsgPayload > * >::size_type n,std::vector< Message< RWConfigLogMsgPayload > * >::value_type x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< ReadFunctor< RWConfigLogMsgPayload > > {
      typedef pointer_category category;
      static const char* type_name() { return"ReadFunctor< RWConfigLogMsgPayload >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< ReadFunctor< RWConfigLogMsgPayload >, std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ReadFunctor< RWConfigLogMsgPayload >" "," "std::allocator< ReadFunctor< RWConfigLogMsgPayload > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__iterator(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____nonzero__(std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____bool__(std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____len__(std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____getslice__(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type i,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setslice____SWIG_0(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type i,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >());
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setslice____SWIG_1(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type i,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type j,std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____delslice__(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type i,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____delitem____SWIG_0(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____getitem____SWIG_0(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::difference_type id = i;
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_0(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::difference_type id = i;
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_1(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::difference_type id = i;
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____delitem____SWIG_1(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::difference_type id = i;
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____getitem____SWIG_1(std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_2(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type i,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__pop(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__append(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__erase__SWIG_0(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__erase__SWIG_1(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator first,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__insert__SWIG_0(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator pos,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__insert__SWIG_1(std::vector< ReadFunctor< RWConfigLogMsgPayload > > *self,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator pos,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type n,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >, std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >" "," "std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__iterator(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____nonzero__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____bool__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____len__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____getslice__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setslice____SWIG_0(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setslice____SWIG_1(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type j,std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____delslice__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____delitem____SWIG_0(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____getitem____SWIG_0(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::difference_type id = i;
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_0(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::difference_type id = i;
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_1(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::difference_type id = i;
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____delitem____SWIG_1(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::difference_type id = i;
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____getitem____SWIG_1(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_2(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type i,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__pop(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__append(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__erase__SWIG_0(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__erase__SWIG_1(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator first,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__insert__SWIG_0(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator pos,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__insert__SWIG_1(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *self,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator pos,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type n,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &x){ self->insert(pos, n, x); }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_doubleArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_doubleArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (double *)new_doubleArray(SWIG_STD_MOVE(arg1));
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_doubleArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_doubleArray" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  delete_doubleArray(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_doubleArray_getitem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "doubleArray_getitem", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doubleArray_getitem" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "doubleArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)doubleArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_doubleArray_setitem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "doubleArray_setitem", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doubleArray_setitem" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "doubleArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "doubleArray_setitem" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  doubleArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_longArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  long *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_longArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (long *)new_longArray(SWIG_STD_MOVE(arg1));
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_longArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_longArray" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  delete_longArray(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_longArray_getitem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = (long *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  long result;
  
  if (!SWIG_Python_UnpackTuple(args, "longArray_getitem", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "longArray_getitem" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "longArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (long)longArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_longArray_setitem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = (long *) 0 ;
  size_t arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "longArray_setitem", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "longArray_setitem" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "longArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "longArray_setitem" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  longArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_intArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (int *)new_intArray(SWIG_STD_MOVE(arg1));
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_intArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intArray" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  delete_intArray(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intArray_getitem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "intArray_getitem", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_getitem" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (int)intArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intArray_setitem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  size_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "intArray_setitem", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_setitem" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intArray_setitem" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  intArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_shortArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  short *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_shortArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (short *)new_shortArray(SWIG_STD_MOVE(arg1));
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_shortArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  short *arg1 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_shortArray" "', argument " "1"" of type '" "short *""'"); 
  }
  arg1 = reinterpret_cast< short * >(argp1);
  delete_shortArray(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_shortArray_getitem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  short *arg1 = (short *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  short result;
  
  if (!SWIG_Python_UnpackTuple(args, "shortArray_getitem", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "shortArray_getitem" "', argument " "1"" of type '" "short *""'"); 
  }
  arg1 = reinterpret_cast< short * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "shortArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (short)shortArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_shortArray_setitem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  short *arg1 = (short *) 0 ;
  size_t arg2 ;
  short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "shortArray_setitem", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "shortArray_setitem" "', argument " "1"" of type '" "short *""'"); 
  }
  arg1 = reinterpret_cast< short * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "shortArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "shortArray_setitem" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  shortArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_LogLevel_set(PyObject *_val) {
  if (sizeof(int) != sizeof(LogLevel)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only LogLevel""' of type '""logLevel_t""'");
  }  else {
    int ecode = SWIG_AsVal_int (_val, reinterpret_cast< int* >(&LogLevel));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""LogLevel""' of type '""logLevel_t""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_LogLevel_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(LogLevel));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_printDefaultLogLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "printDefaultLogLevel", 0, 0, 0)) SWIG_fail;
  printDefaultLogLevel();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setDefaultLogLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  logLevel_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setDefaultLogLevel" "', argument " "1"" of type '" "logLevel_t""'");
  } 
  arg1 = static_cast< logLevel_t >(val1);
  setDefaultLogLevel(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getDefaultLogLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  logLevel_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "getDefaultLogLevel", 0, 0, 0)) SWIG_fail;
  result = (logLevel_t)getDefaultLogLevel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BSKLogger__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  BSKLogger *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (BSKLogger *)new BSKLogger();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BSKLogger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BSKLogger__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  logLevel_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  BSKLogger *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BSKLogger" "', argument " "1"" of type '" "logLevel_t""'");
  } 
  arg1 = static_cast< logLevel_t >(val1);
  result = (BSKLogger *)new BSKLogger(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BSKLogger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BSKLogger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BSKLogger", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_BSKLogger__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BSKLogger__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BSKLogger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BSKLogger::BSKLogger()\n"
    "    BSKLogger::BSKLogger(logLevel_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BSKLogger(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BSKLogger" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BSKLogger_setLogLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  logLevel_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BSKLogger_setLogLevel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BSKLogger_setLogLevel" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BSKLogger_setLogLevel" "', argument " "2"" of type '" "logLevel_t""'");
  } 
  arg2 = static_cast< logLevel_t >(val2);
  (arg1)->setLogLevel(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BSKLogger_printLogLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BSKLogger_printLogLevel" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  (arg1)->printLogLevel();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BSKLogger_getLogLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BSKLogger_getLogLevel" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  result = (int)(arg1)->getLogLevel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BSKLogger_bskLog__varargs__(PyObject *self, PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  logLevel_t arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "BSKLogger_bskLog", 3, 3, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BSKLogger_bskLog" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BSKLogger_bskLog" "', argument " "2"" of type '" "logLevel_t""'");
  } 
  arg2 = static_cast< logLevel_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BSKLogger_bskLog" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->bskLog(arg2,(char const *)arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BSKLogger_bskLog(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args, 0, 3);
  varargs = PyTuple_GetSlice(args, 3, PyTuple_Size(args));
  resultobj = _wrap_BSKLogger_bskLog__varargs__(NULL, newargs, varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_BSKLogger_logLevelMap_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  std::map< int,char const * > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BSKLogger_logLevelMap_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BSKLogger_logLevelMap_set" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__mapT_int_char_const_p_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BSKLogger_logLevelMap_set" "', argument " "2"" of type '" "std::map< int,char const * >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BSKLogger_logLevelMap_set" "', argument " "2"" of type '" "std::map< int,char const * >""'");
    } else {
      std::map< int,char const * > * temp = reinterpret_cast< std::map< int,char const * > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->logLevelMap = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BSKLogger_logLevelMap_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,char const * > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BSKLogger_logLevelMap_get" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  result =  ((arg1)->logLevelMap);
  resultobj = SWIG_NewPointerObj((new std::map< int,char const * >(result)), SWIGTYPE_p_std__mapT_int_char_const_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BSKLogger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BSKLogger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BSKLogger_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap__BSKLogger(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "_BSKLogger", 0, 0, 0)) SWIG_fail;
  result = (BSKLogger *)_BSKLogger();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BSKLogger, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__BSKLogger_d(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_BSKLogger_d" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  _BSKLogger_d(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__printLogLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_printLogLevel" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  _printLogLevel(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__setLogLevel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  logLevel_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "_setLogLevel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_setLogLevel" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_setLogLevel" "', argument " "2"" of type '" "logLevel_t""'");
  } 
  arg2 = static_cast< logLevel_t >(val2);
  _setLogLevel(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__bskLog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BSKLogger *arg1 = (BSKLogger *) 0 ;
  logLevel_t arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "_bskLog", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_bskLog" "', argument " "1"" of type '" "BSKLogger *""'"); 
  }
  arg1 = reinterpret_cast< BSKLogger * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_bskLog" "', argument " "2"" of type '" "logLevel_t""'");
  } 
  arg2 = static_cast< logLevel_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_bskLog" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  _bskLog(arg1,arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SysModel__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  SysModel *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (SysModel *)new SysModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SysModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SysModel__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SysModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SysModel *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_SysModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SysModel" "', argument " "1"" of type '" "SysModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SysModel" "', argument " "1"" of type '" "SysModel const &""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  result = (SysModel *)new SysModel((SysModel const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SysModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SysModel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SysModel", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_SysModel__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_SysModel, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SysModel__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SysModel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SysModel::SysModel()\n"
    "    SysModel::SysModel(SysModel const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SysModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SysModel" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_SelfInit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_SelfInit" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  (arg1)->SelfInit();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_IntegratedInit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_IntegratedInit" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  (arg1)->IntegratedInit();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_UpdateState(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SysModel_UpdateState", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_UpdateState" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SysModel_UpdateState" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  (arg1)->UpdateState(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_Reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SysModel_Reset", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_Reset" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SysModel_Reset" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  (arg1)->Reset(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_ModelTag_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SysModel_ModelTag_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_ModelTag_set" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SysModel_ModelTag_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SysModel_ModelTag_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ModelTag = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_ModelTag_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_ModelTag_get" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  result = (std::string *) & ((arg1)->ModelTag);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_CallCounts_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SysModel_CallCounts_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_CallCounts_set" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SysModel_CallCounts_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  if (arg1) (arg1)->CallCounts = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_CallCounts_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_CallCounts_get" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  result = (uint64_t) ((arg1)->CallCounts);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_RNGSeed_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SysModel_RNGSeed_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_RNGSeed_set" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SysModel_RNGSeed_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->RNGSeed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_RNGSeed_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_RNGSeed_get" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  result = (uint32_t) ((arg1)->RNGSeed);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_moduleID_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SysModel_moduleID_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_moduleID_set" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SysModel_moduleID_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  if (arg1) (arg1)->moduleID = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SysModel_moduleID_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SysModel *arg1 = (SysModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SysModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SysModel_moduleID_get" "', argument " "1"" of type '" "SysModel *""'"); 
  }
  arg1 = reinterpret_cast< SysModel * >(argp1);
  result = (int64_t) ((arg1)->moduleID);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SysModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SysModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SysModel_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DataFileToViz(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_DataFileToViz", 0, 0, 0)) SWIG_fail;
  result = (DataFileToViz *)new DataFileToViz();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataFileToViz, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataFileToViz(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataFileToViz" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_Reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_Reset", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_Reset" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_Reset" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  (arg1)->Reset(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_UpdateState(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_UpdateState", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_UpdateState" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_UpdateState" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  (arg1)->UpdateState(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendThrPos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendThrPos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendThrPos" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  (arg1)->appendThrPos(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendThrDir(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendThrDir", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendThrDir" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  (arg1)->appendThrDir(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendThrForceMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendThrForceMax", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendThrForceMax" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_appendThrForceMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->appendThrForceMax(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendThrClusterMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > arg2 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendThrClusterMap", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendThrClusterMap" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataFileToViz_appendThrClusterMap" "', argument " "2"" of type '" "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataFileToViz_appendThrClusterMap" "', argument " "2"" of type '" "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >""'");
    } else {
      std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > * temp = reinterpret_cast< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataFileToViz_appendThrClusterMap" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataFileToViz_appendThrClusterMap" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > >""'");
    } else {
      std::vector< int,std::allocator< int > > * temp = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->appendThrClusterMap(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendRwPos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendRwPos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendRwPos" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  (arg1)->appendRwPos(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendRwDir(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendRwDir", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendRwDir" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  (arg1)->appendRwDir(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendOmegaMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendOmegaMax", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendOmegaMax" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_appendOmegaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->appendOmegaMax(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendUMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendUMax", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendUMax" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_appendUMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->appendUMax(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_setNumOfSatellites(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_setNumOfSatellites", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_setNumOfSatellites" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_setNumOfSatellites" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setNumOfSatellites(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_appendNumOfRWs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_appendNumOfRWs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_appendNumOfRWs" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_appendNumOfRWs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->appendNumOfRWs(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_dataFileName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_dataFileName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_dataFileName_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataFileToViz_dataFileName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataFileToViz_dataFileName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->dataFileName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_dataFileName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_dataFileName_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (std::string *) & ((arg1)->dataFileName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_scStateOutMsgs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  std::vector< Message< SCStatesMsgPayload > *,std::allocator< Message< SCStatesMsgPayload > * > > *arg2 = (std::vector< Message< SCStatesMsgPayload > *,std::allocator< Message< SCStatesMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_scStateOutMsgs_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_scStateOutMsgs_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataFileToViz_scStateOutMsgs_set" "', argument " "2"" of type '" "std::vector< Message< SCStatesMsgPayload > *,std::allocator< Message< SCStatesMsgPayload > * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< SCStatesMsgPayload > *,std::allocator< Message< SCStatesMsgPayload > * > > * >(argp2);
  if (arg1) (arg1)->scStateOutMsgs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_scStateOutMsgs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< SCStatesMsgPayload > *,std::allocator< Message< SCStatesMsgPayload > * > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_scStateOutMsgs_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (std::vector< Message< SCStatesMsgPayload > *,std::allocator< Message< SCStatesMsgPayload > * > > *)& ((arg1)->scStateOutMsgs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_delimiter_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_delimiter_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_delimiter_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataFileToViz_delimiter_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataFileToViz_delimiter_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->delimiter = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_delimiter_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_delimiter_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (std::string *) & ((arg1)->delimiter);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_convertPosToMeters_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_convertPosToMeters_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_convertPosToMeters_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_convertPosToMeters_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->convertPosToMeters = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_convertPosToMeters_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_convertPosToMeters_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (double) ((arg1)->convertPosToMeters);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_headerLine_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_headerLine_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_headerLine_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_headerLine_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->headerLine = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_headerLine_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_headerLine_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (bool) ((arg1)->headerLine);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_attitudeType_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_attitudeType_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_attitudeType_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataFileToViz_attitudeType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->attitudeType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_attitudeType_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_attitudeType_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (int) ((arg1)->attitudeType);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_thrMsgDataSC_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *arg2 = (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_thrMsgDataSC_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_thrMsgDataSC_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataFileToViz_thrMsgDataSC_set" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > * >(argp2);
  if (arg1) (arg1)->thrMsgDataSC = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_thrMsgDataSC_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_thrMsgDataSC_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *)& ((arg1)->thrMsgDataSC);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_thrScOutMsgs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *arg2 = (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_thrScOutMsgs_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_thrScOutMsgs_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataFileToViz_thrScOutMsgs_set" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > * >(argp2);
  if (arg1) (arg1)->thrScOutMsgs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_thrScOutMsgs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_thrScOutMsgs_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *)& ((arg1)->thrScOutMsgs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_rwScOutMsgs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *arg2 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_rwScOutMsgs_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_rwScOutMsgs_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataFileToViz_rwScOutMsgs_set" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > * >(argp2);
  if (arg1) (arg1)->rwScOutMsgs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_rwScOutMsgs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_rwScOutMsgs_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *)& ((arg1)->rwScOutMsgs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_bskLogger_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  BSKLogger *arg2 = (BSKLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataFileToViz_bskLogger_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_bskLogger_set" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_BSKLogger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataFileToViz_bskLogger_set" "', argument " "2"" of type '" "BSKLogger *""'"); 
  }
  arg2 = reinterpret_cast< BSKLogger * >(argp2);
  if (arg1) (arg1)->bskLogger = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataFileToViz_bskLogger_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DataFileToViz *arg1 = (DataFileToViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  BSKLogger *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DataFileToViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataFileToViz_bskLogger_get" "', argument " "1"" of type '" "DataFileToViz *""'"); 
  }
  arg1 = reinterpret_cast< DataFileToViz * >(argp1);
  result = (BSKLogger *)& ((arg1)->bskLogger);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BSKLogger, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataFileToViz_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DataFileToViz, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DataFileToViz_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MsgCurrStatus_lastTimeTag_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MsgCurrStatus *arg1 = (MsgCurrStatus *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MsgCurrStatus_lastTimeTag_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MsgCurrStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MsgCurrStatus_lastTimeTag_set" "', argument " "1"" of type '" "MsgCurrStatus *""'"); 
  }
  arg1 = reinterpret_cast< MsgCurrStatus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MsgCurrStatus_lastTimeTag_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  if (arg1) (arg1)->lastTimeTag = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MsgCurrStatus_lastTimeTag_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MsgCurrStatus *arg1 = (MsgCurrStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MsgCurrStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MsgCurrStatus_lastTimeTag_get" "', argument " "1"" of type '" "MsgCurrStatus *""'"); 
  }
  arg1 = reinterpret_cast< MsgCurrStatus * >(argp1);
  result = (uint64_t) ((arg1)->lastTimeTag);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MsgCurrStatus_dataFresh_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MsgCurrStatus *arg1 = (MsgCurrStatus *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MsgCurrStatus_dataFresh_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MsgCurrStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MsgCurrStatus_dataFresh_set" "', argument " "1"" of type '" "MsgCurrStatus *""'"); 
  }
  arg1 = reinterpret_cast< MsgCurrStatus * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MsgCurrStatus_dataFresh_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->dataFresh = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MsgCurrStatus_dataFresh_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MsgCurrStatus *arg1 = (MsgCurrStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MsgCurrStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MsgCurrStatus_dataFresh_get" "', argument " "1"" of type '" "MsgCurrStatus *""'"); 
  }
  arg1 = reinterpret_cast< MsgCurrStatus * >(argp1);
  result = (bool) ((arg1)->dataFresh);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MsgCurrStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MsgCurrStatus *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MsgCurrStatus", 0, 0, 0)) SWIG_fail;
  result = (MsgCurrStatus *)new MsgCurrStatus();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MsgCurrStatus, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MsgCurrStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MsgCurrStatus *arg1 = (MsgCurrStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MsgCurrStatus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MsgCurrStatus" "', argument " "1"" of type '" "MsgCurrStatus *""'"); 
  }
  arg1 = reinterpret_cast< MsgCurrStatus * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MsgCurrStatus_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MsgCurrStatus, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MsgCurrStatus_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ThrClusterMap_thrTag_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ThrClusterMap *arg1 = (ThrClusterMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMap_thrTag_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ThrClusterMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMap_thrTag_set" "', argument " "1"" of type '" "ThrClusterMap *""'"); 
  }
  arg1 = reinterpret_cast< ThrClusterMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThrClusterMap_thrTag_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMap_thrTag_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->thrTag = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMap_thrTag_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ThrClusterMap *arg1 = (ThrClusterMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ThrClusterMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMap_thrTag_get" "', argument " "1"" of type '" "ThrClusterMap *""'"); 
  }
  arg1 = reinterpret_cast< ThrClusterMap * >(argp1);
  result = (std::string *) & ((arg1)->thrTag);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMap_color_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ThrClusterMap *arg1 = (ThrClusterMap *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2[4] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMap_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ThrClusterMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMap_color_set" "', argument " "1"" of type '" "ThrClusterMap *""'"); 
  }
  arg1 = reinterpret_cast< ThrClusterMap * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 4) {
      printf("Value: %d\n", 4);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 4 elements");
      return NULL;
    }
    memset(temp2, 0x0, 4*sizeof(int));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (int)PyInt_AsLong(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_int, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that int into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(int));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 4; i++) {
      memcpy(&(arg1->color[i]), &(arg2[i]), sizeof(int));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMap_color_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ThrClusterMap *arg1 = (ThrClusterMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ThrClusterMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMap_color_get" "', argument " "1"" of type '" "ThrClusterMap *""'"); 
  }
  arg1 = reinterpret_cast< ThrClusterMap * >(argp1);
  result = (int *)(int *) ((arg1)->color);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 4; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_int, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyInt_FromLong((long) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThrClusterMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ThrClusterMap *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ThrClusterMap", 0, 0, 0)) SWIG_fail;
  result = (ThrClusterMap *)new ThrClusterMap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ThrClusterMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThrClusterMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ThrClusterMap *arg1 = (ThrClusterMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ThrClusterMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThrClusterMap" "', argument " "1"" of type '" "ThrClusterMap *""'"); 
  }
  arg1 = reinterpret_cast< ThrClusterMap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThrClusterMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ThrClusterMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ThrClusterMap_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PointLine_fromBodyName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PointLine *arg1 = (PointLine *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PointLine_fromBodyName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PointLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointLine_fromBodyName_set" "', argument " "1"" of type '" "PointLine *""'"); 
  }
  arg1 = reinterpret_cast< PointLine * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PointLine_fromBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PointLine_fromBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fromBodyName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointLine_fromBodyName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PointLine *arg1 = (PointLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PointLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointLine_fromBodyName_get" "', argument " "1"" of type '" "PointLine *""'"); 
  }
  arg1 = reinterpret_cast< PointLine * >(argp1);
  result = (std::string *) & ((arg1)->fromBodyName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointLine_toBodyName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PointLine *arg1 = (PointLine *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PointLine_toBodyName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PointLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointLine_toBodyName_set" "', argument " "1"" of type '" "PointLine *""'"); 
  }
  arg1 = reinterpret_cast< PointLine * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PointLine_toBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PointLine_toBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->toBodyName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointLine_toBodyName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PointLine *arg1 = (PointLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PointLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointLine_toBodyName_get" "', argument " "1"" of type '" "PointLine *""'"); 
  }
  arg1 = reinterpret_cast< PointLine * >(argp1);
  result = (std::string *) & ((arg1)->toBodyName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointLine_lineColor_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PointLine *arg1 = (PointLine *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2[4] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PointLine_lineColor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PointLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointLine_lineColor_set" "', argument " "1"" of type '" "PointLine *""'"); 
  }
  arg1 = reinterpret_cast< PointLine * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 4) {
      printf("Value: %d\n", 4);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 4 elements");
      return NULL;
    }
    memset(temp2, 0x0, 4*sizeof(int));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (int)PyInt_AsLong(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_int, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that int into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(int));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 4; i++) {
      memcpy(&(arg1->lineColor[i]), &(arg2[i]), sizeof(int));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointLine_lineColor_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PointLine *arg1 = (PointLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PointLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointLine_lineColor_get" "', argument " "1"" of type '" "PointLine *""'"); 
  }
  arg1 = reinterpret_cast< PointLine * >(argp1);
  result = (int *)(int *) ((arg1)->lineColor);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 4; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_int, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyInt_FromLong((long) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PointLine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PointLine *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_PointLine", 0, 0, 0)) SWIG_fail;
  result = (PointLine *)new PointLine();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PointLine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PointLine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PointLine *arg1 = (PointLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PointLine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PointLine" "', argument " "1"" of type '" "PointLine *""'"); 
  }
  arg1 = reinterpret_cast< PointLine * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PointLine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PointLine, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PointLine_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_KeepOutInCone_isKeepIn_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_isKeepIn_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_isKeepIn_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeepOutInCone_isKeepIn_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->isKeepIn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_isKeepIn_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_isKeepIn_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (bool) ((arg1)->isKeepIn);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_position_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_position_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_position_B_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->position_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_position_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_position_B_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (double *)(double *) ((arg1)->position_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_normalVector_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_normalVector_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_normalVector_B_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->normalVector_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_normalVector_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_normalVector_B_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (double *)(double *) ((arg1)->normalVector_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_incidenceAngle_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_incidenceAngle_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_incidenceAngle_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeepOutInCone_incidenceAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->incidenceAngle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_incidenceAngle_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_incidenceAngle_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (double) ((arg1)->incidenceAngle);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_coneHeight_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_coneHeight_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_coneHeight_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeepOutInCone_coneHeight_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->coneHeight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_coneHeight_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_coneHeight_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (double) ((arg1)->coneHeight);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_fromBodyName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_fromBodyName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_fromBodyName_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeepOutInCone_fromBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeepOutInCone_fromBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fromBodyName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_fromBodyName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_fromBodyName_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (std::string *) & ((arg1)->fromBodyName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_toBodyName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_toBodyName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_toBodyName_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeepOutInCone_toBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeepOutInCone_toBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->toBodyName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_toBodyName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_toBodyName_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (std::string *) & ((arg1)->toBodyName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_coneColor_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2[4] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_coneColor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_coneColor_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 4) {
      printf("Value: %d\n", 4);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 4 elements");
      return NULL;
    }
    memset(temp2, 0x0, 4*sizeof(int));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (int)PyInt_AsLong(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_int, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that int into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(int));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 4; i++) {
      memcpy(&(arg1->coneColor[i]), &(arg2[i]), sizeof(int));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_coneColor_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_coneColor_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (int *)(int *) ((arg1)->coneColor);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 4; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_int, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyInt_FromLong((long) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_coneName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "KeepOutInCone_coneName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_coneName_set" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeepOutInCone_coneName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeepOutInCone_coneName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->coneName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeepOutInCone_coneName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeepOutInCone_coneName_get" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  result = (std::string *) & ((arg1)->coneName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeepOutInCone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_KeepOutInCone", 0, 0, 0)) SWIG_fail;
  result = (KeepOutInCone *)new KeepOutInCone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_KeepOutInCone, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KeepOutInCone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  KeepOutInCone *arg1 = (KeepOutInCone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_KeepOutInCone, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KeepOutInCone" "', argument " "1"" of type '" "KeepOutInCone *""'"); 
  }
  arg1 = reinterpret_cast< KeepOutInCone * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KeepOutInCone_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_KeepOutInCone, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *KeepOutInCone_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_StdCameraSettings_spacecraftName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StdCameraSettings_spacecraftName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_spacecraftName_set" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdCameraSettings_spacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdCameraSettings_spacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->spacecraftName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_spacecraftName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_spacecraftName_get" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  result = (std::string *) & ((arg1)->spacecraftName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_setMode_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StdCameraSettings_setMode_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_setMode_set" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdCameraSettings_setMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->setMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_setMode_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_setMode_get" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  result = (int) ((arg1)->setMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_fieldOfView_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StdCameraSettings_fieldOfView_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_fieldOfView_set" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdCameraSettings_fieldOfView_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fieldOfView = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_fieldOfView_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_fieldOfView_get" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  result = (double) ((arg1)->fieldOfView);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_bodyTarget_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StdCameraSettings_bodyTarget_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_bodyTarget_set" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdCameraSettings_bodyTarget_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdCameraSettings_bodyTarget_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->bodyTarget = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_bodyTarget_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_bodyTarget_get" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  result = (std::string *) & ((arg1)->bodyTarget);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_setView_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StdCameraSettings_setView_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_setView_set" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StdCameraSettings_setView_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->setView = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_setView_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_setView_get" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  result = (int) ((arg1)->setView);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_pointingVector_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StdCameraSettings_pointingVector_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_pointingVector_B_set" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->pointingVector_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_pointingVector_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_pointingVector_B_get" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  result = (double *)(double *) ((arg1)->pointingVector_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_position_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StdCameraSettings_position_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_position_B_set" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->position_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_position_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_position_B_get" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  result = (double *)(double *) ((arg1)->position_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_displayName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StdCameraSettings_displayName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_displayName_set" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StdCameraSettings_displayName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StdCameraSettings_displayName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->displayName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StdCameraSettings_displayName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StdCameraSettings_displayName_get" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  result = (std::string *) & ((arg1)->displayName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StdCameraSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_StdCameraSettings", 0, 0, 0)) SWIG_fail;
  result = (StdCameraSettings *)new StdCameraSettings();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StdCameraSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StdCameraSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StdCameraSettings *arg1 = (StdCameraSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StdCameraSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdCameraSettings" "', argument " "1"" of type '" "StdCameraSettings *""'"); 
  }
  arg1 = reinterpret_cast< StdCameraSettings * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StdCameraSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StdCameraSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StdCameraSettings_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_spacecraftName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ActuatorGuiSettings_spacecraftName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_spacecraftName_set" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ActuatorGuiSettings_spacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ActuatorGuiSettings_spacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->spacecraftName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_spacecraftName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_spacecraftName_get" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  result = (std::string *) & ((arg1)->spacecraftName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_viewThrusterPanel_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ActuatorGuiSettings_viewThrusterPanel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_viewThrusterPanel_set" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ActuatorGuiSettings_viewThrusterPanel_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->viewThrusterPanel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_viewThrusterPanel_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_viewThrusterPanel_get" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  result = (int) ((arg1)->viewThrusterPanel);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_viewThrusterHUD_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ActuatorGuiSettings_viewThrusterHUD_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_viewThrusterHUD_set" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ActuatorGuiSettings_viewThrusterHUD_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->viewThrusterHUD = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_viewThrusterHUD_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_viewThrusterHUD_get" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  result = (int) ((arg1)->viewThrusterHUD);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_viewRWPanel_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ActuatorGuiSettings_viewRWPanel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_viewRWPanel_set" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ActuatorGuiSettings_viewRWPanel_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->viewRWPanel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_viewRWPanel_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_viewRWPanel_get" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  result = (int) ((arg1)->viewRWPanel);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_viewRWHUD_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ActuatorGuiSettings_viewRWHUD_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_viewRWHUD_set" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ActuatorGuiSettings_viewRWHUD_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->viewRWHUD = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_viewRWHUD_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_viewRWHUD_get" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  result = (int) ((arg1)->viewRWHUD);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_showThrusterLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ActuatorGuiSettings_showThrusterLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_showThrusterLabels_set" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ActuatorGuiSettings_showThrusterLabels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showThrusterLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_showThrusterLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_showThrusterLabels_get" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  result = (int) ((arg1)->showThrusterLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_showRWLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ActuatorGuiSettings_showRWLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_showRWLabels_set" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ActuatorGuiSettings_showRWLabels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showRWLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ActuatorGuiSettings_showRWLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ActuatorGuiSettings_showRWLabels_get" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  result = (int) ((arg1)->showRWLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ActuatorGuiSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ActuatorGuiSettings", 0, 0, 0)) SWIG_fail;
  result = (ActuatorGuiSettings *)new ActuatorGuiSettings();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ActuatorGuiSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ActuatorGuiSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ActuatorGuiSettings *arg1 = (ActuatorGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ActuatorGuiSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ActuatorGuiSettings" "', argument " "1"" of type '" "ActuatorGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< ActuatorGuiSettings * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ActuatorGuiSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ActuatorGuiSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ActuatorGuiSettings_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_spacecraftName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_spacecraftName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_spacecraftName_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InstrumentGuiSettings_spacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstrumentGuiSettings_spacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->spacecraftName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_spacecraftName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_spacecraftName_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (std::string *) & ((arg1)->spacecraftName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_viewCSSPanel_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_viewCSSPanel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_viewCSSPanel_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_viewCSSPanel_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->viewCSSPanel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_viewCSSPanel_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_viewCSSPanel_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->viewCSSPanel);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_viewCSSBoresight_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_viewCSSBoresight_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_viewCSSBoresight_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_viewCSSBoresight_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->viewCSSBoresight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_viewCSSBoresight_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_viewCSSBoresight_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->viewCSSBoresight);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_viewCSSCoverage_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_viewCSSCoverage_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_viewCSSCoverage_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_viewCSSCoverage_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->viewCSSCoverage = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_viewCSSCoverage_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_viewCSSCoverage_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->viewCSSCoverage);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showCSSLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_showCSSLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showCSSLabels_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_showCSSLabels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showCSSLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showCSSLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showCSSLabels_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->showCSSLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showGenericSensorLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_showGenericSensorLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showGenericSensorLabels_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_showGenericSensorLabels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showGenericSensorLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showGenericSensorLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showGenericSensorLabels_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->showGenericSensorLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showTransceiverLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_showTransceiverLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showTransceiverLabels_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_showTransceiverLabels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showTransceiverLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showTransceiverLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showTransceiverLabels_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->showTransceiverLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showTransceiverFrustrum_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_showTransceiverFrustrum_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showTransceiverFrustrum_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_showTransceiverFrustrum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showTransceiverFrustrum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showTransceiverFrustrum_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showTransceiverFrustrum_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->showTransceiverFrustrum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showGenericStoragePanel_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_showGenericStoragePanel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showGenericStoragePanel_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_showGenericStoragePanel_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showGenericStoragePanel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showGenericStoragePanel_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showGenericStoragePanel_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->showGenericStoragePanel);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showMultiSphereLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InstrumentGuiSettings_showMultiSphereLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showMultiSphereLabels_set" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstrumentGuiSettings_showMultiSphereLabels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showMultiSphereLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstrumentGuiSettings_showMultiSphereLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstrumentGuiSettings_showMultiSphereLabels_get" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  result = (int) ((arg1)->showMultiSphereLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InstrumentGuiSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_InstrumentGuiSettings", 0, 0, 0)) SWIG_fail;
  result = (InstrumentGuiSettings *)new InstrumentGuiSettings();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InstrumentGuiSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InstrumentGuiSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InstrumentGuiSettings *arg1 = (InstrumentGuiSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InstrumentGuiSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InstrumentGuiSettings" "', argument " "1"" of type '" "InstrumentGuiSettings *""'"); 
  }
  arg1 = reinterpret_cast< InstrumentGuiSettings * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InstrumentGuiSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_InstrumentGuiSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InstrumentGuiSettings_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CustomModel_modelPath_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_modelPath_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_modelPath_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomModel_modelPath_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomModel_modelPath_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->modelPath = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_modelPath_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_modelPath_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (std::string *) & ((arg1)->modelPath);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_simBodiesToModify_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_simBodiesToModify_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_simBodiesToModify_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomModel_simBodiesToModify_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  if (arg1) (arg1)->simBodiesToModify = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_simBodiesToModify_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_simBodiesToModify_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->simBodiesToModify);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_offset_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_offset_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_offset_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->offset[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_offset_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_offset_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (double *)(double *) ((arg1)->offset);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_rotation_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_rotation_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_rotation_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->rotation[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_rotation_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_rotation_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (double *)(double *) ((arg1)->rotation);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_scale_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_scale_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_scale_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->scale[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_scale_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_scale_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (double *)(double *) ((arg1)->scale);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_customTexturePath_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_customTexturePath_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_customTexturePath_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomModel_customTexturePath_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomModel_customTexturePath_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->customTexturePath = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_customTexturePath_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_customTexturePath_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (std::string *) & ((arg1)->customTexturePath);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_normalMapPath_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_normalMapPath_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_normalMapPath_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomModel_normalMapPath_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomModel_normalMapPath_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->normalMapPath = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_normalMapPath_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_normalMapPath_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (std::string *) & ((arg1)->normalMapPath);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_shader_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_shader_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_shader_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CustomModel_shader_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->shader = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_shader_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_shader_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (int) ((arg1)->shader);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_color_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CustomModel_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_color_set" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomModel_color_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CustomModel_color_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomModel_color_get" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->color);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_CustomModel", 0, 0, 0)) SWIG_fail;
  result = (CustomModel *)new CustomModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CustomModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CustomModel *arg1 = (CustomModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_CustomModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomModel" "', argument " "1"" of type '" "CustomModel *""'"); 
  }
  arg1 = reinterpret_cast< CustomModel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CustomModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CustomModel_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LocationPbMsg_stationName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationPbMsg_stationName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_stationName_set" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocationPbMsg_stationName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationPbMsg_stationName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->stationName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_stationName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_stationName_get" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  result = (std::string *) & ((arg1)->stationName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_parentBodyName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationPbMsg_parentBodyName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_parentBodyName_set" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocationPbMsg_parentBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationPbMsg_parentBodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->parentBodyName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_parentBodyName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_parentBodyName_get" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  result = (std::string *) & ((arg1)->parentBodyName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_r_GP_P_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationPbMsg_r_GP_P_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_r_GP_P_set" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->r_GP_P[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_r_GP_P_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_r_GP_P_get" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  result = (double *)(double *) ((arg1)->r_GP_P);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_gHat_P_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationPbMsg_gHat_P_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_gHat_P_set" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->gHat_P[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_gHat_P_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_gHat_P_get" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  result = (double *)(double *) ((arg1)->gHat_P);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_fieldOfView_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationPbMsg_fieldOfView_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_fieldOfView_set" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationPbMsg_fieldOfView_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fieldOfView = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_fieldOfView_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_fieldOfView_get" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  result = (double) ((arg1)->fieldOfView);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_color_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2[4] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationPbMsg_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_color_set" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 4) {
      printf("Value: %d\n", 4);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 4 elements");
      return NULL;
    }
    memset(temp2, 0x0, 4*sizeof(int));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (int)PyInt_AsLong(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_int, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that int into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(int));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 4; i++) {
      memcpy(&(arg1->color[i]), &(arg2[i]), sizeof(int));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_color_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_color_get" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  result = (int *)(int *) ((arg1)->color);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 4; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_int, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyInt_FromLong((long) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_range_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationPbMsg_range_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_range_set" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationPbMsg_range_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->range = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationPbMsg_range_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationPbMsg_range_get" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  result = (double) ((arg1)->range);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationPbMsg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LocationPbMsg", 0, 0, 0)) SWIG_fail;
  result = (LocationPbMsg *)new LocationPbMsg();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LocationPbMsg, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocationPbMsg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LocationPbMsg *arg1 = (LocationPbMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LocationPbMsg, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocationPbMsg" "', argument " "1"" of type '" "LocationPbMsg *""'"); 
  }
  arg1 = reinterpret_cast< LocationPbMsg * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocationPbMsg_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LocationPbMsg, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LocationPbMsg_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GenericSensor_r_SB_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_r_SB_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_r_SB_B_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->r_SB_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_r_SB_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_r_SB_B_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result = (double *)(double *) ((arg1)->r_SB_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_fieldOfView_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_fieldOfView_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_fieldOfView_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericSensor_fieldOfView_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->fieldOfView = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_fieldOfView_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_fieldOfView_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->fieldOfView);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_normalVector_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_normalVector_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_normalVector_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->normalVector[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_normalVector_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_normalVector_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result = (double *)(double *) ((arg1)->normalVector);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_isHidden_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_isHidden_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_isHidden_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericSensor_isHidden_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->isHidden = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_isHidden_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_isHidden_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result = (int) ((arg1)->isHidden);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_size_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_size_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_size_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericSensor_size_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->size = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_size_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_size_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result = (double) ((arg1)->size);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_color_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_color_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericSensor_color_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_color_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_color_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->color);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_label_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_label_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_label_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericSensor_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericSensor_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->label = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_label_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_label_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result = (std::string *) & ((arg1)->label);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_genericSensorCmdInMsg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  ReadFunctor< DeviceCmdMsgPayload > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_genericSensorCmdInMsg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_genericSensorCmdInMsg_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_DeviceCmdMsgPayload_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericSensor_genericSensorCmdInMsg_set" "', argument " "2"" of type '" "ReadFunctor< DeviceCmdMsgPayload >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericSensor_genericSensorCmdInMsg_set" "', argument " "2"" of type '" "ReadFunctor< DeviceCmdMsgPayload >""'");
    } else {
      ReadFunctor< DeviceCmdMsgPayload > * temp = reinterpret_cast< ReadFunctor< DeviceCmdMsgPayload > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->genericSensorCmdInMsg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_genericSensorCmdInMsg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ReadFunctor< DeviceCmdMsgPayload > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_genericSensorCmdInMsg_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result =  ((arg1)->genericSensorCmdInMsg);
  resultobj = SWIG_NewPointerObj((new ReadFunctor< DeviceCmdMsgPayload >(result)), SWIGTYPE_p_ReadFunctorT_DeviceCmdMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_genericSensorCmd_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericSensor_genericSensorCmd_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_genericSensorCmd_set" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericSensor_genericSensorCmd_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  if (arg1) (arg1)->genericSensorCmd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericSensor_genericSensorCmd_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericSensor_genericSensorCmd_get" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  result = (uint64_t) ((arg1)->genericSensorCmd);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GenericSensor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_GenericSensor", 0, 0, 0)) SWIG_fail;
  result = (GenericSensor *)new GenericSensor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GenericSensor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GenericSensor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericSensor *arg1 = (GenericSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GenericSensor" "', argument " "1"" of type '" "GenericSensor *""'"); 
  }
  arg1 = reinterpret_cast< GenericSensor * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GenericSensor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GenericSensor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GenericSensor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Ellipsoid_isOn_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Ellipsoid_isOn_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_isOn_set" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipsoid_isOn_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->isOn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_isOn_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_isOn_get" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  result = (int) ((arg1)->isOn);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_useBodyFrame_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Ellipsoid_useBodyFrame_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_useBodyFrame_set" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipsoid_useBodyFrame_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->useBodyFrame = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_useBodyFrame_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_useBodyFrame_get" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  result = (int) ((arg1)->useBodyFrame);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_position_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Ellipsoid_position_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_position_set" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->position[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_position_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_position_get" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  result = (double *)(double *) ((arg1)->position);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_semiMajorAxes_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Ellipsoid_semiMajorAxes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_semiMajorAxes_set" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->semiMajorAxes[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_semiMajorAxes_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_semiMajorAxes_get" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  result = (double *)(double *) ((arg1)->semiMajorAxes);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_color_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Ellipsoid_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_color_set" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipsoid_color_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_color_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_color_get" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->color);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_showGridLines_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Ellipsoid_showGridLines_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_showGridLines_set" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipsoid_showGridLines_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showGridLines = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipsoid_showGridLines_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipsoid_showGridLines_get" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  result = (int) ((arg1)->showGridLines);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellipsoid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Ellipsoid", 0, 0, 0)) SWIG_fail;
  result = (Ellipsoid *)new Ellipsoid();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ellipsoid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Ellipsoid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Ellipsoid *arg1 = (Ellipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Ellipsoid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ellipsoid" "', argument " "1"" of type '" "Ellipsoid *""'"); 
  }
  arg1 = reinterpret_cast< Ellipsoid * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Ellipsoid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Ellipsoid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Ellipsoid_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Light_label_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_label_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_label_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Light_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Light_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->label = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_label_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_label_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (std::string *) & ((arg1)->label);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_position_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_position_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_position_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->position[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_position_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_position_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double *)(double *) ((arg1)->position);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_fieldOfView_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_fieldOfView_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_fieldOfView_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_fieldOfView_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fieldOfView = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_fieldOfView_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_fieldOfView_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double) ((arg1)->fieldOfView);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_normalVector_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_normalVector_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_normalVector_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->normalVector[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_normalVector_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_normalVector_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double *)(double *) ((arg1)->normalVector);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_lightOn_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_lightOn_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_lightOn_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_lightOn_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->lightOn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_lightOn_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_lightOn_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (int) ((arg1)->lightOn);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_range_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_range_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_range_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_range_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->range = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_range_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_range_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double) ((arg1)->range);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_intensity_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_intensity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_intensity_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_intensity_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->intensity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_intensity_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_intensity_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double) ((arg1)->intensity);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_showLightMarker_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_showLightMarker_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_showLightMarker_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_showLightMarker_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showLightMarker = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_showLightMarker_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_showLightMarker_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (int) ((arg1)->showLightMarker);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_markerDiameter_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_markerDiameter_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_markerDiameter_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_markerDiameter_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->markerDiameter = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_markerDiameter_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_markerDiameter_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double) ((arg1)->markerDiameter);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_color_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_color_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Light_color_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_color_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_color_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->color);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_gammaSaturation_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_gammaSaturation_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_gammaSaturation_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_gammaSaturation_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->gammaSaturation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_gammaSaturation_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_gammaSaturation_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double) ((arg1)->gammaSaturation);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_showLensFlare_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_showLensFlare_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_showLensFlare_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_showLensFlare_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->showLensFlare = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_showLensFlare_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_showLensFlare_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double) ((arg1)->showLensFlare);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_lensFlareBrightness_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_lensFlareBrightness_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_lensFlareBrightness_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_lensFlareBrightness_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->lensFlareBrightness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_lensFlareBrightness_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_lensFlareBrightness_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double) ((arg1)->lensFlareBrightness);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_lensFlareFadeSpeed_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_lensFlareFadeSpeed_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_lensFlareFadeSpeed_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Light_lensFlareFadeSpeed_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->lensFlareFadeSpeed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_lensFlareFadeSpeed_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_lensFlareFadeSpeed_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result = (double) ((arg1)->lensFlareFadeSpeed);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_onOffCmdInMsg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  ReadFunctor< DeviceCmdMsgPayload > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Light_onOffCmdInMsg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_onOffCmdInMsg_set" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_DeviceCmdMsgPayload_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Light_onOffCmdInMsg_set" "', argument " "2"" of type '" "ReadFunctor< DeviceCmdMsgPayload >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Light_onOffCmdInMsg_set" "', argument " "2"" of type '" "ReadFunctor< DeviceCmdMsgPayload >""'");
    } else {
      ReadFunctor< DeviceCmdMsgPayload > * temp = reinterpret_cast< ReadFunctor< DeviceCmdMsgPayload > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->onOffCmdInMsg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Light_onOffCmdInMsg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ReadFunctor< DeviceCmdMsgPayload > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Light_onOffCmdInMsg_get" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  result =  ((arg1)->onOffCmdInMsg);
  resultobj = SWIG_NewPointerObj((new ReadFunctor< DeviceCmdMsgPayload >(result)), SWIGTYPE_p_ReadFunctorT_DeviceCmdMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Light(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Light", 0, 0, 0)) SWIG_fail;
  result = (Light *)new Light();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Light, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Light(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Light *arg1 = (Light *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Light, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Light" "', argument " "1"" of type '" "Light *""'"); 
  }
  arg1 = reinterpret_cast< Light * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Light_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Light, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Light_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MultiSphere_isOn_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphere_isOn_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_isOn_set" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiSphere_isOn_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->isOn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_isOn_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_isOn_get" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  result = (int) ((arg1)->isOn);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_position_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphere_position_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_position_set" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->position[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_position_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_position_get" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  result = (double *)(double *) ((arg1)->position);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_radius_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphere_radius_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_radius_set" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiSphere_radius_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radius = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_radius_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_radius_get" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  result = (double) ((arg1)->radius);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_currentValue_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphere_currentValue_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_currentValue_set" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiSphere_currentValue_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->currentValue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_currentValue_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_currentValue_get" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  result = (double) ((arg1)->currentValue);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_maxValue_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphere_maxValue_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_maxValue_set" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiSphere_maxValue_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->maxValue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_maxValue_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_maxValue_get" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  result = (double) ((arg1)->maxValue);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_positiveColor_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphere_positiveColor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_positiveColor_set" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiSphere_positiveColor_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->positiveColor = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_positiveColor_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_positiveColor_get" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->positiveColor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_negativeColor_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphere_negativeColor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_negativeColor_set" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiSphere_negativeColor_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->negativeColor = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_negativeColor_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_negativeColor_get" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->negativeColor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_neutralOpacity_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphere_neutralOpacity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_neutralOpacity_set" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiSphere_neutralOpacity_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->neutralOpacity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphere_neutralOpacity_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphere_neutralOpacity_get" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  result = (int) ((arg1)->neutralOpacity);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MultiSphere(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MultiSphere", 0, 0, 0)) SWIG_fail;
  result = (MultiSphere *)new MultiSphere();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MultiSphere, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiSphere(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphere *arg1 = (MultiSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphere, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiSphere" "', argument " "1"" of type '" "MultiSphere *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphere * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiSphere_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MultiSphere, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MultiSphere_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MultiSphereInfo_msmList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphereInfo *arg1 = (MultiSphereInfo *) 0 ;
  std::vector< MultiSphere *,std::allocator< MultiSphere * > > *arg2 = (std::vector< MultiSphere *,std::allocator< MultiSphere * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphereInfo_msmList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphereInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphereInfo_msmList_set" "', argument " "1"" of type '" "MultiSphereInfo *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphereInfo * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiSphereInfo_msmList_set" "', argument " "2"" of type '" "std::vector< MultiSphere *,std::allocator< MultiSphere * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< MultiSphere *,std::allocator< MultiSphere * > > * >(argp2);
  if (arg1) (arg1)->msmList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphereInfo_msmList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphereInfo *arg1 = (MultiSphereInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< MultiSphere *,std::allocator< MultiSphere * > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphereInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphereInfo_msmList_get" "', argument " "1"" of type '" "MultiSphereInfo *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphereInfo * >(argp1);
  result = (std::vector< MultiSphere *,std::allocator< MultiSphere * > > *)& ((arg1)->msmList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphereInfo_msmChargeInMsg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphereInfo *arg1 = (MultiSphereInfo *) 0 ;
  ReadFunctor< ChargeMsmMsgPayload > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MultiSphereInfo_msmChargeInMsg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphereInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphereInfo_msmChargeInMsg_set" "', argument " "1"" of type '" "MultiSphereInfo *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphereInfo * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_ChargeMsmMsgPayload_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiSphereInfo_msmChargeInMsg_set" "', argument " "2"" of type '" "ReadFunctor< ChargeMsmMsgPayload >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiSphereInfo_msmChargeInMsg_set" "', argument " "2"" of type '" "ReadFunctor< ChargeMsmMsgPayload >""'");
    } else {
      ReadFunctor< ChargeMsmMsgPayload > * temp = reinterpret_cast< ReadFunctor< ChargeMsmMsgPayload > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->msmChargeInMsg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiSphereInfo_msmChargeInMsg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphereInfo *arg1 = (MultiSphereInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ReadFunctor< ChargeMsmMsgPayload > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphereInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiSphereInfo_msmChargeInMsg_get" "', argument " "1"" of type '" "MultiSphereInfo *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphereInfo * >(argp1);
  result =  ((arg1)->msmChargeInMsg);
  resultobj = SWIG_NewPointerObj((new ReadFunctor< ChargeMsmMsgPayload >(result)), SWIGTYPE_p_ReadFunctorT_ChargeMsmMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MultiSphereInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphereInfo *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MultiSphereInfo", 0, 0, 0)) SWIG_fail;
  result = (MultiSphereInfo *)new MultiSphereInfo();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MultiSphereInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiSphereInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MultiSphereInfo *arg1 = (MultiSphereInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MultiSphereInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiSphereInfo" "', argument " "1"" of type '" "MultiSphereInfo *""'"); 
  }
  arg1 = reinterpret_cast< MultiSphereInfo * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiSphereInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MultiSphereInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MultiSphereInfo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GenericStorage_label_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_label_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_label_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericStorage_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericStorage_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->label = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_label_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_label_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result = (std::string *) & ((arg1)->label);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_type_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_type_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericStorage_type_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericStorage_type_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->type = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_type_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_type_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result = (std::string *) & ((arg1)->type);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_currentValue_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_currentValue_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_currentValue_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericStorage_currentValue_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->currentValue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_currentValue_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_currentValue_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result = (double) ((arg1)->currentValue);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_maxValue_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_maxValue_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_maxValue_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenericStorage_maxValue_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->maxValue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_maxValue_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_maxValue_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result = (double) ((arg1)->maxValue);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_units_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_units_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_units_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericStorage_units_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericStorage_units_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->units = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_units_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_units_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result = (std::string *) & ((arg1)->units);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_color_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_color_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericStorage_color_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_color_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_color_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->color);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_thresholds_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_thresholds_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_thresholds_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericStorage_thresholds_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->thresholds = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_thresholds_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_thresholds_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->thresholds);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_batteryStateInMsg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  ReadFunctor< PowerStorageStatusMsgPayload > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_batteryStateInMsg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_batteryStateInMsg_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_PowerStorageStatusMsgPayload_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericStorage_batteryStateInMsg_set" "', argument " "2"" of type '" "ReadFunctor< PowerStorageStatusMsgPayload >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericStorage_batteryStateInMsg_set" "', argument " "2"" of type '" "ReadFunctor< PowerStorageStatusMsgPayload >""'");
    } else {
      ReadFunctor< PowerStorageStatusMsgPayload > * temp = reinterpret_cast< ReadFunctor< PowerStorageStatusMsgPayload > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->batteryStateInMsg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_batteryStateInMsg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ReadFunctor< PowerStorageStatusMsgPayload > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_batteryStateInMsg_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result =  ((arg1)->batteryStateInMsg);
  resultobj = SWIG_NewPointerObj((new ReadFunctor< PowerStorageStatusMsgPayload >(result)), SWIGTYPE_p_ReadFunctorT_PowerStorageStatusMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_dataStorageStateInMsg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  ReadFunctor< DataStorageStatusMsgPayload > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_dataStorageStateInMsg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_dataStorageStateInMsg_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_DataStorageStatusMsgPayload_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericStorage_dataStorageStateInMsg_set" "', argument " "2"" of type '" "ReadFunctor< DataStorageStatusMsgPayload >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericStorage_dataStorageStateInMsg_set" "', argument " "2"" of type '" "ReadFunctor< DataStorageStatusMsgPayload >""'");
    } else {
      ReadFunctor< DataStorageStatusMsgPayload > * temp = reinterpret_cast< ReadFunctor< DataStorageStatusMsgPayload > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dataStorageStateInMsg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_dataStorageStateInMsg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ReadFunctor< DataStorageStatusMsgPayload > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_dataStorageStateInMsg_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result =  ((arg1)->dataStorageStateInMsg);
  resultobj = SWIG_NewPointerObj((new ReadFunctor< DataStorageStatusMsgPayload >(result)), SWIGTYPE_p_ReadFunctorT_DataStorageStatusMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_fuelTankStateInMsg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  ReadFunctor< FuelTankMsgPayload > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GenericStorage_fuelTankStateInMsg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_fuelTankStateInMsg_set" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_FuelTankMsgPayload_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenericStorage_fuelTankStateInMsg_set" "', argument " "2"" of type '" "ReadFunctor< FuelTankMsgPayload >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenericStorage_fuelTankStateInMsg_set" "', argument " "2"" of type '" "ReadFunctor< FuelTankMsgPayload >""'");
    } else {
      ReadFunctor< FuelTankMsgPayload > * temp = reinterpret_cast< ReadFunctor< FuelTankMsgPayload > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->fuelTankStateInMsg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenericStorage_fuelTankStateInMsg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ReadFunctor< FuelTankMsgPayload > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenericStorage_fuelTankStateInMsg_get" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  result =  ((arg1)->fuelTankStateInMsg);
  resultobj = SWIG_NewPointerObj((new ReadFunctor< FuelTankMsgPayload >(result)), SWIGTYPE_p_ReadFunctorT_FuelTankMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GenericStorage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_GenericStorage", 0, 0, 0)) SWIG_fail;
  result = (GenericStorage *)new GenericStorage();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GenericStorage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GenericStorage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GenericStorage *arg1 = (GenericStorage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GenericStorage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GenericStorage" "', argument " "1"" of type '" "GenericStorage *""'"); 
  }
  arg1 = reinterpret_cast< GenericStorage * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GenericStorage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GenericStorage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GenericStorage_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Transceiver_r_SB_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_r_SB_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_r_SB_B_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->r_SB_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_r_SB_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_r_SB_B_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (double *)(double *) ((arg1)->r_SB_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_fieldOfView_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_fieldOfView_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_fieldOfView_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transceiver_fieldOfView_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fieldOfView = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_fieldOfView_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_fieldOfView_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (double) ((arg1)->fieldOfView);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_normalVector_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_normalVector_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_normalVector_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->normalVector[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_normalVector_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_normalVector_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (double *)(double *) ((arg1)->normalVector);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_isHidden_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_isHidden_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_isHidden_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transceiver_isHidden_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->isHidden = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_isHidden_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_isHidden_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (int) ((arg1)->isHidden);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_color_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_color_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_color_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transceiver_color_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_color_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_color_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->color);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_label_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_label_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_label_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transceiver_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transceiver_label_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->label = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_label_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_label_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (std::string *) & ((arg1)->label);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_animationSpeed_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_animationSpeed_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_animationSpeed_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transceiver_animationSpeed_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->animationSpeed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_animationSpeed_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_animationSpeed_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (int) ((arg1)->animationSpeed);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_transceiverStateInMsgs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  std::vector< ReadFunctor< DataNodeUsageMsgPayload >,std::allocator< ReadFunctor< DataNodeUsageMsgPayload > > > *arg2 = (std::vector< ReadFunctor< DataNodeUsageMsgPayload >,std::allocator< ReadFunctor< DataNodeUsageMsgPayload > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_transceiverStateInMsgs_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_transceiverStateInMsgs_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transceiver_transceiverStateInMsgs_set" "', argument " "2"" of type '" "std::vector< ReadFunctor< DataNodeUsageMsgPayload >,std::allocator< ReadFunctor< DataNodeUsageMsgPayload > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< DataNodeUsageMsgPayload >,std::allocator< ReadFunctor< DataNodeUsageMsgPayload > > > * >(argp2);
  if (arg1) (arg1)->transceiverStateInMsgs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_transceiverStateInMsgs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< DataNodeUsageMsgPayload >,std::allocator< ReadFunctor< DataNodeUsageMsgPayload > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_transceiverStateInMsgs_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (std::vector< ReadFunctor< DataNodeUsageMsgPayload >,std::allocator< ReadFunctor< DataNodeUsageMsgPayload > > > *)& ((arg1)->transceiverStateInMsgs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_transceiverState_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Transceiver_transceiverState_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_transceiverState_set" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transceiver_transceiverState_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->transceiverState = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transceiver_transceiverState_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transceiver_transceiverState_get" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  result = (int) ((arg1)->transceiverState);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Transceiver(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Transceiver", 0, 0, 0)) SWIG_fail;
  result = (Transceiver *)new Transceiver();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Transceiver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Transceiver(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Transceiver *arg1 = (Transceiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Transceiver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transceiver" "', argument " "1"" of type '" "Transceiver *""'"); 
  }
  arg1 = reinterpret_cast< Transceiver * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Transceiver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Transceiver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Transceiver_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VizSpacecraftData_spacecraftName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_spacecraftName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_spacecraftName_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_spacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSpacecraftData_spacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->spacecraftName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_spacecraftName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_spacecraftName_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::string *) & ((arg1)->spacecraftName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_parentSpacecraftName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_parentSpacecraftName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_parentSpacecraftName_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_parentSpacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSpacecraftData_parentSpacecraftName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->parentSpacecraftName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_parentSpacecraftName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_parentSpacecraftName_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::string *) & ((arg1)->parentSpacecraftName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_scStateInMsg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  ReadFunctor< SCStatesMsgPayload > *arg2 = (ReadFunctor< SCStatesMsgPayload > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_scStateInMsg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_scStateInMsg_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ReadFunctorT_SCStatesMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_scStateInMsg_set" "', argument " "2"" of type '" "ReadFunctor< SCStatesMsgPayload > *""'"); 
  }
  arg2 = reinterpret_cast< ReadFunctor< SCStatesMsgPayload > * >(argp2);
  if (arg1) (arg1)->scStateInMsg = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_scStateInMsg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ReadFunctor< SCStatesMsgPayload > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_scStateInMsg_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (ReadFunctor< SCStatesMsgPayload > *)& ((arg1)->scStateInMsg);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReadFunctorT_SCStatesMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_scStateInMsgStatus_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  MsgCurrStatus *arg2 = (MsgCurrStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_scStateInMsgStatus_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_scStateInMsgStatus_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_MsgCurrStatus, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_scStateInMsgStatus_set" "', argument " "2"" of type '" "MsgCurrStatus *""'"); 
  }
  arg2 = reinterpret_cast< MsgCurrStatus * >(argp2);
  if (arg1) (arg1)->scStateInMsgStatus = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_scStateInMsgStatus_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  MsgCurrStatus *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_scStateInMsgStatus_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (MsgCurrStatus *)& ((arg1)->scStateInMsgStatus);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MsgCurrStatus, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_scStateMsgBuffer_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  SCStatesMsgPayload *arg2 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_scStateMsgBuffer_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_scStateMsgBuffer_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_scStateMsgBuffer_set" "', argument " "2"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg2 = reinterpret_cast< SCStatesMsgPayload * >(argp2);
  if (arg1) (arg1)->scStateMsgBuffer = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_scStateMsgBuffer_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SCStatesMsgPayload *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_scStateMsgBuffer_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (SCStatesMsgPayload *)& ((arg1)->scStateMsgBuffer);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_rwInMsgs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *arg2 = (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_rwInMsgs_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_rwInMsgs_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_rwInMsgs_set" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > * >(argp2);
  if (arg1) (arg1)->rwInMsgs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_rwInMsgs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_rwInMsgs_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *)& ((arg1)->rwInMsgs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_rwInMsgStatus_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *arg2 = (std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_rwInMsgStatus_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_rwInMsgStatus_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_rwInMsgStatus_set" "', argument " "2"" of type '" "std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > * >(argp2);
  if (arg1) (arg1)->rwInMsgStatus = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_rwInMsgStatus_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_rwInMsgStatus_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *)& ((arg1)->rwInMsgStatus);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_rwInMessage_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< RWConfigLogMsgPayload,std::allocator< RWConfigLogMsgPayload > > *arg2 = (std::vector< RWConfigLogMsgPayload,std::allocator< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_rwInMessage_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_rwInMessage_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_rwInMessage_set" "', argument " "2"" of type '" "std::vector< RWConfigLogMsgPayload,std::allocator< RWConfigLogMsgPayload > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< RWConfigLogMsgPayload,std::allocator< RWConfigLogMsgPayload > > * >(argp2);
  if (arg1) (arg1)->rwInMessage = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_rwInMessage_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< RWConfigLogMsgPayload,std::allocator< RWConfigLogMsgPayload > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_rwInMessage_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< RWConfigLogMsgPayload,std::allocator< RWConfigLogMsgPayload > > *)& ((arg1)->rwInMessage);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_cssInMsgs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< ReadFunctor< CSSConfigLogMsgPayload >,std::allocator< ReadFunctor< CSSConfigLogMsgPayload > > > *arg2 = (std::vector< ReadFunctor< CSSConfigLogMsgPayload >,std::allocator< ReadFunctor< CSSConfigLogMsgPayload > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_cssInMsgs_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_cssInMsgs_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_cssInMsgs_set" "', argument " "2"" of type '" "std::vector< ReadFunctor< CSSConfigLogMsgPayload >,std::allocator< ReadFunctor< CSSConfigLogMsgPayload > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< CSSConfigLogMsgPayload >,std::allocator< ReadFunctor< CSSConfigLogMsgPayload > > > * >(argp2);
  if (arg1) (arg1)->cssInMsgs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_cssInMsgs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< CSSConfigLogMsgPayload >,std::allocator< ReadFunctor< CSSConfigLogMsgPayload > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_cssInMsgs_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< ReadFunctor< CSSConfigLogMsgPayload >,std::allocator< ReadFunctor< CSSConfigLogMsgPayload > > > *)& ((arg1)->cssInMsgs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_cssConfLogInMsgStatus_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *arg2 = (std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_cssConfLogInMsgStatus_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_cssConfLogInMsgStatus_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_cssConfLogInMsgStatus_set" "', argument " "2"" of type '" "std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > * >(argp2);
  if (arg1) (arg1)->cssConfLogInMsgStatus = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_cssConfLogInMsgStatus_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_cssConfLogInMsgStatus_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *)& ((arg1)->cssConfLogInMsgStatus);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_cssInMessage_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< CSSConfigLogMsgPayload,std::allocator< CSSConfigLogMsgPayload > > *arg2 = (std::vector< CSSConfigLogMsgPayload,std::allocator< CSSConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_cssInMessage_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_cssInMessage_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_cssInMessage_set" "', argument " "2"" of type '" "std::vector< CSSConfigLogMsgPayload,std::allocator< CSSConfigLogMsgPayload > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CSSConfigLogMsgPayload,std::allocator< CSSConfigLogMsgPayload > > * >(argp2);
  if (arg1) (arg1)->cssInMessage = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_cssInMessage_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< CSSConfigLogMsgPayload,std::allocator< CSSConfigLogMsgPayload > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_cssInMessage_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< CSSConfigLogMsgPayload,std::allocator< CSSConfigLogMsgPayload > > *)& ((arg1)->cssInMessage);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_thrInMsgs_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *arg2 = (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_thrInMsgs_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_thrInMsgs_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_thrInMsgs_set" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > * >(argp2);
  if (arg1) (arg1)->thrInMsgs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_thrInMsgs_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_thrInMsgs_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *)& ((arg1)->thrInMsgs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_thrMsgStatus_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *arg2 = (std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_thrMsgStatus_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_thrMsgStatus_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_thrMsgStatus_set" "', argument " "2"" of type '" "std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > * >(argp2);
  if (arg1) (arg1)->thrMsgStatus = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_thrMsgStatus_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_thrMsgStatus_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *)& ((arg1)->thrMsgStatus);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_thrOutputMessage_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< THROutputMsgPayload,std::allocator< THROutputMsgPayload > > *arg2 = (std::vector< THROutputMsgPayload,std::allocator< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_thrOutputMessage_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_thrOutputMessage_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_thrOutputMessage_set" "', argument " "2"" of type '" "std::vector< THROutputMsgPayload,std::allocator< THROutputMsgPayload > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< THROutputMsgPayload,std::allocator< THROutputMsgPayload > > * >(argp2);
  if (arg1) (arg1)->thrOutputMessage = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_thrOutputMessage_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< THROutputMsgPayload,std::allocator< THROutputMsgPayload > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_thrOutputMessage_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< THROutputMsgPayload,std::allocator< THROutputMsgPayload > > *)& ((arg1)->thrOutputMessage);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_thrInfo_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *arg2 = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_thrInfo_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_thrInfo_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_thrInfo_set" "', argument " "2"" of type '" "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > * >(argp2);
  if (arg1) (arg1)->thrInfo = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_thrInfo_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_thrInfo_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)& ((arg1)->thrInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_genericSensorList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< GenericSensor *,std::allocator< GenericSensor * > > *arg2 = (std::vector< GenericSensor *,std::allocator< GenericSensor * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_genericSensorList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_genericSensorList_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_genericSensorList_set" "', argument " "2"" of type '" "std::vector< GenericSensor *,std::allocator< GenericSensor * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GenericSensor *,std::allocator< GenericSensor * > > * >(argp2);
  if (arg1) (arg1)->genericSensorList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_genericSensorList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< GenericSensor *,std::allocator< GenericSensor * > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_genericSensorList_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< GenericSensor *,std::allocator< GenericSensor * > > *)& ((arg1)->genericSensorList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_transceiverList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< Transceiver *,std::allocator< Transceiver * > > *arg2 = (std::vector< Transceiver *,std::allocator< Transceiver * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_transceiverList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_transceiverList_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_transceiverList_set" "', argument " "2"" of type '" "std::vector< Transceiver *,std::allocator< Transceiver * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Transceiver *,std::allocator< Transceiver * > > * >(argp2);
  if (arg1) (arg1)->transceiverList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_transceiverList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Transceiver *,std::allocator< Transceiver * > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_transceiverList_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< Transceiver *,std::allocator< Transceiver * > > *)& ((arg1)->transceiverList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_genericStorageList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< GenericStorage *,std::allocator< GenericStorage * > > *arg2 = (std::vector< GenericStorage *,std::allocator< GenericStorage * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_genericStorageList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_genericStorageList_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_genericStorageList_set" "', argument " "2"" of type '" "std::vector< GenericStorage *,std::allocator< GenericStorage * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GenericStorage *,std::allocator< GenericStorage * > > * >(argp2);
  if (arg1) (arg1)->genericStorageList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_genericStorageList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< GenericStorage *,std::allocator< GenericStorage * > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_genericStorageList_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< GenericStorage *,std::allocator< GenericStorage * > > *)& ((arg1)->genericStorageList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_lightList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< Light *,std::allocator< Light * > > *arg2 = (std::vector< Light *,std::allocator< Light * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_lightList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_lightList_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_lightList_set" "', argument " "2"" of type '" "std::vector< Light *,std::allocator< Light * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Light *,std::allocator< Light * > > * >(argp2);
  if (arg1) (arg1)->lightList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_lightList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Light *,std::allocator< Light * > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_lightList_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< Light *,std::allocator< Light * > > *)& ((arg1)->lightList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_spacecraftSprite_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_spacecraftSprite_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_spacecraftSprite_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_spacecraftSprite_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSpacecraftData_spacecraftSprite_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->spacecraftSprite = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_spacecraftSprite_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_spacecraftSprite_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::string *) & ((arg1)->spacecraftSprite);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_modelDictionaryKey_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_modelDictionaryKey_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_modelDictionaryKey_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_modelDictionaryKey_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSpacecraftData_modelDictionaryKey_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->modelDictionaryKey = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_modelDictionaryKey_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_modelDictionaryKey_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::string *) & ((arg1)->modelDictionaryKey);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_logoTexture_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_logoTexture_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_logoTexture_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_logoTexture_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSpacecraftData_logoTexture_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->logoTexture = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_logoTexture_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_logoTexture_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::string *) & ((arg1)->logoTexture);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_oscOrbitLineColor_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_oscOrbitLineColor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_oscOrbitLineColor_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_oscOrbitLineColor_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->oscOrbitLineColor = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_oscOrbitLineColor_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_oscOrbitLineColor_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->oscOrbitLineColor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_trueTrajectoryLineColor_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_trueTrajectoryLineColor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_trueTrajectoryLineColor_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_trueTrajectoryLineColor_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->trueTrajectoryLineColor = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_trueTrajectoryLineColor_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_trueTrajectoryLineColor_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->trueTrajectoryLineColor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_trueTrajectoryLineColorInMsg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  ReadFunctor< ColorMsgPayload > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_trueTrajectoryLineColorInMsg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_trueTrajectoryLineColorInMsg_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_ColorMsgPayload_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_trueTrajectoryLineColorInMsg_set" "', argument " "2"" of type '" "ReadFunctor< ColorMsgPayload >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSpacecraftData_trueTrajectoryLineColorInMsg_set" "', argument " "2"" of type '" "ReadFunctor< ColorMsgPayload >""'");
    } else {
      ReadFunctor< ColorMsgPayload > * temp = reinterpret_cast< ReadFunctor< ColorMsgPayload > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->trueTrajectoryLineColorInMsg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_trueTrajectoryLineColorInMsg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ReadFunctor< ColorMsgPayload > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_trueTrajectoryLineColorInMsg_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result =  ((arg1)->trueTrajectoryLineColorInMsg);
  resultobj = SWIG_NewPointerObj((new ReadFunctor< ColorMsgPayload >(result)), SWIGTYPE_p_ReadFunctorT_ColorMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_msmInfo_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  MultiSphereInfo *arg2 = (MultiSphereInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_msmInfo_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_msmInfo_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_MultiSphereInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_msmInfo_set" "', argument " "2"" of type '" "MultiSphereInfo *""'"); 
  }
  arg2 = reinterpret_cast< MultiSphereInfo * >(argp2);
  if (arg1) (arg1)->msmInfo = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_msmInfo_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  MultiSphereInfo *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_msmInfo_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (MultiSphereInfo *)& ((arg1)->msmInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MultiSphereInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_ellipsoidList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  std::vector< Ellipsoid *,std::allocator< Ellipsoid * > > *arg2 = (std::vector< Ellipsoid *,std::allocator< Ellipsoid * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSpacecraftData_ellipsoidList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_ellipsoidList_set" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSpacecraftData_ellipsoidList_set" "', argument " "2"" of type '" "std::vector< Ellipsoid *,std::allocator< Ellipsoid * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Ellipsoid *,std::allocator< Ellipsoid * > > * >(argp2);
  if (arg1) (arg1)->ellipsoidList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSpacecraftData_ellipsoidList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Ellipsoid *,std::allocator< Ellipsoid * > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSpacecraftData_ellipsoidList_get" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  result = (std::vector< Ellipsoid *,std::allocator< Ellipsoid * > > *)& ((arg1)->ellipsoidList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VizSpacecraftData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_VizSpacecraftData", 0, 0, 0)) SWIG_fail;
  result = (VizSpacecraftData *)new VizSpacecraftData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VizSpacecraftData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VizSpacecraftData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSpacecraftData *arg1 = (VizSpacecraftData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSpacecraftData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VizSpacecraftData" "', argument " "1"" of type '" "VizSpacecraftData *""'"); 
  }
  arg1 = reinterpret_cast< VizSpacecraftData * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VizSpacecraftData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VizSpacecraftData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VizSpacecraftData_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VizSettings_ambient_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_ambient_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_ambient_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_ambient_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->ambient = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_ambient_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_ambient_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->ambient);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_orbitLinesOn_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_orbitLinesOn_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_orbitLinesOn_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_orbitLinesOn_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->orbitLinesOn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_orbitLinesOn_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_orbitLinesOn_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->orbitLinesOn);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_trueTrajectoryLinesOn_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_trueTrajectoryLinesOn_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_trueTrajectoryLinesOn_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_trueTrajectoryLinesOn_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->trueTrajectoryLinesOn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_trueTrajectoryLinesOn_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_trueTrajectoryLinesOn_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->trueTrajectoryLinesOn);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_spacecraftCSon_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_spacecraftCSon_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_spacecraftCSon_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_spacecraftCSon_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->spacecraftCSon = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_spacecraftCSon_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_spacecraftCSon_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->spacecraftCSon);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_planetCSon_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_planetCSon_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_planetCSon_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_planetCSon_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->planetCSon = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_planetCSon_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_planetCSon_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->planetCSon);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_pointLineList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::vector< PointLine,std::allocator< PointLine > > *arg2 = (std::vector< PointLine,std::allocator< PointLine > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_pointLineList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_pointLineList_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_pointLineList_set" "', argument " "2"" of type '" "std::vector< PointLine,std::allocator< PointLine > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< PointLine,std::allocator< PointLine > > * >(argp2);
  if (arg1) (arg1)->pointLineList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_pointLineList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< PointLine,std::allocator< PointLine > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_pointLineList_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::vector< PointLine,std::allocator< PointLine > > *)& ((arg1)->pointLineList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_coneList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::vector< KeepOutInCone,std::allocator< KeepOutInCone > > *arg2 = (std::vector< KeepOutInCone,std::allocator< KeepOutInCone > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_coneList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_coneList_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_coneList_set" "', argument " "2"" of type '" "std::vector< KeepOutInCone,std::allocator< KeepOutInCone > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< KeepOutInCone,std::allocator< KeepOutInCone > > * >(argp2);
  if (arg1) (arg1)->coneList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_coneList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< KeepOutInCone,std::allocator< KeepOutInCone > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_coneList_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::vector< KeepOutInCone,std::allocator< KeepOutInCone > > *)& ((arg1)->coneList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_stdCameraList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::vector< StdCameraSettings,std::allocator< StdCameraSettings > > *arg2 = (std::vector< StdCameraSettings,std::allocator< StdCameraSettings > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_stdCameraList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_stdCameraList_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_stdCameraList_set" "', argument " "2"" of type '" "std::vector< StdCameraSettings,std::allocator< StdCameraSettings > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< StdCameraSettings,std::allocator< StdCameraSettings > > * >(argp2);
  if (arg1) (arg1)->stdCameraList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_stdCameraList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< StdCameraSettings,std::allocator< StdCameraSettings > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_stdCameraList_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::vector< StdCameraSettings,std::allocator< StdCameraSettings > > *)& ((arg1)->stdCameraList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_customModelList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::vector< CustomModel,std::allocator< CustomModel > > *arg2 = (std::vector< CustomModel,std::allocator< CustomModel > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_customModelList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_customModelList_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_customModelList_set" "', argument " "2"" of type '" "std::vector< CustomModel,std::allocator< CustomModel > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CustomModel,std::allocator< CustomModel > > * >(argp2);
  if (arg1) (arg1)->customModelList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_customModelList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< CustomModel,std::allocator< CustomModel > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_customModelList_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::vector< CustomModel,std::allocator< CustomModel > > *)& ((arg1)->customModelList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_actuatorGuiSettingsList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::vector< ActuatorGuiSettings,std::allocator< ActuatorGuiSettings > > *arg2 = (std::vector< ActuatorGuiSettings,std::allocator< ActuatorGuiSettings > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_actuatorGuiSettingsList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_actuatorGuiSettingsList_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_actuatorGuiSettingsList_set" "', argument " "2"" of type '" "std::vector< ActuatorGuiSettings,std::allocator< ActuatorGuiSettings > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ActuatorGuiSettings,std::allocator< ActuatorGuiSettings > > * >(argp2);
  if (arg1) (arg1)->actuatorGuiSettingsList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_actuatorGuiSettingsList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ActuatorGuiSettings,std::allocator< ActuatorGuiSettings > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_actuatorGuiSettingsList_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::vector< ActuatorGuiSettings,std::allocator< ActuatorGuiSettings > > *)& ((arg1)->actuatorGuiSettingsList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_instrumentGuiSettingsList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::vector< InstrumentGuiSettings,std::allocator< InstrumentGuiSettings > > *arg2 = (std::vector< InstrumentGuiSettings,std::allocator< InstrumentGuiSettings > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_instrumentGuiSettingsList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_instrumentGuiSettingsList_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_instrumentGuiSettingsList_set" "', argument " "2"" of type '" "std::vector< InstrumentGuiSettings,std::allocator< InstrumentGuiSettings > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< InstrumentGuiSettings,std::allocator< InstrumentGuiSettings > > * >(argp2);
  if (arg1) (arg1)->instrumentGuiSettingsList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_instrumentGuiSettingsList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< InstrumentGuiSettings,std::allocator< InstrumentGuiSettings > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_instrumentGuiSettingsList_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::vector< InstrumentGuiSettings,std::allocator< InstrumentGuiSettings > > *)& ((arg1)->instrumentGuiSettingsList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_skyBox_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_skyBox_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_skyBox_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_skyBox_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSettings_skyBox_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->skyBox = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_skyBox_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_skyBox_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::string *) & ((arg1)->skyBox);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_dataFresh_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_dataFresh_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_dataFresh_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_dataFresh_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->dataFresh = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_dataFresh_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_dataFresh_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (bool) ((arg1)->dataFresh);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_viewCameraBoresightHUD_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_viewCameraBoresightHUD_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_viewCameraBoresightHUD_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_viewCameraBoresightHUD_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->viewCameraBoresightHUD = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_viewCameraBoresightHUD_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_viewCameraBoresightHUD_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->viewCameraBoresightHUD);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_viewCameraConeHUD_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_viewCameraConeHUD_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_viewCameraConeHUD_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_viewCameraConeHUD_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->viewCameraConeHUD = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_viewCameraConeHUD_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_viewCameraConeHUD_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->viewCameraConeHUD);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showCSLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showCSLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showCSLabels_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showCSLabels_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showCSLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showCSLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showCSLabels_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showCSLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showCelestialBodyLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showCelestialBodyLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showCelestialBodyLabels_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showCelestialBodyLabels_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showCelestialBodyLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showCelestialBodyLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showCelestialBodyLabels_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showCelestialBodyLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showSpacecraftLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showSpacecraftLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showSpacecraftLabels_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showSpacecraftLabels_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showSpacecraftLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showSpacecraftLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showSpacecraftLabels_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showSpacecraftLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showCameraLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showCameraLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showCameraLabels_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showCameraLabels_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showCameraLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showCameraLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showCameraLabels_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showCameraLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_customGUIScale_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_customGUIScale_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_customGUIScale_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_customGUIScale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->customGUIScale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_customGUIScale_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_customGUIScale_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->customGUIScale);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_defaultSpacecraftSprite_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_defaultSpacecraftSprite_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_defaultSpacecraftSprite_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_defaultSpacecraftSprite_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSettings_defaultSpacecraftSprite_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->defaultSpacecraftSprite = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_defaultSpacecraftSprite_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_defaultSpacecraftSprite_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::string *) & ((arg1)->defaultSpacecraftSprite);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showSpacecraftAsSprites_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showSpacecraftAsSprites_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showSpacecraftAsSprites_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showSpacecraftAsSprites_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showSpacecraftAsSprites = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showSpacecraftAsSprites_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showSpacecraftAsSprites_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showSpacecraftAsSprites);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showCelestialBodiesAsSprites_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showCelestialBodiesAsSprites_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showCelestialBodiesAsSprites_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showCelestialBodiesAsSprites_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showCelestialBodiesAsSprites = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showCelestialBodiesAsSprites_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showCelestialBodiesAsSprites_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showCelestialBodiesAsSprites);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_show24hrClock_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_show24hrClock_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_show24hrClock_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_show24hrClock_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->show24hrClock = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_show24hrClock_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_show24hrClock_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->show24hrClock);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showDataRateDisplay_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showDataRateDisplay_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showDataRateDisplay_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showDataRateDisplay_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showDataRateDisplay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showDataRateDisplay_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showDataRateDisplay_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showDataRateDisplay);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_keyboardAngularRate_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_keyboardAngularRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_keyboardAngularRate_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_keyboardAngularRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->keyboardAngularRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_keyboardAngularRate_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_keyboardAngularRate_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->keyboardAngularRate);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_keyboardZoomRate_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_keyboardZoomRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_keyboardZoomRate_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_keyboardZoomRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->keyboardZoomRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_keyboardZoomRate_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_keyboardZoomRate_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->keyboardZoomRate);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_defaultThrusterColor_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2[4] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_defaultThrusterColor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_defaultThrusterColor_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 4) {
      printf("Value: %d\n", 4);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 4 elements");
      return NULL;
    }
    memset(temp2, 0x0, 4*sizeof(int));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (int)PyInt_AsLong(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_int, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that int into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(int));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 4; i++) {
      memcpy(&(arg1->defaultThrusterColor[i]), &(arg2[i]), sizeof(int));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_defaultThrusterColor_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_defaultThrusterColor_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int *)(int *) ((arg1)->defaultThrusterColor);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 4; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_int, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyInt_FromLong((long) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_defaultThrusterPlumeLifeScalar_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_defaultThrusterPlumeLifeScalar_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_defaultThrusterPlumeLifeScalar_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_defaultThrusterPlumeLifeScalar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->defaultThrusterPlumeLifeScalar = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_defaultThrusterPlumeLifeScalar_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_defaultThrusterPlumeLifeScalar_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->defaultThrusterPlumeLifeScalar);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_orbitLineSegments_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_orbitLineSegments_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_orbitLineSegments_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_orbitLineSegments_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->orbitLineSegments = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_orbitLineSegments_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_orbitLineSegments_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->orbitLineSegments);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_relativeOrbitRange_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_relativeOrbitRange_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_relativeOrbitRange_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_relativeOrbitRange_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->relativeOrbitRange = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_relativeOrbitRange_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_relativeOrbitRange_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->relativeOrbitRange);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_mainCameraTarget_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_mainCameraTarget_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_mainCameraTarget_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizSettings_mainCameraTarget_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizSettings_mainCameraTarget_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->mainCameraTarget = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_mainCameraTarget_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_mainCameraTarget_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (std::string *) & ((arg1)->mainCameraTarget);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showHillFrame_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showHillFrame_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showHillFrame_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showHillFrame_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showHillFrame = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showHillFrame_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showHillFrame_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->showHillFrame);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showVelocityFrame_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showVelocityFrame_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showVelocityFrame_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showVelocityFrame_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showVelocityFrame = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showVelocityFrame_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showVelocityFrame_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->showVelocityFrame);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_relativeOrbitFrame_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_relativeOrbitFrame_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_relativeOrbitFrame_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_relativeOrbitFrame_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->relativeOrbitFrame = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_relativeOrbitFrame_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_relativeOrbitFrame_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->relativeOrbitFrame);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_spacecraftShadowBrightness_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_spacecraftShadowBrightness_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_spacecraftShadowBrightness_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_spacecraftShadowBrightness_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->spacecraftShadowBrightness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_spacecraftShadowBrightness_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_spacecraftShadowBrightness_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->spacecraftShadowBrightness);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_spacecraftSizeMultiplier_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_spacecraftSizeMultiplier_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_spacecraftSizeMultiplier_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_spacecraftSizeMultiplier_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->spacecraftSizeMultiplier = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_spacecraftSizeMultiplier_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_spacecraftSizeMultiplier_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->spacecraftSizeMultiplier);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_spacecraftHelioViewSizeMultiplier_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_spacecraftHelioViewSizeMultiplier_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_spacecraftHelioViewSizeMultiplier_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_spacecraftHelioViewSizeMultiplier_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->spacecraftHelioViewSizeMultiplier = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_spacecraftHelioViewSizeMultiplier_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_spacecraftHelioViewSizeMultiplier_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->spacecraftHelioViewSizeMultiplier);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_forceStartAtSpacecraftLocalView_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_forceStartAtSpacecraftLocalView_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_forceStartAtSpacecraftLocalView_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_forceStartAtSpacecraftLocalView_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->forceStartAtSpacecraftLocalView = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_forceStartAtSpacecraftLocalView_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_forceStartAtSpacecraftLocalView_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->forceStartAtSpacecraftLocalView);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_useSimpleLocationMarkers_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_useSimpleLocationMarkers_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_useSimpleLocationMarkers_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_useSimpleLocationMarkers_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->useSimpleLocationMarkers = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_useSimpleLocationMarkers_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_useSimpleLocationMarkers_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->useSimpleLocationMarkers);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showLocationCommLines_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showLocationCommLines_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showLocationCommLines_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showLocationCommLines_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showLocationCommLines = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showLocationCommLines_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showLocationCommLines_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showLocationCommLines);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showLocationCones_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showLocationCones_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showLocationCones_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showLocationCones_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showLocationCones = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showLocationCones_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showLocationCones_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showLocationCones);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showLocationLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showLocationLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showLocationLabels_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showLocationLabels_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->showLocationLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showLocationLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showLocationLabels_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->showLocationLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_atmospheresOff_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_atmospheresOff_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_atmospheresOff_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_atmospheresOff_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->atmospheresOff = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_atmospheresOff_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_atmospheresOff_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->atmospheresOff);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_scViewToPlanetViewBoundaryMultiplier_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_scViewToPlanetViewBoundaryMultiplier_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_scViewToPlanetViewBoundaryMultiplier_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_scViewToPlanetViewBoundaryMultiplier_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->scViewToPlanetViewBoundaryMultiplier = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_scViewToPlanetViewBoundaryMultiplier_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_scViewToPlanetViewBoundaryMultiplier_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->scViewToPlanetViewBoundaryMultiplier);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_planetViewToHelioViewBoundaryMultiplier_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_planetViewToHelioViewBoundaryMultiplier_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_planetViewToHelioViewBoundaryMultiplier_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_planetViewToHelioViewBoundaryMultiplier_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->planetViewToHelioViewBoundaryMultiplier = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_planetViewToHelioViewBoundaryMultiplier_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_planetViewToHelioViewBoundaryMultiplier_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->planetViewToHelioViewBoundaryMultiplier);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_sunIntensity_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_sunIntensity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_sunIntensity_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_sunIntensity_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sunIntensity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_sunIntensity_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_sunIntensity_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->sunIntensity);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_attenuateSunLightWithDistance_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_attenuateSunLightWithDistance_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_attenuateSunLightWithDistance_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_attenuateSunLightWithDistance_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->attenuateSunLightWithDistance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_attenuateSunLightWithDistance_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int32_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_attenuateSunLightWithDistance_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int32_t) ((arg1)->attenuateSunLightWithDistance);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showLightLabels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showLightLabels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showLightLabels_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showLightLabels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showLightLabels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showLightLabels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showLightLabels_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->showLightLabels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_celestialBodyHelioViewSizeMultiplier_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_celestialBodyHelioViewSizeMultiplier_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_celestialBodyHelioViewSizeMultiplier_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_celestialBodyHelioViewSizeMultiplier_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->celestialBodyHelioViewSizeMultiplier = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_celestialBodyHelioViewSizeMultiplier_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_celestialBodyHelioViewSizeMultiplier_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (double) ((arg1)->celestialBodyHelioViewSizeMultiplier);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showMissionTime_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizSettings_showMissionTime_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showMissionTime_set" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizSettings_showMissionTime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->showMissionTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizSettings_showMissionTime_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizSettings_showMissionTime_get" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  result = (int) ((arg1)->showMissionTime);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VizSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_VizSettings", 0, 0, 0)) SWIG_fail;
  result = (VizSettings *)new VizSettings();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VizSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VizSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VizSettings *arg1 = (VizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VizSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VizSettings" "', argument " "1"" of type '" "VizSettings *""'"); 
  }
  arg1 = reinterpret_cast< VizSettings * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VizSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VizSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VizSettings_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LiveVizSettings_targetLineList_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LiveVizSettings *arg1 = (LiveVizSettings *) 0 ;
  std::vector< PointLine,std::allocator< PointLine > > *arg2 = (std::vector< PointLine,std::allocator< PointLine > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveVizSettings_targetLineList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LiveVizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveVizSettings_targetLineList_set" "', argument " "1"" of type '" "LiveVizSettings *""'"); 
  }
  arg1 = reinterpret_cast< LiveVizSettings * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveVizSettings_targetLineList_set" "', argument " "2"" of type '" "std::vector< PointLine,std::allocator< PointLine > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< PointLine,std::allocator< PointLine > > * >(argp2);
  if (arg1) (arg1)->targetLineList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveVizSettings_targetLineList_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LiveVizSettings *arg1 = (LiveVizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< PointLine,std::allocator< PointLine > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LiveVizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveVizSettings_targetLineList_get" "', argument " "1"" of type '" "LiveVizSettings *""'"); 
  }
  arg1 = reinterpret_cast< LiveVizSettings * >(argp1);
  result = (std::vector< PointLine,std::allocator< PointLine > > *)& ((arg1)->targetLineList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveVizSettings_relativeOrbitChief_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LiveVizSettings *arg1 = (LiveVizSettings *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveVizSettings_relativeOrbitChief_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LiveVizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveVizSettings_relativeOrbitChief_set" "', argument " "1"" of type '" "LiveVizSettings *""'"); 
  }
  arg1 = reinterpret_cast< LiveVizSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveVizSettings_relativeOrbitChief_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveVizSettings_relativeOrbitChief_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->relativeOrbitChief = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveVizSettings_relativeOrbitChief_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LiveVizSettings *arg1 = (LiveVizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LiveVizSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveVizSettings_relativeOrbitChief_get" "', argument " "1"" of type '" "LiveVizSettings *""'"); 
  }
  arg1 = reinterpret_cast< LiveVizSettings * >(argp1);
  result = (std::string *) & ((arg1)->relativeOrbitChief);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LiveVizSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LiveVizSettings *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LiveVizSettings", 0, 0, 0)) SWIG_fail;
  result = (LiveVizSettings *)new LiveVizSettings();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LiveVizSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LiveVizSettings(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LiveVizSettings *arg1 = (LiveVizSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LiveVizSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LiveVizSettings" "', argument " "1"" of type '" "LiveVizSettings *""'"); 
  }
  arg1 = reinterpret_cast< LiveVizSettings * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LiveVizSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LiveVizSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LiveVizSettings_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GravBodyInfo_bodyName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GravBodyInfo_bodyName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_bodyName_set" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GravBodyInfo_bodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GravBodyInfo_bodyName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->bodyName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_bodyName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_bodyName_get" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  result = (std::string *) & ((arg1)->bodyName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_mu_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GravBodyInfo_mu_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_mu_set" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GravBodyInfo_mu_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->mu = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_mu_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_mu_get" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  result = (double) ((arg1)->mu);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_radEquator_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GravBodyInfo_radEquator_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_radEquator_set" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GravBodyInfo_radEquator_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radEquator = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_radEquator_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_radEquator_get" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  result = (double) ((arg1)->radEquator);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_radiusRatio_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GravBodyInfo_radiusRatio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_radiusRatio_set" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GravBodyInfo_radiusRatio_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radiusRatio = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_radiusRatio_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_radiusRatio_get" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  result = (double) ((arg1)->radiusRatio);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_modelDictionaryKey_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GravBodyInfo_modelDictionaryKey_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_modelDictionaryKey_set" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GravBodyInfo_modelDictionaryKey_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GravBodyInfo_modelDictionaryKey_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->modelDictionaryKey = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GravBodyInfo_modelDictionaryKey_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GravBodyInfo_modelDictionaryKey_get" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  result = (std::string *) & ((arg1)->modelDictionaryKey);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GravBodyInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_GravBodyInfo", 0, 0, 0)) SWIG_fail;
  result = (GravBodyInfo *)new GravBodyInfo();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GravBodyInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GravBodyInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GravBodyInfo *arg1 = (GravBodyInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GravBodyInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GravBodyInfo" "', argument " "1"" of type '" "GravBodyInfo *""'"); 
  }
  arg1 = reinterpret_cast< GravBodyInfo * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GravBodyInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GravBodyInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GravBodyInfo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_r_BN_N_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_r_BN_N_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_r_BN_N_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->r_BN_N[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_r_BN_N_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_r_BN_N_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->r_BN_N);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_v_BN_N_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_v_BN_N_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_v_BN_N_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->v_BN_N[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_v_BN_N_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_v_BN_N_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->v_BN_N);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_r_CN_N_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_r_CN_N_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_r_CN_N_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->r_CN_N[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_r_CN_N_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_r_CN_N_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->r_CN_N);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_v_CN_N_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_v_CN_N_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_v_CN_N_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->v_CN_N[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_v_CN_N_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_v_CN_N_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->v_CN_N);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_sigma_BN_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_sigma_BN_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_sigma_BN_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->sigma_BN[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_sigma_BN_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_sigma_BN_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->sigma_BN);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_omega_BN_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_omega_BN_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_omega_BN_B_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->omega_BN_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_omega_BN_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_omega_BN_B_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->omega_BN_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_omegaDot_BN_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_omegaDot_BN_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_omegaDot_BN_B_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->omegaDot_BN_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_omegaDot_BN_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_omegaDot_BN_B_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->omegaDot_BN_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_TotalAccumDVBdy_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_TotalAccumDVBdy_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_TotalAccumDVBdy_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->TotalAccumDVBdy[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_TotalAccumDVBdy_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_TotalAccumDVBdy_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->TotalAccumDVBdy);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_TotalAccumDV_BN_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_TotalAccumDV_BN_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_TotalAccumDV_BN_B_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->TotalAccumDV_BN_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_TotalAccumDV_BN_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_TotalAccumDV_BN_B_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->TotalAccumDV_BN_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_nonConservativeAccelpntB_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_nonConservativeAccelpntB_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_nonConservativeAccelpntB_B_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->nonConservativeAccelpntB_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_nonConservativeAccelpntB_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_nonConservativeAccelpntB_B_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->nonConservativeAccelpntB_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_MRPSwitchCount_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SCStatesMsgPayload_MRPSwitchCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_MRPSwitchCount_set" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCStatesMsgPayload_MRPSwitchCount_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  if (arg1) (arg1)->MRPSwitchCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCStatesMsgPayload_MRPSwitchCount_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  uint64_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCStatesMsgPayload_MRPSwitchCount_get" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  result = (uint64_t) ((arg1)->MRPSwitchCount);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCStatesMsgPayload(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SCStatesMsgPayload", 0, 0, 0)) SWIG_fail;
  result = (SCStatesMsgPayload *)new SCStatesMsgPayload();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SCStatesMsgPayload, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SCStatesMsgPayload(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SCStatesMsgPayload *arg1 = (SCStatesMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SCStatesMsgPayload, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCStatesMsgPayload" "', argument " "1"" of type '" "SCStatesMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< SCStatesMsgPayload * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SCStatesMsgPayload_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SCStatesMsgPayload, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SCStatesMsgPayload_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_rWB_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_rWB_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_rWB_B_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->rWB_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_rWB_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_rWB_B_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->rWB_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_gsHat_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_gsHat_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_gsHat_B_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->gsHat_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_gsHat_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_gsHat_B_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->gsHat_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_w2Hat0_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_w2Hat0_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_w2Hat0_B_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->w2Hat0_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_w2Hat0_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_w2Hat0_B_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->w2Hat0_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_w3Hat0_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_w3Hat0_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_w3Hat0_B_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->w3Hat0_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_w3Hat0_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_w3Hat0_B_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->w3Hat0_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_mass_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_mass_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_mass_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_mass_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->mass = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_mass_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_mass_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->mass);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_theta_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_theta_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_theta_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_theta_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_theta_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_theta_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->theta);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Omega_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_Omega_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Omega_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_Omega_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Omega = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Omega_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Omega_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->Omega);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Js_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_Js_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Js_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_Js_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Js = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Js_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Js_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->Js);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Jt_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_Jt_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Jt_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_Jt_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Jt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Jt_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Jt_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->Jt);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Jg_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_Jg_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Jg_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_Jg_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Jg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Jg_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Jg_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->Jg);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_U_s_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_U_s_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_U_s_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_U_s_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->U_s = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_U_s_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_U_s_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->U_s);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_U_d_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_U_d_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_U_d_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_U_d_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->U_d = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_U_d_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_U_d_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->U_d);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_d_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_d_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_d_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_d_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->d = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_d_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_d_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->d);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_J13_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_J13_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_J13_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_J13_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->J13 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_J13_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_J13_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->J13);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_u_current_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_u_current_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_u_current_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_u_current_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->u_current = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_u_current_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_u_current_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->u_current);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_frictionTorque_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_frictionTorque_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_frictionTorque_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_frictionTorque_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->frictionTorque = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_frictionTorque_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_frictionTorque_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->frictionTorque);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_u_max_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_u_max_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_u_max_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_u_max_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->u_max = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_u_max_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_u_max_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->u_max);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_u_min_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_u_min_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_u_min_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_u_min_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->u_min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_u_min_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_u_min_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->u_min);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_u_f_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_u_f_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_u_f_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_u_f_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->u_f = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_u_f_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_u_f_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->u_f);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Omega_max_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_Omega_max_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Omega_max_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_Omega_max_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Omega_max = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_Omega_max_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_Omega_max_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->Omega_max);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_P_max_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_P_max_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_P_max_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_P_max_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->P_max = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_P_max_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_P_max_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->P_max);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_linearFrictionRatio_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_linearFrictionRatio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_linearFrictionRatio_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgPayload_linearFrictionRatio_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->linearFrictionRatio = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_linearFrictionRatio_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_linearFrictionRatio_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result = (double) ((arg1)->linearFrictionRatio);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_RWModel_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  RWModels arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgPayload_RWModel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_RWModel_set" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_RWModels,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgPayload_RWModel_set" "', argument " "2"" of type '" "RWModels""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgPayload_RWModel_set" "', argument " "2"" of type '" "RWModels""'");
    } else {
      RWModels * temp = reinterpret_cast< RWModels * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->RWModel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgPayload_RWModel_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  RWModels result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgPayload_RWModel_get" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  result =  ((arg1)->RWModel);
  resultobj = SWIG_NewPointerObj((new RWModels(result)), SWIGTYPE_p_RWModels, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgPayload(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RWConfigLogMsgPayload", 0, 0, 0)) SWIG_fail;
  result = (RWConfigLogMsgPayload *)new RWConfigLogMsgPayload();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RWConfigLogMsgPayload, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RWConfigLogMsgPayload(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RWConfigLogMsgPayload *arg1 = (RWConfigLogMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_RWConfigLogMsgPayload, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RWConfigLogMsgPayload" "', argument " "1"" of type '" "RWConfigLogMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< RWConfigLogMsgPayload * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RWConfigLogMsgPayload_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RWConfigLogMsgPayload, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RWConfigLogMsgPayload_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_THROutputMsgPayload_maxThrust_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgPayload_maxThrust_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_maxThrust_set" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgPayload_maxThrust_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->maxThrust = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_maxThrust_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_maxThrust_get" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  result = (double) ((arg1)->maxThrust);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrustFactor_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgPayload_thrustFactor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrustFactor_set" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgPayload_thrustFactor_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->thrustFactor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrustFactor_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrustFactor_get" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  result = (double) ((arg1)->thrustFactor);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrustForce_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgPayload_thrustForce_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrustForce_set" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgPayload_thrustForce_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->thrustForce = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrustForce_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrustForce_get" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  result = (double) ((arg1)->thrustForce);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrustForce_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgPayload_thrustForce_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrustForce_B_set" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->thrustForce_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrustForce_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrustForce_B_get" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->thrustForce_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrustTorquePntB_B_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgPayload_thrustTorquePntB_B_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrustTorquePntB_B_set" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->thrustTorquePntB_B[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrustTorquePntB_B_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrustTorquePntB_B_get" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->thrustTorquePntB_B);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrusterLocation_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgPayload_thrusterLocation_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrusterLocation_set" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->thrusterLocation[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrusterLocation_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrusterLocation_get" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->thrusterLocation);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrusterDirection_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[3] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgPayload_thrusterDirection_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrusterDirection_set" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  {
    int i;
    void *blankPtr = 0 ;
    int resOut = 0 ;
    if (!PySequence_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_ValueError,"Expected a sequence");
      return NULL;
    }
    if (PySequence_Length(swig_obj[1]) > 3) {
      printf("Value: %d\n", 3);
      PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected 3 elements");
      return NULL;
    }
    memset(temp2, 0x0, 3*sizeof(double));
    for (i = 0; i < PySequence_Length(swig_obj[1]); i++) {
      PyObject *o = PySequence_GetItem(swig_obj[1],i);
      if (PyNumber_Check(o)) {
        temp2[i] = (double)PyFloat_AsDouble(o);
      } else {
        resOut = SWIG_ConvertPtr(o, &blankPtr,SWIGTYPE_p_double, 0 |  0 );
        if (!SWIG_IsOK(resOut)) {
          SWIG_exception_fail(SWIG_ArgError(resOut), "Could not convert that double into a pointer for some reason.  This is an ugly SWIG failure.  Good luck.\n");
          return NULL;
        }
        memcpy(&(temp2[i]), blankPtr, sizeof(double));
      }
    }
    arg2 = temp2;
  }
  {
    int i;
    for (i = 0; i < 3; i++) {
      memcpy(&(arg1->thrusterDirection[i]), &(arg2[i]), sizeof(double));
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgPayload_thrusterDirection_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgPayload_thrusterDirection_get" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  result = (double *)(double *) ((arg1)->thrusterDirection);
  {
    int i;
    resultobj = PyList_New(0);
    PyObject *locOutObj = 0;
    for (i = 0; i < 3; i++) {
      locOutObj = SWIG_NewPointerObj(SWIG_as_voidptr(&(result[i])), SWIGTYPE_p_double, 0 |  0 );
      
      if(PyNumber_Check(locOutObj)){
        PyObject *outObject = PyFloat_FromDouble((double) result[i]);
        PyList_Append(resultobj,outObject);
        Py_DECREF(outObject);
        Py_DECREF(locOutObj);
      }
      else
      {
        PyList_SetItem(resultobj, i, locOutObj);
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgPayload(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_THROutputMsgPayload", 0, 0, 0)) SWIG_fail;
  result = (THROutputMsgPayload *)new THROutputMsgPayload();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_THROutputMsgPayload, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_THROutputMsgPayload(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  THROutputMsgPayload *arg1 = (THROutputMsgPayload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_THROutputMsgPayload, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_THROutputMsgPayload" "', argument " "1"" of type '" "THROutputMsgPayload *""'"); 
  }
  arg1 = reinterpret_cast< THROutputMsgPayload * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *THROutputMsgPayload_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_THROutputMsgPayload, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *THROutputMsgPayload_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VizThrConfig_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_iterator" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_ThrClusterMap_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___nonzero__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (bool)std_vector_Sl_ThrClusterMap_Sg____nonzero__((std::vector< ThrClusterMap > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___bool__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (bool)std_vector_Sl_ThrClusterMap_Sg____bool__((std::vector< ThrClusterMap > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___len__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = std_vector_Sl_ThrClusterMap_Sg____len__((std::vector< ThrClusterMap > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::difference_type arg2 ;
  std::vector< ThrClusterMap >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizThrConfig___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___getslice__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig___getslice__" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VizThrConfig___getslice__" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ThrClusterMap >::difference_type >(val3);
  try {
    result = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)std_vector_Sl_ThrClusterMap_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::difference_type arg2 ;
  std::vector< ThrClusterMap >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___setslice__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig___setslice__" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VizThrConfig___setslice__" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ThrClusterMap >::difference_type >(val3);
  try {
    std_vector_Sl_ThrClusterMap_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::difference_type arg2 ;
  std::vector< ThrClusterMap >::difference_type arg3 ;
  std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___setslice__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig___setslice__" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VizThrConfig___setslice__" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ThrClusterMap >::difference_type >(val3);
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VizThrConfig___setslice__" "', argument " "4"" of type '" "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig___setslice__" "', argument " "4"" of type '" "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_ThrClusterMap_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VizThrConfig___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VizThrConfig___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VizThrConfig___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VizThrConfig___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ThrClusterMap >::__setslice__(std::vector< ThrClusterMap >::difference_type,std::vector< ThrClusterMap >::difference_type)\n"
    "    std::vector< ThrClusterMap >::__setslice__(std::vector< ThrClusterMap >::difference_type,std::vector< ThrClusterMap >::difference_type,std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::difference_type arg2 ;
  std::vector< ThrClusterMap >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizThrConfig___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___delslice__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig___delslice__" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VizThrConfig___delslice__" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ThrClusterMap >::difference_type >(val3);
  try {
    std_vector_Sl_ThrClusterMap_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___delitem__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig___delitem__" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::difference_type >(val2);
  try {
    std_vector_Sl_ThrClusterMap_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___getitem__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)std_vector_Sl_ThrClusterMap_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___setitem__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VizThrConfig___setitem__" "', argument " "3"" of type '" "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig___setitem__" "', argument " "3"" of type '" "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_ThrClusterMap_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___setitem__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_ThrClusterMap_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___delitem__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_ThrClusterMap_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VizThrConfig___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VizThrConfig___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VizThrConfig___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VizThrConfig___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ThrClusterMap >::__delitem__(std::vector< ThrClusterMap >::difference_type)\n"
    "    std::vector< ThrClusterMap >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< ThrClusterMap >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___getitem__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig___getitem__" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::difference_type >(val2);
  try {
    result = (std::vector< ThrClusterMap >::value_type *) &std_vector_Sl_ThrClusterMap_Sg____getitem____SWIG_1((std::vector< ThrClusterMap > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ThrClusterMap, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ThrClusterMap >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VizThrConfig___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VizThrConfig___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VizThrConfig___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VizThrConfig___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ThrClusterMap >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< ThrClusterMap >::__getitem__(std::vector< ThrClusterMap >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::difference_type arg2 ;
  std::vector< ThrClusterMap >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig___setitem__" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig___setitem__" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ThrClusterMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VizThrConfig___setitem__" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig___setitem__" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ThrClusterMap >::value_type * >(argp3);
  try {
    std_vector_Sl_ThrClusterMap_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(ThrClusterMap const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VizThrConfig___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VizThrConfig___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VizThrConfig___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ThrClusterMap, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VizThrConfig___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VizThrConfig___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ThrClusterMap >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &)\n"
    "    std::vector< ThrClusterMap >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< ThrClusterMap >::__setitem__(std::vector< ThrClusterMap >::difference_type,std::vector< ThrClusterMap >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_pop" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  try {
    result = std_vector_Sl_ThrClusterMap_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ThrClusterMap >::value_type(result)), SWIGTYPE_p_ThrClusterMap, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizThrConfig_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_append" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ThrClusterMap,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizThrConfig_append" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig_append" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ThrClusterMap >::value_type * >(argp2);
  std_vector_Sl_ThrClusterMap_Sg__append(arg1,(ThrClusterMap const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VizThrConfig__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< ThrClusterMap > *)new std::vector< ThrClusterMap >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VizThrConfig__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< ThrClusterMap > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VizThrConfig" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VizThrConfig" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< ThrClusterMap > *)new std::vector< ThrClusterMap >((std::vector< ThrClusterMap > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_empty" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (bool)((std::vector< ThrClusterMap > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_size" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = ((std::vector< ThrClusterMap > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizThrConfig_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_swap" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizThrConfig_swap" "', argument " "2"" of type '" "std::vector< ThrClusterMap > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig_swap" "', argument " "2"" of type '" "std::vector< ThrClusterMap > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_begin" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ThrClusterMap >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_end" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ThrClusterMap >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_rbegin" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ThrClusterMap >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_rend" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ThrClusterMap >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_clear" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< ThrClusterMap > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_get_allocator" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = ((std::vector< ThrClusterMap > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< ThrClusterMap >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_ThrClusterMap_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VizThrConfig__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< ThrClusterMap > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VizThrConfig" "', argument " "1"" of type '" "std::vector< ThrClusterMap >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ThrClusterMap >::size_type >(val1);
  result = (std::vector< ThrClusterMap > *)new std::vector< ThrClusterMap >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_pop_back" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_resize" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig_resize" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< ThrClusterMap >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_erase" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_erase" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_erase" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::iterator""'");
    }
  }
  result = std_vector_Sl_ThrClusterMap_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ThrClusterMap >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::iterator arg2 ;
  std::vector< ThrClusterMap >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< ThrClusterMap >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_erase" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_erase" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_erase" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_erase" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_erase" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::iterator""'");
    }
  }
  result = std_vector_Sl_ThrClusterMap_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ThrClusterMap >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VizThrConfig_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VizThrConfig_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VizThrConfig_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VizThrConfig_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ThrClusterMap >::erase(std::vector< ThrClusterMap >::iterator)\n"
    "    std::vector< ThrClusterMap >::erase(std::vector< ThrClusterMap >::iterator,std::vector< ThrClusterMap >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VizThrConfig__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap >::size_type arg1 ;
  std::vector< ThrClusterMap >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< ThrClusterMap > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VizThrConfig" "', argument " "1"" of type '" "std::vector< ThrClusterMap >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ThrClusterMap >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ThrClusterMap,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VizThrConfig" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VizThrConfig" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ThrClusterMap >::value_type * >(argp2);
  result = (std::vector< ThrClusterMap > *)new std::vector< ThrClusterMap >(arg1,(std::vector< ThrClusterMap >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VizThrConfig(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VizThrConfig", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_VizThrConfig__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VizThrConfig__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VizThrConfig__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ThrClusterMap, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VizThrConfig__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VizThrConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ThrClusterMap >::vector()\n"
    "    std::vector< ThrClusterMap >::vector(std::vector< ThrClusterMap > const &)\n"
    "    std::vector< ThrClusterMap >::vector(std::vector< ThrClusterMap >::size_type)\n"
    "    std::vector< ThrClusterMap >::vector(std::vector< ThrClusterMap >::size_type,std::vector< ThrClusterMap >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizThrConfig_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_push_back" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ThrClusterMap,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VizThrConfig_push_back" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig_push_back" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ThrClusterMap >::value_type * >(argp2);
  (arg1)->push_back((std::vector< ThrClusterMap >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_front" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (std::vector< ThrClusterMap >::value_type *) &((std::vector< ThrClusterMap > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ThrClusterMap, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ThrClusterMap >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_back" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = (std::vector< ThrClusterMap >::value_type *) &((std::vector< ThrClusterMap > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ThrClusterMap, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ThrClusterMap >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::size_type arg2 ;
  std::vector< ThrClusterMap >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizThrConfig_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_assign" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig_assign" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ThrClusterMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VizThrConfig_assign" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig_assign" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ThrClusterMap >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< ThrClusterMap >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::size_type arg2 ;
  std::vector< ThrClusterMap >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_resize" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig_resize" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ThrClusterMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VizThrConfig_resize" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig_resize" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ThrClusterMap >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< ThrClusterMap >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VizThrConfig_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VizThrConfig_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ThrClusterMap, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VizThrConfig_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VizThrConfig_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ThrClusterMap >::resize(std::vector< ThrClusterMap >::size_type)\n"
    "    std::vector< ThrClusterMap >::resize(std::vector< ThrClusterMap >::size_type,std::vector< ThrClusterMap >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::iterator arg2 ;
  std::vector< ThrClusterMap >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< ThrClusterMap >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_insert" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_insert" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_insert" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ThrClusterMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VizThrConfig_insert" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig_insert" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ThrClusterMap >::value_type * >(argp3);
  result = std_vector_Sl_ThrClusterMap_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(ThrClusterMap const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ThrClusterMap >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::iterator arg2 ;
  std::vector< ThrClusterMap >::size_type arg3 ;
  std::vector< ThrClusterMap >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_insert" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_insert" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VizThrConfig_insert" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VizThrConfig_insert" "', argument " "3"" of type '" "std::vector< ThrClusterMap >::size_type""'");
  } 
  arg3 = static_cast< std::vector< ThrClusterMap >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ThrClusterMap,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VizThrConfig_insert" "', argument " "4"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VizThrConfig_insert" "', argument " "4"" of type '" "std::vector< ThrClusterMap >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< ThrClusterMap >::value_type * >(argp4);
  std_vector_Sl_ThrClusterMap_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(ThrClusterMap const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VizThrConfig_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ThrClusterMap, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VizThrConfig_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ThrClusterMap >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ThrClusterMap, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VizThrConfig_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VizThrConfig_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ThrClusterMap >::insert(std::vector< ThrClusterMap >::iterator,std::vector< ThrClusterMap >::value_type const &)\n"
    "    std::vector< ThrClusterMap >::insert(std::vector< ThrClusterMap >::iterator,std::vector< ThrClusterMap >::size_type,std::vector< ThrClusterMap >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  std::vector< ThrClusterMap >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VizThrConfig_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_reserve" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VizThrConfig_reserve" "', argument " "2"" of type '" "std::vector< ThrClusterMap >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ThrClusterMap >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VizThrConfig_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ThrClusterMap >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VizThrConfig_capacity" "', argument " "1"" of type '" "std::vector< ThrClusterMap > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  result = ((std::vector< ThrClusterMap > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VizThrConfig(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ThrClusterMap > *arg1 = (std::vector< ThrClusterMap > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VizThrConfig" "', argument " "1"" of type '" "std::vector< ThrClusterMap > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ThrClusterMap > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VizThrConfig_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VizThrConfig_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_iterator" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____nonzero__((std::vector< std::vector< ThrClusterMap > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___bool__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____bool__((std::vector< std::vector< ThrClusterMap > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___len__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____len__((std::vector< std::vector< ThrClusterMap > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg2 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThrClusterMapVectorVector___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *)std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg2 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThrClusterMapVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg2 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg3 ;
  std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThrClusterMapVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val3);
  {
    std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *ptr = (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThrClusterMapVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ThrClusterMapVectorVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThrClusterMapVectorVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ThrClusterMapVectorVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< ThrClusterMap > >::__setslice__(std::vector< std::vector< ThrClusterMap > >::difference_type,std::vector< std::vector< ThrClusterMap > >::difference_type)\n"
    "    std::vector< std::vector< ThrClusterMap > >::__setslice__(std::vector< std::vector< ThrClusterMap > >::difference_type,std::vector< std::vector< ThrClusterMap > >::difference_type,std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg2 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThrClusterMapVectorVector___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *)std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *ptr = (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ThrClusterMapVectorVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThrClusterMapVectorVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ThrClusterMapVectorVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< ThrClusterMap > >::__delitem__(std::vector< std::vector< ThrClusterMap > >::difference_type)\n"
    "    std::vector< std::vector< ThrClusterMap > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< ThrClusterMap > >::value_type *) &std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< ThrClusterMap > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< ThrClusterMap > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ThrClusterMapVectorVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThrClusterMapVectorVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ThrClusterMapVectorVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< ThrClusterMap > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< ThrClusterMap > >::__getitem__(std::vector< std::vector< ThrClusterMap > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::difference_type arg2 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::difference_type >(val2);
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ThrClusterMapVectorVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThrClusterMapVectorVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThrClusterMapVectorVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ThrClusterMapVectorVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< ThrClusterMap > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > const &)\n"
    "    std::vector< std::vector< ThrClusterMap > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< ThrClusterMap > >::__setitem__(std::vector< std::vector< ThrClusterMap > >::difference_type,std::vector< std::vector< ThrClusterMap > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_append" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThrClusterMapVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__append(arg1,(std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThrClusterMapVectorVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< ThrClusterMap > > *)new std::vector< std::vector< ThrClusterMap > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThrClusterMapVectorVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< ThrClusterMap > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *ptr = (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThrClusterMapVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThrClusterMapVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< ThrClusterMap > > *)new std::vector< std::vector< ThrClusterMap > >((std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_empty" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (bool)((std::vector< std::vector< ThrClusterMap > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_size" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = ((std::vector< std::vector< ThrClusterMap > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_swap" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThrClusterMapVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_begin" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< ThrClusterMap > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_end" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< ThrClusterMap > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< ThrClusterMap > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_rend" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< ThrClusterMap > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = ((std::vector< std::vector< ThrClusterMap > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< ThrClusterMap > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThrClusterMapVectorVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< ThrClusterMap > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThrClusterMapVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< ThrClusterMap > >::size_type >(val1);
  result = (std::vector< std::vector< ThrClusterMap > > *)new std::vector< std::vector< ThrClusterMap > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< ThrClusterMap > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< ThrClusterMap > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::iterator arg2 ;
  std::vector< std::vector< ThrClusterMap > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< ThrClusterMap > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< ThrClusterMap > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ThrClusterMapVectorVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ThrClusterMapVectorVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ThrClusterMapVectorVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< ThrClusterMap > >::erase(std::vector< std::vector< ThrClusterMap > >::iterator)\n"
    "    std::vector< std::vector< ThrClusterMap > >::erase(std::vector< std::vector< ThrClusterMap > >::iterator,std::vector< std::vector< ThrClusterMap > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThrClusterMapVectorVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > >::size_type arg1 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< ThrClusterMap > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThrClusterMapVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< ThrClusterMap > >::size_type >(val1);
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ThrClusterMapVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThrClusterMapVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< ThrClusterMap > > *)new std::vector< std::vector< ThrClusterMap > >(arg1,(std::vector< std::vector< ThrClusterMap > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThrClusterMapVectorVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ThrClusterMapVectorVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ThrClusterMapVectorVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThrClusterMapVectorVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThrClusterMapVectorVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ThrClusterMapVectorVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ThrClusterMapVectorVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< ThrClusterMap > >::vector()\n"
    "    std::vector< std::vector< ThrClusterMap > >::vector(std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > const &)\n"
    "    std::vector< std::vector< ThrClusterMap > >::vector(std::vector< std::vector< ThrClusterMap > >::size_type)\n"
    "    std::vector< std::vector< ThrClusterMap > >::vector(std::vector< std::vector< ThrClusterMap > >::size_type,std::vector< std::vector< ThrClusterMap > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_push_back" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThrClusterMapVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< ThrClusterMap > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_front" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (std::vector< std::vector< ThrClusterMap > >::value_type *) &((std::vector< std::vector< ThrClusterMap > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< ThrClusterMap > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_back" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = (std::vector< std::vector< ThrClusterMap > >::value_type *) &((std::vector< std::vector< ThrClusterMap > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< ThrClusterMap > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::size_type arg2 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_assign" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector_assign" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::size_type >(val2);
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThrClusterMapVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< ThrClusterMap > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::size_type arg2 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::size_type >(val2);
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThrClusterMapVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< ThrClusterMap > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThrClusterMapVectorVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThrClusterMapVectorVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ThrClusterMapVectorVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< ThrClusterMap > >::resize(std::vector< std::vector< ThrClusterMap > >::size_type)\n"
    "    std::vector< std::vector< ThrClusterMap > >::resize(std::vector< std::vector< ThrClusterMap > >::size_type,std::vector< std::vector< ThrClusterMap > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::iterator arg2 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< ThrClusterMap > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
    }
  }
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< ThrClusterMap > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::iterator arg2 ;
  std::vector< std::vector< ThrClusterMap > >::size_type arg3 ;
  std::vector< std::vector< ThrClusterMap > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< ThrClusterMap > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< ThrClusterMap > >::size_type >(val3);
  {
    std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *ptr = (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThrClusterMapVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThrClusterMapVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< ThrClusterMap > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_ThrClusterMap_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThrClusterMapVectorVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< ThrClusterMap > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThrClusterMapVectorVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ThrClusterMapVectorVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< ThrClusterMap > >::insert(std::vector< std::vector< ThrClusterMap > >::iterator,std::vector< std::vector< ThrClusterMap > >::value_type const &)\n"
    "    std::vector< std::vector< ThrClusterMap > >::insert(std::vector< std::vector< ThrClusterMap > >::iterator,std::vector< std::vector< ThrClusterMap > >::size_type,std::vector< std::vector< ThrClusterMap > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  std::vector< std::vector< ThrClusterMap > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ThrClusterMapVectorVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_reserve" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThrClusterMapVectorVector_reserve" "', argument " "2"" of type '" "std::vector< std::vector< ThrClusterMap > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< ThrClusterMap > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThrClusterMapVectorVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< ThrClusterMap > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThrClusterMapVectorVector_capacity" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  result = ((std::vector< std::vector< ThrClusterMap > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThrClusterMapVectorVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< ThrClusterMap > > *arg1 = (std::vector< std::vector< ThrClusterMap > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThrClusterMapVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< ThrClusterMap > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< ThrClusterMap > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThrClusterMapVectorVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ThrClusterMapVectorVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_iterator" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___nonzero__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (bool)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____nonzero__((std::vector< Message< THROutputMsgPayload > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___bool__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (bool)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____bool__((std::vector< Message< THROutputMsgPayload > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___len__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____len__((std::vector< Message< THROutputMsgPayload > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___getslice__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector___getslice__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsVector___getslice__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val3);
  try {
    result = (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___setslice__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector___setslice__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsVector___setslice__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val3);
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg3 ;
  std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___setslice__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector___setslice__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsVector___setslice__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val3);
  {
    std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *ptr = (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "THROutputMsgOutMsgsVector___setslice__" "', argument " "4"" of type '" "std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector___setslice__" "', argument " "4"" of type '" "std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_THROutputMsgOutMsgsVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_THROutputMsgOutMsgsVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > >::__setslice__(std::vector< Message< THROutputMsgPayload > >::difference_type,std::vector< Message< THROutputMsgPayload > >::difference_type)\n"
    "    std::vector< Message< THROutputMsgPayload > >::__setslice__(std::vector< Message< THROutputMsgPayload > >::difference_type,std::vector< Message< THROutputMsgPayload > >::difference_type,std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___delslice__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector___delslice__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsVector___delslice__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val3);
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___delitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector___delitem__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val2);
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___getitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *ptr = (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___delitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > >::__delitem__(std::vector< Message< THROutputMsgPayload > >::difference_type)\n"
    "    std::vector< Message< THROutputMsgPayload > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___getitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector___getitem__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val2);
  try {
    result = (std::vector< Message< THROutputMsgPayload > >::value_type *) &std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____getitem____SWIG_1((std::vector< Message< THROutputMsgPayload > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Message< THROutputMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< Message< THROutputMsgPayload > >::__getitem__(std::vector< Message< THROutputMsgPayload > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MessageT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > >::value_type * >(argp3);
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Message< THROutputMsgPayload > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgOutMsgsVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgOutMsgsVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > const &)\n"
    "    std::vector< Message< THROutputMsgPayload > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< Message< THROutputMsgPayload > >::__setitem__(std::vector< Message< THROutputMsgPayload > >::difference_type,std::vector< Message< THROutputMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Message< THROutputMsgPayload > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_pop" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  try {
    result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Message< THROutputMsgPayload > >::value_type(result)), SWIGTYPE_p_MessageT_THROutputMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_append" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MessageT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgOutMsgsVector_append" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector_append" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > >::value_type * >(argp2);
  std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__append(arg1,(Message< THROutputMsgPayload > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Message< THROutputMsgPayload > > *)new std::vector< Message< THROutputMsgPayload > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Message< THROutputMsgPayload > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *ptr = (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_THROutputMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_THROutputMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Message< THROutputMsgPayload > > *)new std::vector< Message< THROutputMsgPayload > >((std::vector< Message< THROutputMsgPayload > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_empty" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (bool)((std::vector< Message< THROutputMsgPayload > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_size" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = ((std::vector< Message< THROutputMsgPayload > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_swap" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgOutMsgsVector_swap" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector_swap" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_begin" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_end" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_rbegin" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_rend" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_clear" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Message< THROutputMsgPayload > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_get_allocator" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = ((std::vector< Message< THROutputMsgPayload > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Message< THROutputMsgPayload > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_MessageT_THROutputMsgPayload_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Message< THROutputMsgPayload > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_THROutputMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Message< THROutputMsgPayload > >::size_type >(val1);
  result = (std::vector< Message< THROutputMsgPayload > > *)new std::vector< Message< THROutputMsgPayload > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_pop_back" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_resize" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector_resize" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Message< THROutputMsgPayload > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_erase" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_erase" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_erase" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
    }
  }
  result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::iterator arg2 ;
  std::vector< Message< THROutputMsgPayload > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Message< THROutputMsgPayload > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_erase" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_erase" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_erase" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_erase" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_erase" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
    }
  }
  result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_THROutputMsgOutMsgsVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_THROutputMsgOutMsgsVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > >::erase(std::vector< Message< THROutputMsgPayload > >::iterator)\n"
    "    std::vector< Message< THROutputMsgPayload > >::erase(std::vector< Message< THROutputMsgPayload > >::iterator,std::vector< Message< THROutputMsgPayload > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > >::size_type arg1 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Message< THROutputMsgPayload > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_THROutputMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Message< THROutputMsgPayload > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MessageT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_THROutputMsgOutMsgsVector" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_THROutputMsgOutMsgsVector" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > >::value_type * >(argp2);
  result = (std::vector< Message< THROutputMsgPayload > > *)new std::vector< Message< THROutputMsgPayload > >(arg1,(std::vector< Message< THROutputMsgPayload > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_THROutputMsgOutMsgsVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_THROutputMsgOutMsgsVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_THROutputMsgOutMsgsVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_THROutputMsgOutMsgsVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_THROutputMsgOutMsgsVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_THROutputMsgOutMsgsVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > >::vector()\n"
    "    std::vector< Message< THROutputMsgPayload > >::vector(std::vector< Message< THROutputMsgPayload > > const &)\n"
    "    std::vector< Message< THROutputMsgPayload > >::vector(std::vector< Message< THROutputMsgPayload > >::size_type)\n"
    "    std::vector< Message< THROutputMsgPayload > >::vector(std::vector< Message< THROutputMsgPayload > >::size_type,std::vector< Message< THROutputMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_push_back" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MessageT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgOutMsgsVector_push_back" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector_push_back" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Message< THROutputMsgPayload > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_front" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (std::vector< Message< THROutputMsgPayload > >::value_type *) &((std::vector< Message< THROutputMsgPayload > > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Message< THROutputMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_back" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = (std::vector< Message< THROutputMsgPayload > >::value_type *) &((std::vector< Message< THROutputMsgPayload > > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Message< THROutputMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::size_type arg2 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_assign" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector_assign" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MessageT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsVector_assign" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector_assign" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Message< THROutputMsgPayload > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::size_type arg2 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_resize" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector_resize" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MessageT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsVector_resize" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector_resize" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Message< THROutputMsgPayload > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgOutMsgsVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > >::resize(std::vector< Message< THROutputMsgPayload > >::size_type)\n"
    "    std::vector< Message< THROutputMsgPayload > >::resize(std::vector< Message< THROutputMsgPayload > >::size_type,std::vector< Message< THROutputMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::iterator arg2 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Message< THROutputMsgPayload > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MessageT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > >::value_type * >(argp3);
  result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Message< THROutputMsgPayload > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::iterator arg2 ;
  std::vector< Message< THROutputMsgPayload > >::size_type arg3 ;
  std::vector< Message< THROutputMsgPayload > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_MessageT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "4"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsVector_insert" "', argument " "4"" of type '" "std::vector< Message< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > >::value_type * >(argp4);
  std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Message< THROutputMsgPayload > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgOutMsgsVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_THROutputMsgOutMsgsVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > >::insert(std::vector< Message< THROutputMsgPayload > >::iterator,std::vector< Message< THROutputMsgPayload > >::value_type const &)\n"
    "    std::vector< Message< THROutputMsgPayload > >::insert(std::vector< Message< THROutputMsgPayload > >::iterator,std::vector< Message< THROutputMsgPayload > >::size_type,std::vector< Message< THROutputMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  std::vector< Message< THROutputMsgPayload > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_reserve" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsVector_reserve" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsVector_capacity" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  result = ((std::vector< Message< THROutputMsgPayload > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_THROutputMsgOutMsgsVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > > *arg1 = (std::vector< Message< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_THROutputMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *THROutputMsgOutMsgsVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *THROutputMsgOutMsgsVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_iterator" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (bool)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____nonzero__((std::vector< Message< THROutputMsgPayload > * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___bool__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (bool)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____bool__((std::vector< Message< THROutputMsgPayload > * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___len__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____len__((std::vector< Message< THROutputMsgPayload > * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val3);
  try {
    result = (std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val3);
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg3 ;
  std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val3);
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "THROutputMsgOutMsgsPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_THROutputMsgOutMsgsPtrVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_THROutputMsgOutMsgsPtrVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__setslice__(std::vector< Message< THROutputMsgPayload > * >::difference_type,std::vector< Message< THROutputMsgPayload > * >::difference_type)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__setslice__(std::vector< Message< THROutputMsgPayload > * >::difference_type,std::vector< Message< THROutputMsgPayload > * >::difference_type,std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val3);
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val2);
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsPtrVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsPtrVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__delitem__(std::vector< Message< THROutputMsgPayload > * >::difference_type)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val2);
  try {
    result = (std::vector< Message< THROutputMsgPayload > * >::value_type)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____getitem____SWIG_1(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsPtrVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsPtrVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__getitem__(std::vector< Message< THROutputMsgPayload > * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type arg3 = (std::vector< Message< THROutputMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * >::value_type >(argp3);
  try {
    std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsPtrVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgOutMsgsPtrVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgOutMsgsPtrVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::__setitem__(std::vector< Message< THROutputMsgPayload > * >::difference_type,std::vector< Message< THROutputMsgPayload > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_pop" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  try {
    result = (std::vector< Message< THROutputMsgPayload > * >::value_type)std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type arg2 = (std::vector< Message< THROutputMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_append" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgOutMsgsPtrVector_append" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * >::value_type >(argp2);
  std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsPtrVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Message< THROutputMsgPayload > * > *)new std::vector< Message< THROutputMsgPayload > * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsPtrVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Message< THROutputMsgPayload > * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_THROutputMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_THROutputMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Message< THROutputMsgPayload > * > *)new std::vector< Message< THROutputMsgPayload > * >((std::vector< Message< THROutputMsgPayload > * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_empty" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (bool)((std::vector< Message< THROutputMsgPayload > * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_size" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = ((std::vector< Message< THROutputMsgPayload > * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_swap" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgOutMsgsPtrVector_swap" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgOutMsgsPtrVector_swap" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_begin" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_end" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_rend" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_clear" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Message< THROutputMsgPayload > * > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = ((std::vector< Message< THROutputMsgPayload > * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Message< THROutputMsgPayload > * >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsPtrVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Message< THROutputMsgPayload > * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_THROutputMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Message< THROutputMsgPayload > * >::size_type >(val1);
  result = (std::vector< Message< THROutputMsgPayload > * > *)new std::vector< Message< THROutputMsgPayload > * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_resize" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector_resize" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Message< THROutputMsgPayload > * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_erase" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_erase" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_erase" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
    }
  }
  result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::iterator arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Message< THROutputMsgPayload > * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_erase" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_erase" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_erase" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_erase" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_erase" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
    }
  }
  result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_THROutputMsgOutMsgsPtrVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_THROutputMsgOutMsgsPtrVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > * >::erase(std::vector< Message< THROutputMsgPayload > * >::iterator)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::erase(std::vector< Message< THROutputMsgPayload > * >::iterator,std::vector< Message< THROutputMsgPayload > * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsPtrVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * >::size_type arg1 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type arg2 = (std::vector< Message< THROutputMsgPayload > * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Message< THROutputMsgPayload > * > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_THROutputMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Message< THROutputMsgPayload > * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_THROutputMsgOutMsgsPtrVector" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * >::value_type >(argp2);
  result = (std::vector< Message< THROutputMsgPayload > * > *)new std::vector< Message< THROutputMsgPayload > * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgOutMsgsPtrVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_THROutputMsgOutMsgsPtrVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_THROutputMsgOutMsgsPtrVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_THROutputMsgOutMsgsPtrVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_THROutputMsgOutMsgsPtrVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_THROutputMsgOutMsgsPtrVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_THROutputMsgOutMsgsPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > * >::vector()\n"
    "    std::vector< Message< THROutputMsgPayload > * >::vector(std::vector< Message< THROutputMsgPayload > * > const &)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::vector(std::vector< Message< THROutputMsgPayload > * >::size_type)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::vector(std::vector< Message< THROutputMsgPayload > * >::size_type,std::vector< Message< THROutputMsgPayload > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type arg2 = (std::vector< Message< THROutputMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_push_back" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgOutMsgsPtrVector_push_back" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_front" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (std::vector< Message< THROutputMsgPayload > * >::value_type)((std::vector< Message< THROutputMsgPayload > * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_back" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = (std::vector< Message< THROutputMsgPayload > * >::value_type)((std::vector< Message< THROutputMsgPayload > * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::size_type arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type arg3 = (std::vector< Message< THROutputMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_assign" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector_assign" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsPtrVector_assign" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::size_type arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type arg3 = (std::vector< Message< THROutputMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_resize" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector_resize" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsPtrVector_resize" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgOutMsgsPtrVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgOutMsgsPtrVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > * >::resize(std::vector< Message< THROutputMsgPayload > * >::size_type)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::resize(std::vector< Message< THROutputMsgPayload > * >::size_type,std::vector< Message< THROutputMsgPayload > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::iterator arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type arg3 = (std::vector< Message< THROutputMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Message< THROutputMsgPayload > * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * >::value_type >(argp3);
  result = std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< THROutputMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::iterator arg2 ;
  std::vector< Message< THROutputMsgPayload > * >::size_type arg3 ;
  std::vector< Message< THROutputMsgPayload > * >::value_type arg4 = (std::vector< Message< THROutputMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "3"" of type '" "std::vector< Message< THROutputMsgPayload > * >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Message< THROutputMsgPayload > * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "THROutputMsgOutMsgsPtrVector_insert" "', argument " "4"" of type '" "std::vector< Message< THROutputMsgPayload > * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * >::value_type >(argp4);
  std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgOutMsgsPtrVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< THROutputMsgPayload > * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_MessageT_THROutputMsgPayload_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_THROutputMsgOutMsgsPtrVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgOutMsgsPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< THROutputMsgPayload > * >::insert(std::vector< Message< THROutputMsgPayload > * >::iterator,std::vector< Message< THROutputMsgPayload > * >::value_type)\n"
    "    std::vector< Message< THROutputMsgPayload > * >::insert(std::vector< Message< THROutputMsgPayload > * >::iterator,std::vector< Message< THROutputMsgPayload > * >::size_type,std::vector< Message< THROutputMsgPayload > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  std::vector< Message< THROutputMsgPayload > * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgOutMsgsPtrVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_reserve" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgOutMsgsPtrVector_reserve" "', argument " "2"" of type '" "std::vector< Message< THROutputMsgPayload > * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< THROutputMsgPayload > * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgOutMsgsPtrVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< THROutputMsgPayload > * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgOutMsgsPtrVector_capacity" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  result = ((std::vector< Message< THROutputMsgPayload > * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_THROutputMsgOutMsgsPtrVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< THROutputMsgPayload > * > *arg1 = (std::vector< Message< THROutputMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_THROutputMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< THROutputMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< THROutputMsgPayload > * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *THROutputMsgOutMsgsPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *THROutputMsgOutMsgsPtrVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_iterator" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___nonzero__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (bool)std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____nonzero__((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___bool__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (bool)std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____bool__((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___len__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____len__((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___getslice__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector___getslice__" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgInMsgsVector___getslice__" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val3);
  try {
    result = (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *)std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___setslice__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector___setslice__" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgInMsgsVector___setslice__" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val3);
  try {
    std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg3 ;
  std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___setslice__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector___setslice__" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgInMsgsVector___setslice__" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val3);
  {
    std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *ptr = (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "THROutputMsgInMsgsVector___setslice__" "', argument " "4"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector___setslice__" "', argument " "4"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_THROutputMsgInMsgsVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_THROutputMsgInMsgsVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgInMsgsVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__setslice__(std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__setslice__(std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type,std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type,std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___delslice__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector___delslice__" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgInMsgsVector___delslice__" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val3);
  try {
    std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___delitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector___delitem__" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val2);
  try {
    std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___getitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *)std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *ptr = (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___delitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgInMsgsVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgInMsgsVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgInMsgsVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__delitem__(std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___getitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector___getitem__" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val2);
  try {
    result = (std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *) &std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____getitem____SWIG_1((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ReadFunctor< THROutputMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgInMsgsVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgInMsgsVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgInMsgsVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__getitem__(std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::value_type * >(argp3);
  try {
    std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(ReadFunctor< THROutputMsgPayload > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputMsgInMsgsVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgInMsgsVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgInMsgsVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgInMsgsVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > const &)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::__setitem__(std::vector< ReadFunctor< THROutputMsgPayload > >::difference_type,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< ReadFunctor< THROutputMsgPayload > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_pop" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  try {
    result = std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ReadFunctor< THROutputMsgPayload > >::value_type(result)), SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_append" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgInMsgsVector_append" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector_append" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::value_type * >(argp2);
  std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__append(arg1,(ReadFunctor< THROutputMsgPayload > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgInMsgsVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< ReadFunctor< THROutputMsgPayload > > *)new std::vector< ReadFunctor< THROutputMsgPayload > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgInMsgsVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< ReadFunctor< THROutputMsgPayload > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *ptr = (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_THROutputMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_THROutputMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< ReadFunctor< THROutputMsgPayload > > *)new std::vector< ReadFunctor< THROutputMsgPayload > >((std::vector< ReadFunctor< THROutputMsgPayload > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_empty" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (bool)((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_size" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = ((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_swap" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgInMsgsVector_swap" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector_swap" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_begin" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_end" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_rbegin" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< THROutputMsgPayload > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_rend" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< THROutputMsgPayload > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_clear" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< ReadFunctor< THROutputMsgPayload > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_get_allocator" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = ((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< ReadFunctor< THROutputMsgPayload > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgInMsgsVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_THROutputMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::size_type >(val1);
  result = (std::vector< ReadFunctor< THROutputMsgPayload > > *)new std::vector< ReadFunctor< THROutputMsgPayload > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_pop_back" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_resize" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector_resize" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_erase" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_erase" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_erase" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
    }
  }
  result = std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_erase" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_erase" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_erase" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_erase" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_erase" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
    }
  }
  result = std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_THROutputMsgInMsgsVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_THROutputMsgInMsgsVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgInMsgsVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::erase(std::vector< ReadFunctor< THROutputMsgPayload > >::iterator)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::erase(std::vector< ReadFunctor< THROutputMsgPayload > >::iterator,std::vector< ReadFunctor< THROutputMsgPayload > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgInMsgsVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type arg1 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_THROutputMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_THROutputMsgInMsgsVector" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_THROutputMsgInMsgsVector" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::value_type * >(argp2);
  result = (std::vector< ReadFunctor< THROutputMsgPayload > > *)new std::vector< ReadFunctor< THROutputMsgPayload > >(arg1,(std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputMsgInMsgsVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_THROutputMsgInMsgsVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_THROutputMsgInMsgsVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_THROutputMsgInMsgsVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_THROutputMsgInMsgsVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_THROutputMsgInMsgsVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_THROutputMsgInMsgsVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::vector()\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::vector(std::vector< ReadFunctor< THROutputMsgPayload > > const &)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::vector(std::vector< ReadFunctor< THROutputMsgPayload > >::size_type)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::vector(std::vector< ReadFunctor< THROutputMsgPayload > >::size_type,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_push_back" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputMsgInMsgsVector_push_back" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector_push_back" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_front" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *) &((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ReadFunctor< THROutputMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_back" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = (std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *) &((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ReadFunctor< THROutputMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_assign" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector_assign" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgInMsgsVector_assign" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector_assign" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_resize" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector_resize" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgInMsgsVector_resize" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector_resize" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputMsgInMsgsVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgInMsgsVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgInMsgsVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::resize(std::vector< ReadFunctor< THROutputMsgPayload > >::size_type)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::resize(std::vector< ReadFunctor< THROutputMsgPayload > >::size_type,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::value_type * >(argp3);
  result = std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(ReadFunctor< THROutputMsgPayload > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< THROutputMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::iterator arg2 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type arg3 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "3"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "4"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputMsgInMsgsVector_insert" "', argument " "4"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::value_type * >(argp4);
  std_vector_Sl_ReadFunctor_Sl_THROutputMsgPayload_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(ReadFunctor< THROutputMsgPayload > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputMsgInMsgsVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< THROutputMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ReadFunctorT_THROutputMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_THROutputMsgInMsgsVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputMsgInMsgsVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::insert(std::vector< ReadFunctor< THROutputMsgPayload > >::iterator,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)\n"
    "    std::vector< ReadFunctor< THROutputMsgPayload > >::insert(std::vector< ReadFunctor< THROutputMsgPayload > >::iterator,std::vector< ReadFunctor< THROutputMsgPayload > >::size_type,std::vector< ReadFunctor< THROutputMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputMsgInMsgsVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_reserve" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputMsgInMsgsVector_reserve" "', argument " "2"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< THROutputMsgPayload > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputMsgInMsgsVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< THROutputMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputMsgInMsgsVector_capacity" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  result = ((std::vector< ReadFunctor< THROutputMsgPayload > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_THROutputMsgInMsgsVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< THROutputMsgPayload > > *arg1 = (std::vector< ReadFunctor< THROutputMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_THROutputMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< THROutputMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< THROutputMsgPayload > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *THROutputMsgInMsgsVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *THROutputMsgInMsgsVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_iterator" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____nonzero__((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___bool__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____bool__((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___len__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____len__((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputOutMsgsVectorVector___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *)std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputOutMsgsVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg3 ;
  std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputOutMsgsVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val3);
  {
    std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *ptr = (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "THROutputOutMsgsVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_THROutputOutMsgsVectorVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_THROutputOutMsgsVectorVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputOutMsgsVectorVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__setslice__(std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__setslice__(std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type,std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type,std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputOutMsgsVectorVector___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *)std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *ptr = (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputOutMsgsVectorVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputOutMsgsVectorVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputOutMsgsVectorVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__delitem__(std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *) &std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____getitem____SWIG_1((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputOutMsgsVectorVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputOutMsgsVectorVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputOutMsgsVectorVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__getitem__(std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type >(val2);
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_THROutputOutMsgsVectorVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputOutMsgsVectorVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputOutMsgsVectorVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputOutMsgsVectorVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > const &)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::__setitem__(std::vector< std::vector< Message< THROutputMsgPayload > * > >::difference_type,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_append" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputOutMsgsVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__append(arg1,(std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputOutMsgsVectorVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *)new std::vector< std::vector< Message< THROutputMsgPayload > * > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputOutMsgsVectorVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *ptr = (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_THROutputOutMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_THROutputOutMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *)new std::vector< std::vector< Message< THROutputMsgPayload > * > >((std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_empty" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (bool)((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_size" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = ((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_swap" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputOutMsgsVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_begin" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_end" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< THROutputMsgPayload > * > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_rend" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< THROutputMsgPayload > * > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = ((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< Message< THROutputMsgPayload > * > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputOutMsgsVectorVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_THROutputOutMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type >(val1);
  result = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *)new std::vector< std::vector< Message< THROutputMsgPayload > * > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_THROutputOutMsgsVectorVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_THROutputOutMsgsVectorVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputOutMsgsVectorVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::erase(std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::erase(std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator,std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_THROutputOutMsgsVectorVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type arg1 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_THROutputOutMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type >(val1);
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_THROutputOutMsgsVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_THROutputOutMsgsVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *)new std::vector< std::vector< Message< THROutputMsgPayload > * > >(arg1,(std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THROutputOutMsgsVectorVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_THROutputOutMsgsVectorVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_THROutputOutMsgsVectorVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_THROutputOutMsgsVectorVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_THROutputOutMsgsVectorVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_THROutputOutMsgsVectorVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_THROutputOutMsgsVectorVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::vector()\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::vector(std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > const &)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::vector(std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::vector(std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_push_back" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "THROutputOutMsgsVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_front" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *) &((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_back" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = (std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *) &((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_assign" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector_assign" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type >(val2);
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputOutMsgsVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type >(val2);
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputOutMsgsVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_THROutputOutMsgsVectorVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputOutMsgsVectorVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputOutMsgsVectorVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::resize(std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::resize(std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
    }
  }
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator arg2 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type arg3 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type >(val3);
  {
    std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *ptr = (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "THROutputOutMsgsVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_Message_Sl_THROutputMsgPayload_Sg__Sm__Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THROutputOutMsgsVectorVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Message< THROutputMsgPayload >*,std::allocator< Message< THROutputMsgPayload > * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_THROutputOutMsgsVectorVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'THROutputOutMsgsVectorVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::insert(std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)\n"
    "    std::vector< std::vector< Message< THROutputMsgPayload > * > >::insert(std::vector< std::vector< Message< THROutputMsgPayload > * > >::iterator,std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type,std::vector< std::vector< Message< THROutputMsgPayload > * > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "THROutputOutMsgsVectorVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_reserve" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "THROutputOutMsgsVectorVector_reserve" "', argument " "2"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THROutputOutMsgsVectorVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< THROutputMsgPayload > * > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THROutputOutMsgsVectorVector_capacity" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  result = ((std::vector< std::vector< Message< THROutputMsgPayload > * > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_THROutputOutMsgsVectorVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< THROutputMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< THROutputMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_THROutputOutMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< THROutputMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< THROutputMsgPayload > * > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *THROutputOutMsgsVectorVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *THROutputOutMsgsVectorVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_iterator" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___nonzero__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (bool)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____nonzero__((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___bool__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (bool)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____bool__((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___len__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____len__((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___getslice__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector___getslice__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsVector___getslice__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val3);
  try {
    result = (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___setslice__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector___setslice__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsVector___setslice__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val3);
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg3 ;
  std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___setslice__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector___setslice__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsVector___setslice__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val3);
  {
    std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RWConfigLogMsgOutMsgsVector___setslice__" "', argument " "4"" of type '" "std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector___setslice__" "', argument " "4"" of type '" "std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RWConfigLogMsgOutMsgsVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__setslice__(std::vector< Message< RWConfigLogMsgPayload > >::difference_type,std::vector< Message< RWConfigLogMsgPayload > >::difference_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__setslice__(std::vector< Message< RWConfigLogMsgPayload > >::difference_type,std::vector< Message< RWConfigLogMsgPayload > >::difference_type,std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___delslice__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector___delslice__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsVector___delslice__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val3);
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___delitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector___delitem__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val2);
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___getitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___delitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__delitem__(std::vector< Message< RWConfigLogMsgPayload > >::difference_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___getitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector___getitem__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val2);
  try {
    result = (std::vector< Message< RWConfigLogMsgPayload > >::value_type *) &std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____getitem____SWIG_1((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Message< RWConfigLogMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__getitem__(std::vector< Message< RWConfigLogMsgPayload > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > >::value_type * >(argp3);
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Message< RWConfigLogMsgPayload > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > const &)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::__setitem__(std::vector< Message< RWConfigLogMsgPayload > >::difference_type,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Message< RWConfigLogMsgPayload > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_pop" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  try {
    result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Message< RWConfigLogMsgPayload > >::value_type(result)), SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_append" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgOutMsgsVector_append" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector_append" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > >::value_type * >(argp2);
  std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__append(arg1,(Message< RWConfigLogMsgPayload > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Message< RWConfigLogMsgPayload > > *)new std::vector< Message< RWConfigLogMsgPayload > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Message< RWConfigLogMsgPayload > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RWConfigLogMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RWConfigLogMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Message< RWConfigLogMsgPayload > > *)new std::vector< Message< RWConfigLogMsgPayload > >((std::vector< Message< RWConfigLogMsgPayload > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_empty" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (bool)((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_size" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = ((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_swap" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgOutMsgsVector_swap" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector_swap" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_begin" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_end" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_rbegin" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_rend" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_clear" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Message< RWConfigLogMsgPayload > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_get_allocator" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = ((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Message< RWConfigLogMsgPayload > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RWConfigLogMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::size_type >(val1);
  result = (std::vector< Message< RWConfigLogMsgPayload > > *)new std::vector< Message< RWConfigLogMsgPayload > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_pop_back" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_resize" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector_resize" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_erase" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_erase" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_erase" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_erase" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_erase" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_erase" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_erase" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_erase" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::erase(std::vector< Message< RWConfigLogMsgPayload > >::iterator)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::erase(std::vector< Message< RWConfigLogMsgPayload > >::iterator,std::vector< Message< RWConfigLogMsgPayload > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type arg1 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RWConfigLogMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RWConfigLogMsgOutMsgsVector" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RWConfigLogMsgOutMsgsVector" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > >::value_type * >(argp2);
  result = (std::vector< Message< RWConfigLogMsgPayload > > *)new std::vector< Message< RWConfigLogMsgPayload > >(arg1,(std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RWConfigLogMsgOutMsgsVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_RWConfigLogMsgOutMsgsVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RWConfigLogMsgOutMsgsVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RWConfigLogMsgOutMsgsVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RWConfigLogMsgOutMsgsVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RWConfigLogMsgOutMsgsVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::vector()\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::vector(std::vector< Message< RWConfigLogMsgPayload > > const &)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::vector(std::vector< Message< RWConfigLogMsgPayload > >::size_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::vector(std::vector< Message< RWConfigLogMsgPayload > >::size_type,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_push_back" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgOutMsgsVector_push_back" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector_push_back" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_front" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (std::vector< Message< RWConfigLogMsgPayload > >::value_type *) &((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Message< RWConfigLogMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_back" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = (std::vector< Message< RWConfigLogMsgPayload > >::value_type *) &((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Message< RWConfigLogMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_assign" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector_assign" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsVector_assign" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector_assign" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_resize" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector_resize" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsVector_resize" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector_resize" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::resize(std::vector< Message< RWConfigLogMsgPayload > >::size_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::resize(std::vector< Message< RWConfigLogMsgPayload > >::size_type,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > >::value_type * >(argp3);
  result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Message< RWConfigLogMsgPayload > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::iterator arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type arg3 ;
  std::vector< Message< RWConfigLogMsgPayload > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "4"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsVector_insert" "', argument " "4"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > >::value_type * >(argp4);
  std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Message< RWConfigLogMsgPayload > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RWConfigLogMsgOutMsgsVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::insert(std::vector< Message< RWConfigLogMsgPayload > >::iterator,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > >::insert(std::vector< Message< RWConfigLogMsgPayload > >::iterator,std::vector< Message< RWConfigLogMsgPayload > >::size_type,std::vector< Message< RWConfigLogMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_reserve" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsVector_reserve" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsVector_capacity" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  result = ((std::vector< Message< RWConfigLogMsgPayload > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RWConfigLogMsgOutMsgsVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RWConfigLogMsgOutMsgsVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RWConfigLogMsgOutMsgsVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RWConfigLogMsgOutMsgsVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_iterator" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (bool)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____nonzero__((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___bool__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (bool)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____bool__((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___len__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____len__((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val3);
  try {
    result = (std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val3);
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg3 ;
  std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val3);
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsPtrVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RWConfigLogMsgOutMsgsPtrVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__setslice__(std::vector< Message< RWConfigLogMsgPayload > * >::difference_type,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__setslice__(std::vector< Message< RWConfigLogMsgPayload > * >::difference_type,std::vector< Message< RWConfigLogMsgPayload > * >::difference_type,std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val3);
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val2);
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsPtrVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsPtrVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__delitem__(std::vector< Message< RWConfigLogMsgPayload > * >::difference_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val2);
  try {
    result = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____getitem____SWIG_1(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsPtrVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsPtrVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__getitem__(std::vector< Message< RWConfigLogMsgPayload > * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::difference_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type arg3 = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * >::value_type >(argp3);
  try {
    std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsPtrVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsPtrVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsPtrVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::__setitem__(std::vector< Message< RWConfigLogMsgPayload > * >::difference_type,std::vector< Message< RWConfigLogMsgPayload > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_pop" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  try {
    result = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type)std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type arg2 = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_append" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgOutMsgsPtrVector_append" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * >::value_type >(argp2);
  std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsPtrVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< Message< RWConfigLogMsgPayload > * > *)new std::vector< Message< RWConfigLogMsgPayload > * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsPtrVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Message< RWConfigLogMsgPayload > * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RWConfigLogMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RWConfigLogMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Message< RWConfigLogMsgPayload > * > *)new std::vector< Message< RWConfigLogMsgPayload > * >((std::vector< Message< RWConfigLogMsgPayload > * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_empty" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (bool)((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_size" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = ((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_swap" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgOutMsgsPtrVector_swap" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgOutMsgsPtrVector_swap" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_begin" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_end" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_rend" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_clear" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Message< RWConfigLogMsgPayload > * > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = ((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Message< RWConfigLogMsgPayload > * >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsPtrVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RWConfigLogMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::size_type >(val1);
  result = (std::vector< Message< RWConfigLogMsgPayload > * > *)new std::vector< Message< RWConfigLogMsgPayload > * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_resize" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector_resize" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_erase" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_erase" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_erase" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
    }
  }
  result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_erase" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_erase" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_erase" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_erase" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_erase" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
    }
  }
  result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsPtrVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsPtrVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::erase(std::vector< Message< RWConfigLogMsgPayload > * >::iterator)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::erase(std::vector< Message< RWConfigLogMsgPayload > * >::iterator,std::vector< Message< RWConfigLogMsgPayload > * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsPtrVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type arg1 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type arg2 = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RWConfigLogMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RWConfigLogMsgOutMsgsPtrVector" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * >::value_type >(argp2);
  result = (std::vector< Message< RWConfigLogMsgPayload > * > *)new std::vector< Message< RWConfigLogMsgPayload > * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgOutMsgsPtrVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RWConfigLogMsgOutMsgsPtrVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_RWConfigLogMsgOutMsgsPtrVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RWConfigLogMsgOutMsgsPtrVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RWConfigLogMsgOutMsgsPtrVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RWConfigLogMsgOutMsgsPtrVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RWConfigLogMsgOutMsgsPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::vector()\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::vector(std::vector< Message< RWConfigLogMsgPayload > * > const &)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::vector(std::vector< Message< RWConfigLogMsgPayload > * >::size_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::vector(std::vector< Message< RWConfigLogMsgPayload > * >::size_type,std::vector< Message< RWConfigLogMsgPayload > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type arg2 = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_push_back" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgOutMsgsPtrVector_push_back" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_front" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type)((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_back" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type)((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type arg3 = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_assign" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector_assign" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsPtrVector_assign" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type arg3 = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_resize" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector_resize" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsPtrVector_resize" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgOutMsgsPtrVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsPtrVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::resize(std::vector< Message< RWConfigLogMsgPayload > * >::size_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::resize(std::vector< Message< RWConfigLogMsgPayload > * >::size_type,std::vector< Message< RWConfigLogMsgPayload > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type arg3 = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * >::value_type >(argp3);
  result = std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Message< RWConfigLogMsgPayload > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::iterator arg2 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type arg3 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::value_type arg4 = (std::vector< Message< RWConfigLogMsgPayload > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "3"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RWConfigLogMsgOutMsgsPtrVector_insert" "', argument " "4"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * >::value_type >(argp4);
  std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgOutMsgsPtrVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Message< RWConfigLogMsgPayload > * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_MessageT_RWConfigLogMsgPayload_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RWConfigLogMsgOutMsgsPtrVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgOutMsgsPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::insert(std::vector< Message< RWConfigLogMsgPayload > * >::iterator,std::vector< Message< RWConfigLogMsgPayload > * >::value_type)\n"
    "    std::vector< Message< RWConfigLogMsgPayload > * >::insert(std::vector< Message< RWConfigLogMsgPayload > * >::iterator,std::vector< Message< RWConfigLogMsgPayload > * >::size_type,std::vector< Message< RWConfigLogMsgPayload > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgOutMsgsPtrVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_reserve" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgOutMsgsPtrVector_reserve" "', argument " "2"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Message< RWConfigLogMsgPayload > * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgOutMsgsPtrVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Message< RWConfigLogMsgPayload > * >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgOutMsgsPtrVector_capacity" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  result = ((std::vector< Message< RWConfigLogMsgPayload > * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RWConfigLogMsgOutMsgsPtrVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Message< RWConfigLogMsgPayload > * > *arg1 = (std::vector< Message< RWConfigLogMsgPayload > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RWConfigLogMsgOutMsgsPtrVector" "', argument " "1"" of type '" "std::vector< Message< RWConfigLogMsgPayload > * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Message< RWConfigLogMsgPayload > * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RWConfigLogMsgOutMsgsPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RWConfigLogMsgOutMsgsPtrVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_iterator" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___nonzero__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (bool)std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____nonzero__((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___bool__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (bool)std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____bool__((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___len__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____len__((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___getslice__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector___getslice__" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVector___getslice__" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val3);
  try {
    result = (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *)std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___setslice__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector___setslice__" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVector___setslice__" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val3);
  try {
    std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg3 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___setslice__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector___setslice__" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVector___setslice__" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val3);
  {
    std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *ptr = (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RWConfigLogMsgInMsgsVector___setslice__" "', argument " "4"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector___setslice__" "', argument " "4"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RWConfigLogMsgInMsgsVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__setslice__(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__setslice__(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type,std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___delslice__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector___delslice__" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVector___delslice__" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val3);
  try {
    std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___delitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector___delitem__" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val2);
  try {
    std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___getitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *)std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *ptr = (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___delitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__delitem__(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___getitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector___getitem__" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val2);
  try {
    result = (std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *) &std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____getitem____SWIG_1((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__getitem__(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector___setitem__" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type * >(argp3);
  try {
    std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(ReadFunctor< RWConfigLogMsgPayload > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > const &)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::__setitem__(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::difference_type,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< ReadFunctor< RWConfigLogMsgPayload > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_pop" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  try {
    result = std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type(result)), SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_append" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgInMsgsVector_append" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector_append" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type * >(argp2);
  std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__append(arg1,(ReadFunctor< RWConfigLogMsgPayload > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *)new std::vector< ReadFunctor< RWConfigLogMsgPayload > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *ptr = (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RWConfigLogMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RWConfigLogMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *)new std::vector< ReadFunctor< RWConfigLogMsgPayload > >((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_empty" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (bool)((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_size" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = ((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_swap" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgInMsgsVector_swap" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector_swap" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_begin" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_end" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_rbegin" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< RWConfigLogMsgPayload > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_rend" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< RWConfigLogMsgPayload > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_clear" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_get_allocator" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = ((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< ReadFunctor< RWConfigLogMsgPayload > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RWConfigLogMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type >(val1);
  result = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *)new std::vector< ReadFunctor< RWConfigLogMsgPayload > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_pop_back" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_resize" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector_resize" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_erase" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_erase" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_erase" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  result = std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_erase" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_erase" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_erase" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_erase" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_erase" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  result = std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::erase(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::erase(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type arg1 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RWConfigLogMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RWConfigLogMsgInMsgsVector" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RWConfigLogMsgInMsgsVector" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type * >(argp2);
  result = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *)new std::vector< ReadFunctor< RWConfigLogMsgPayload > >(arg1,(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RWConfigLogMsgInMsgsVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_RWConfigLogMsgInMsgsVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RWConfigLogMsgInMsgsVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RWConfigLogMsgInMsgsVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RWConfigLogMsgInMsgsVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RWConfigLogMsgInMsgsVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::vector()\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::vector(std::vector< ReadFunctor< RWConfigLogMsgPayload > > const &)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::vector(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::vector(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_push_back" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgInMsgsVector_push_back" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector_push_back" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_front" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *) &((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_back" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = (std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *) &((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_assign" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector_assign" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVector_assign" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector_assign" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_resize" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector_resize" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVector_resize" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector_resize" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::resize(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::resize(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type * >(argp3);
  result = std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(ReadFunctor< RWConfigLogMsgPayload > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator arg2 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type arg3 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "3"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "4"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVector_insert" "', argument " "4"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type * >(argp4);
  std_vector_Sl_ReadFunctor_Sl_RWConfigLogMsgPayload_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(ReadFunctor< RWConfigLogMsgPayload > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ReadFunctorT_RWConfigLogMsgPayload_t, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RWConfigLogMsgInMsgsVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::insert(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)\n"
    "    std::vector< ReadFunctor< RWConfigLogMsgPayload > >::insert(std::vector< ReadFunctor< RWConfigLogMsgPayload > >::iterator,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type,std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_reserve" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVector_reserve" "', argument " "2"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVector_capacity" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  result = ((std::vector< ReadFunctor< RWConfigLogMsgPayload > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RWConfigLogMsgInMsgsVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ReadFunctor< RWConfigLogMsgPayload > > *arg1 = (std::vector< ReadFunctor< RWConfigLogMsgPayload > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RWConfigLogMsgInMsgsVector" "', argument " "1"" of type '" "std::vector< ReadFunctor< RWConfigLogMsgPayload > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ReadFunctor< RWConfigLogMsgPayload > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RWConfigLogMsgInMsgsVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RWConfigLogMsgInMsgsVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_iterator" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____nonzero__((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___bool__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____bool__((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___len__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____len__((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVectorVector___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *)std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg3 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val3);
  {
    std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *ptr = (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RWConfigLogMsgInMsgsVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVectorVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RWConfigLogMsgInMsgsVectorVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVectorVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__setslice__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__setslice__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type,std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVectorVector___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *)std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *ptr = (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVectorVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVectorVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVectorVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__delitem__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *) &std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____getitem____SWIG_1((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVectorVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVectorVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVectorVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__getitem__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type >(val2);
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVectorVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVectorVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVectorVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVectorVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > const &)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::__setitem__(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::difference_type,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_append" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgInMsgsVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__append(arg1,(std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVectorVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *)new std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVectorVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *ptr = (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RWConfigLogMsgInMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RWConfigLogMsgInMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *)new std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >((std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_empty" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (bool)((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_size" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = ((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_swap" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgInMsgsVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_begin" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_end" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_rend" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = ((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVectorVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RWConfigLogMsgInMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type >(val1);
  result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *)new std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVectorVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVectorVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVectorVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::erase(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::erase(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVectorVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type arg1 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RWConfigLogMsgInMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type >(val1);
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RWConfigLogMsgInMsgsVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RWConfigLogMsgInMsgsVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *)new std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >(arg1,(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RWConfigLogMsgInMsgsVectorVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RWConfigLogMsgInMsgsVectorVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_RWConfigLogMsgInMsgsVectorVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RWConfigLogMsgInMsgsVectorVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RWConfigLogMsgInMsgsVectorVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RWConfigLogMsgInMsgsVectorVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RWConfigLogMsgInMsgsVectorVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::vector()\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::vector(std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > const &)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::vector(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::vector(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_push_back" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RWConfigLogMsgInMsgsVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_front" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *) &((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_back" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *) &((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_assign" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector_assign" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type >(val2);
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type >(val2);
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RWConfigLogMsgInMsgsVectorVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVectorVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVectorVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::resize(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::resize(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
    }
  }
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator arg2 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type arg3 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type >(val3);
  {
    std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *ptr = (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RWConfigLogMsgInMsgsVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_Message_Sl_RWConfigLogMsgPayload_Sg__Sm__Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RWConfigLogMsgInMsgsVectorVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< Message< RWConfigLogMsgPayload >*,std::allocator< Message< RWConfigLogMsgPayload > * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RWConfigLogMsgInMsgsVectorVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RWConfigLogMsgInMsgsVectorVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::insert(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)\n"
    "    std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::insert(std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::iterator,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type,std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RWConfigLogMsgInMsgsVectorVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_reserve" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RWConfigLogMsgInMsgsVectorVector_reserve" "', argument " "2"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RWConfigLogMsgInMsgsVectorVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RWConfigLogMsgInMsgsVectorVector_capacity" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  result = ((std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RWConfigLogMsgInMsgsVectorVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *arg1 = (std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RWConfigLogMsgInMsgsVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RWConfigLogMsgInMsgsVectorVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RWConfigLogMsgInMsgsVectorVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "new_doubleArray", _wrap_new_doubleArray, METH_O, NULL},
	 { "delete_doubleArray", _wrap_delete_doubleArray, METH_O, NULL},
	 { "doubleArray_getitem", _wrap_doubleArray_getitem, METH_VARARGS, NULL},
	 { "doubleArray_setitem", _wrap_doubleArray_setitem, METH_VARARGS, NULL},
	 { "new_longArray", _wrap_new_longArray, METH_O, NULL},
	 { "delete_longArray", _wrap_delete_longArray, METH_O, NULL},
	 { "longArray_getitem", _wrap_longArray_getitem, METH_VARARGS, NULL},
	 { "longArray_setitem", _wrap_longArray_setitem, METH_VARARGS, NULL},
	 { "new_intArray", _wrap_new_intArray, METH_O, NULL},
	 { "delete_intArray", _wrap_delete_intArray, METH_O, NULL},
	 { "intArray_getitem", _wrap_intArray_getitem, METH_VARARGS, NULL},
	 { "intArray_setitem", _wrap_intArray_setitem, METH_VARARGS, NULL},
	 { "new_shortArray", _wrap_new_shortArray, METH_O, NULL},
	 { "delete_shortArray", _wrap_delete_shortArray, METH_O, NULL},
	 { "shortArray_getitem", _wrap_shortArray_getitem, METH_VARARGS, NULL},
	 { "shortArray_setitem", _wrap_shortArray_setitem, METH_VARARGS, NULL},
	 { "printDefaultLogLevel", _wrap_printDefaultLogLevel, METH_NOARGS, NULL},
	 { "setDefaultLogLevel", _wrap_setDefaultLogLevel, METH_O, NULL},
	 { "getDefaultLogLevel", _wrap_getDefaultLogLevel, METH_NOARGS, NULL},
	 { "new_BSKLogger", _wrap_new_BSKLogger, METH_VARARGS, NULL},
	 { "delete_BSKLogger", _wrap_delete_BSKLogger, METH_O, NULL},
	 { "BSKLogger_setLogLevel", _wrap_BSKLogger_setLogLevel, METH_VARARGS, NULL},
	 { "BSKLogger_printLogLevel", _wrap_BSKLogger_printLogLevel, METH_O, NULL},
	 { "BSKLogger_getLogLevel", _wrap_BSKLogger_getLogLevel, METH_O, NULL},
	 { "BSKLogger_bskLog", _wrap_BSKLogger_bskLog, METH_VARARGS, NULL},
	 { "BSKLogger_logLevelMap_set", _wrap_BSKLogger_logLevelMap_set, METH_VARARGS, NULL},
	 { "BSKLogger_logLevelMap_get", _wrap_BSKLogger_logLevelMap_get, METH_O, NULL},
	 { "BSKLogger_swigregister", BSKLogger_swigregister, METH_O, NULL},
	 { "BSKLogger_swiginit", BSKLogger_swiginit, METH_VARARGS, NULL},
	 { "_BSKLogger", _wrap__BSKLogger, METH_NOARGS, NULL},
	 { "_BSKLogger_d", _wrap__BSKLogger_d, METH_O, NULL},
	 { "_printLogLevel", _wrap__printLogLevel, METH_O, NULL},
	 { "_setLogLevel", _wrap__setLogLevel, METH_VARARGS, NULL},
	 { "_bskLog", _wrap__bskLog, METH_VARARGS, NULL},
	 { "new_SysModel", _wrap_new_SysModel, METH_VARARGS, NULL},
	 { "delete_SysModel", _wrap_delete_SysModel, METH_O, NULL},
	 { "SysModel_SelfInit", _wrap_SysModel_SelfInit, METH_O, NULL},
	 { "SysModel_IntegratedInit", _wrap_SysModel_IntegratedInit, METH_O, NULL},
	 { "SysModel_UpdateState", _wrap_SysModel_UpdateState, METH_VARARGS, NULL},
	 { "SysModel_Reset", _wrap_SysModel_Reset, METH_VARARGS, NULL},
	 { "SysModel_ModelTag_set", _wrap_SysModel_ModelTag_set, METH_VARARGS, NULL},
	 { "SysModel_ModelTag_get", _wrap_SysModel_ModelTag_get, METH_O, NULL},
	 { "SysModel_CallCounts_set", _wrap_SysModel_CallCounts_set, METH_VARARGS, NULL},
	 { "SysModel_CallCounts_get", _wrap_SysModel_CallCounts_get, METH_O, NULL},
	 { "SysModel_RNGSeed_set", _wrap_SysModel_RNGSeed_set, METH_VARARGS, NULL},
	 { "SysModel_RNGSeed_get", _wrap_SysModel_RNGSeed_get, METH_O, NULL},
	 { "SysModel_moduleID_set", _wrap_SysModel_moduleID_set, METH_VARARGS, NULL},
	 { "SysModel_moduleID_get", _wrap_SysModel_moduleID_get, METH_O, NULL},
	 { "SysModel_swigregister", SysModel_swigregister, METH_O, NULL},
	 { "SysModel_swiginit", SysModel_swiginit, METH_VARARGS, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "new_DataFileToViz", _wrap_new_DataFileToViz, METH_NOARGS, NULL},
	 { "delete_DataFileToViz", _wrap_delete_DataFileToViz, METH_O, NULL},
	 { "DataFileToViz_Reset", _wrap_DataFileToViz_Reset, METH_VARARGS, NULL},
	 { "DataFileToViz_UpdateState", _wrap_DataFileToViz_UpdateState, METH_VARARGS, NULL},
	 { "DataFileToViz_appendThrPos", _wrap_DataFileToViz_appendThrPos, METH_VARARGS, NULL},
	 { "DataFileToViz_appendThrDir", _wrap_DataFileToViz_appendThrDir, METH_VARARGS, NULL},
	 { "DataFileToViz_appendThrForceMax", _wrap_DataFileToViz_appendThrForceMax, METH_VARARGS, NULL},
	 { "DataFileToViz_appendThrClusterMap", _wrap_DataFileToViz_appendThrClusterMap, METH_VARARGS, NULL},
	 { "DataFileToViz_appendRwPos", _wrap_DataFileToViz_appendRwPos, METH_VARARGS, NULL},
	 { "DataFileToViz_appendRwDir", _wrap_DataFileToViz_appendRwDir, METH_VARARGS, NULL},
	 { "DataFileToViz_appendOmegaMax", _wrap_DataFileToViz_appendOmegaMax, METH_VARARGS, NULL},
	 { "DataFileToViz_appendUMax", _wrap_DataFileToViz_appendUMax, METH_VARARGS, NULL},
	 { "DataFileToViz_setNumOfSatellites", _wrap_DataFileToViz_setNumOfSatellites, METH_VARARGS, NULL},
	 { "DataFileToViz_appendNumOfRWs", _wrap_DataFileToViz_appendNumOfRWs, METH_VARARGS, NULL},
	 { "DataFileToViz_dataFileName_set", _wrap_DataFileToViz_dataFileName_set, METH_VARARGS, NULL},
	 { "DataFileToViz_dataFileName_get", _wrap_DataFileToViz_dataFileName_get, METH_O, NULL},
	 { "DataFileToViz_scStateOutMsgs_set", _wrap_DataFileToViz_scStateOutMsgs_set, METH_VARARGS, NULL},
	 { "DataFileToViz_scStateOutMsgs_get", _wrap_DataFileToViz_scStateOutMsgs_get, METH_O, NULL},
	 { "DataFileToViz_delimiter_set", _wrap_DataFileToViz_delimiter_set, METH_VARARGS, NULL},
	 { "DataFileToViz_delimiter_get", _wrap_DataFileToViz_delimiter_get, METH_O, NULL},
	 { "DataFileToViz_convertPosToMeters_set", _wrap_DataFileToViz_convertPosToMeters_set, METH_VARARGS, NULL},
	 { "DataFileToViz_convertPosToMeters_get", _wrap_DataFileToViz_convertPosToMeters_get, METH_O, NULL},
	 { "DataFileToViz_headerLine_set", _wrap_DataFileToViz_headerLine_set, METH_VARARGS, NULL},
	 { "DataFileToViz_headerLine_get", _wrap_DataFileToViz_headerLine_get, METH_O, NULL},
	 { "DataFileToViz_attitudeType_set", _wrap_DataFileToViz_attitudeType_set, METH_VARARGS, NULL},
	 { "DataFileToViz_attitudeType_get", _wrap_DataFileToViz_attitudeType_get, METH_O, NULL},
	 { "DataFileToViz_thrMsgDataSC_set", _wrap_DataFileToViz_thrMsgDataSC_set, METH_VARARGS, NULL},
	 { "DataFileToViz_thrMsgDataSC_get", _wrap_DataFileToViz_thrMsgDataSC_get, METH_O, NULL},
	 { "DataFileToViz_thrScOutMsgs_set", _wrap_DataFileToViz_thrScOutMsgs_set, METH_VARARGS, NULL},
	 { "DataFileToViz_thrScOutMsgs_get", _wrap_DataFileToViz_thrScOutMsgs_get, METH_O, NULL},
	 { "DataFileToViz_rwScOutMsgs_set", _wrap_DataFileToViz_rwScOutMsgs_set, METH_VARARGS, NULL},
	 { "DataFileToViz_rwScOutMsgs_get", _wrap_DataFileToViz_rwScOutMsgs_get, METH_O, NULL},
	 { "DataFileToViz_bskLogger_set", _wrap_DataFileToViz_bskLogger_set, METH_VARARGS, NULL},
	 { "DataFileToViz_bskLogger_get", _wrap_DataFileToViz_bskLogger_get, METH_O, NULL},
	 { "DataFileToViz_swigregister", DataFileToViz_swigregister, METH_O, NULL},
	 { "DataFileToViz_swiginit", DataFileToViz_swiginit, METH_VARARGS, NULL},
	 { "MsgCurrStatus_lastTimeTag_set", _wrap_MsgCurrStatus_lastTimeTag_set, METH_VARARGS, NULL},
	 { "MsgCurrStatus_lastTimeTag_get", _wrap_MsgCurrStatus_lastTimeTag_get, METH_O, NULL},
	 { "MsgCurrStatus_dataFresh_set", _wrap_MsgCurrStatus_dataFresh_set, METH_VARARGS, NULL},
	 { "MsgCurrStatus_dataFresh_get", _wrap_MsgCurrStatus_dataFresh_get, METH_O, NULL},
	 { "new_MsgCurrStatus", _wrap_new_MsgCurrStatus, METH_NOARGS, NULL},
	 { "delete_MsgCurrStatus", _wrap_delete_MsgCurrStatus, METH_O, NULL},
	 { "MsgCurrStatus_swigregister", MsgCurrStatus_swigregister, METH_O, NULL},
	 { "MsgCurrStatus_swiginit", MsgCurrStatus_swiginit, METH_VARARGS, NULL},
	 { "ThrClusterMap_thrTag_set", _wrap_ThrClusterMap_thrTag_set, METH_VARARGS, NULL},
	 { "ThrClusterMap_thrTag_get", _wrap_ThrClusterMap_thrTag_get, METH_O, NULL},
	 { "ThrClusterMap_color_set", _wrap_ThrClusterMap_color_set, METH_VARARGS, NULL},
	 { "ThrClusterMap_color_get", _wrap_ThrClusterMap_color_get, METH_O, NULL},
	 { "new_ThrClusterMap", _wrap_new_ThrClusterMap, METH_NOARGS, NULL},
	 { "delete_ThrClusterMap", _wrap_delete_ThrClusterMap, METH_O, NULL},
	 { "ThrClusterMap_swigregister", ThrClusterMap_swigregister, METH_O, NULL},
	 { "ThrClusterMap_swiginit", ThrClusterMap_swiginit, METH_VARARGS, NULL},
	 { "PointLine_fromBodyName_set", _wrap_PointLine_fromBodyName_set, METH_VARARGS, NULL},
	 { "PointLine_fromBodyName_get", _wrap_PointLine_fromBodyName_get, METH_O, NULL},
	 { "PointLine_toBodyName_set", _wrap_PointLine_toBodyName_set, METH_VARARGS, NULL},
	 { "PointLine_toBodyName_get", _wrap_PointLine_toBodyName_get, METH_O, NULL},
	 { "PointLine_lineColor_set", _wrap_PointLine_lineColor_set, METH_VARARGS, NULL},
	 { "PointLine_lineColor_get", _wrap_PointLine_lineColor_get, METH_O, NULL},
	 { "new_PointLine", _wrap_new_PointLine, METH_NOARGS, NULL},
	 { "delete_PointLine", _wrap_delete_PointLine, METH_O, NULL},
	 { "PointLine_swigregister", PointLine_swigregister, METH_O, NULL},
	 { "PointLine_swiginit", PointLine_swiginit, METH_VARARGS, NULL},
	 { "KeepOutInCone_isKeepIn_set", _wrap_KeepOutInCone_isKeepIn_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_isKeepIn_get", _wrap_KeepOutInCone_isKeepIn_get, METH_O, NULL},
	 { "KeepOutInCone_position_B_set", _wrap_KeepOutInCone_position_B_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_position_B_get", _wrap_KeepOutInCone_position_B_get, METH_O, NULL},
	 { "KeepOutInCone_normalVector_B_set", _wrap_KeepOutInCone_normalVector_B_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_normalVector_B_get", _wrap_KeepOutInCone_normalVector_B_get, METH_O, NULL},
	 { "KeepOutInCone_incidenceAngle_set", _wrap_KeepOutInCone_incidenceAngle_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_incidenceAngle_get", _wrap_KeepOutInCone_incidenceAngle_get, METH_O, NULL},
	 { "KeepOutInCone_coneHeight_set", _wrap_KeepOutInCone_coneHeight_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_coneHeight_get", _wrap_KeepOutInCone_coneHeight_get, METH_O, NULL},
	 { "KeepOutInCone_fromBodyName_set", _wrap_KeepOutInCone_fromBodyName_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_fromBodyName_get", _wrap_KeepOutInCone_fromBodyName_get, METH_O, NULL},
	 { "KeepOutInCone_toBodyName_set", _wrap_KeepOutInCone_toBodyName_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_toBodyName_get", _wrap_KeepOutInCone_toBodyName_get, METH_O, NULL},
	 { "KeepOutInCone_coneColor_set", _wrap_KeepOutInCone_coneColor_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_coneColor_get", _wrap_KeepOutInCone_coneColor_get, METH_O, NULL},
	 { "KeepOutInCone_coneName_set", _wrap_KeepOutInCone_coneName_set, METH_VARARGS, NULL},
	 { "KeepOutInCone_coneName_get", _wrap_KeepOutInCone_coneName_get, METH_O, NULL},
	 { "new_KeepOutInCone", _wrap_new_KeepOutInCone, METH_NOARGS, NULL},
	 { "delete_KeepOutInCone", _wrap_delete_KeepOutInCone, METH_O, NULL},
	 { "KeepOutInCone_swigregister", KeepOutInCone_swigregister, METH_O, NULL},
	 { "KeepOutInCone_swiginit", KeepOutInCone_swiginit, METH_VARARGS, NULL},
	 { "StdCameraSettings_spacecraftName_set", _wrap_StdCameraSettings_spacecraftName_set, METH_VARARGS, NULL},
	 { "StdCameraSettings_spacecraftName_get", _wrap_StdCameraSettings_spacecraftName_get, METH_O, NULL},
	 { "StdCameraSettings_setMode_set", _wrap_StdCameraSettings_setMode_set, METH_VARARGS, NULL},
	 { "StdCameraSettings_setMode_get", _wrap_StdCameraSettings_setMode_get, METH_O, NULL},
	 { "StdCameraSettings_fieldOfView_set", _wrap_StdCameraSettings_fieldOfView_set, METH_VARARGS, NULL},
	 { "StdCameraSettings_fieldOfView_get", _wrap_StdCameraSettings_fieldOfView_get, METH_O, NULL},
	 { "StdCameraSettings_bodyTarget_set", _wrap_StdCameraSettings_bodyTarget_set, METH_VARARGS, NULL},
	 { "StdCameraSettings_bodyTarget_get", _wrap_StdCameraSettings_bodyTarget_get, METH_O, NULL},
	 { "StdCameraSettings_setView_set", _wrap_StdCameraSettings_setView_set, METH_VARARGS, NULL},
	 { "StdCameraSettings_setView_get", _wrap_StdCameraSettings_setView_get, METH_O, NULL},
	 { "StdCameraSettings_pointingVector_B_set", _wrap_StdCameraSettings_pointingVector_B_set, METH_VARARGS, NULL},
	 { "StdCameraSettings_pointingVector_B_get", _wrap_StdCameraSettings_pointingVector_B_get, METH_O, NULL},
	 { "StdCameraSettings_position_B_set", _wrap_StdCameraSettings_position_B_set, METH_VARARGS, NULL},
	 { "StdCameraSettings_position_B_get", _wrap_StdCameraSettings_position_B_get, METH_O, NULL},
	 { "StdCameraSettings_displayName_set", _wrap_StdCameraSettings_displayName_set, METH_VARARGS, NULL},
	 { "StdCameraSettings_displayName_get", _wrap_StdCameraSettings_displayName_get, METH_O, NULL},
	 { "new_StdCameraSettings", _wrap_new_StdCameraSettings, METH_NOARGS, NULL},
	 { "delete_StdCameraSettings", _wrap_delete_StdCameraSettings, METH_O, NULL},
	 { "StdCameraSettings_swigregister", StdCameraSettings_swigregister, METH_O, NULL},
	 { "StdCameraSettings_swiginit", StdCameraSettings_swiginit, METH_VARARGS, NULL},
	 { "ActuatorGuiSettings_spacecraftName_set", _wrap_ActuatorGuiSettings_spacecraftName_set, METH_VARARGS, NULL},
	 { "ActuatorGuiSettings_spacecraftName_get", _wrap_ActuatorGuiSettings_spacecraftName_get, METH_O, NULL},
	 { "ActuatorGuiSettings_viewThrusterPanel_set", _wrap_ActuatorGuiSettings_viewThrusterPanel_set, METH_VARARGS, NULL},
	 { "ActuatorGuiSettings_viewThrusterPanel_get", _wrap_ActuatorGuiSettings_viewThrusterPanel_get, METH_O, NULL},
	 { "ActuatorGuiSettings_viewThrusterHUD_set", _wrap_ActuatorGuiSettings_viewThrusterHUD_set, METH_VARARGS, NULL},
	 { "ActuatorGuiSettings_viewThrusterHUD_get", _wrap_ActuatorGuiSettings_viewThrusterHUD_get, METH_O, NULL},
	 { "ActuatorGuiSettings_viewRWPanel_set", _wrap_ActuatorGuiSettings_viewRWPanel_set, METH_VARARGS, NULL},
	 { "ActuatorGuiSettings_viewRWPanel_get", _wrap_ActuatorGuiSettings_viewRWPanel_get, METH_O, NULL},
	 { "ActuatorGuiSettings_viewRWHUD_set", _wrap_ActuatorGuiSettings_viewRWHUD_set, METH_VARARGS, NULL},
	 { "ActuatorGuiSettings_viewRWHUD_get", _wrap_ActuatorGuiSettings_viewRWHUD_get, METH_O, NULL},
	 { "ActuatorGuiSettings_showThrusterLabels_set", _wrap_ActuatorGuiSettings_showThrusterLabels_set, METH_VARARGS, NULL},
	 { "ActuatorGuiSettings_showThrusterLabels_get", _wrap_ActuatorGuiSettings_showThrusterLabels_get, METH_O, NULL},
	 { "ActuatorGuiSettings_showRWLabels_set", _wrap_ActuatorGuiSettings_showRWLabels_set, METH_VARARGS, NULL},
	 { "ActuatorGuiSettings_showRWLabels_get", _wrap_ActuatorGuiSettings_showRWLabels_get, METH_O, NULL},
	 { "new_ActuatorGuiSettings", _wrap_new_ActuatorGuiSettings, METH_NOARGS, NULL},
	 { "delete_ActuatorGuiSettings", _wrap_delete_ActuatorGuiSettings, METH_O, NULL},
	 { "ActuatorGuiSettings_swigregister", ActuatorGuiSettings_swigregister, METH_O, NULL},
	 { "ActuatorGuiSettings_swiginit", ActuatorGuiSettings_swiginit, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_spacecraftName_set", _wrap_InstrumentGuiSettings_spacecraftName_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_spacecraftName_get", _wrap_InstrumentGuiSettings_spacecraftName_get, METH_O, NULL},
	 { "InstrumentGuiSettings_viewCSSPanel_set", _wrap_InstrumentGuiSettings_viewCSSPanel_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_viewCSSPanel_get", _wrap_InstrumentGuiSettings_viewCSSPanel_get, METH_O, NULL},
	 { "InstrumentGuiSettings_viewCSSBoresight_set", _wrap_InstrumentGuiSettings_viewCSSBoresight_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_viewCSSBoresight_get", _wrap_InstrumentGuiSettings_viewCSSBoresight_get, METH_O, NULL},
	 { "InstrumentGuiSettings_viewCSSCoverage_set", _wrap_InstrumentGuiSettings_viewCSSCoverage_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_viewCSSCoverage_get", _wrap_InstrumentGuiSettings_viewCSSCoverage_get, METH_O, NULL},
	 { "InstrumentGuiSettings_showCSSLabels_set", _wrap_InstrumentGuiSettings_showCSSLabels_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_showCSSLabels_get", _wrap_InstrumentGuiSettings_showCSSLabels_get, METH_O, NULL},
	 { "InstrumentGuiSettings_showGenericSensorLabels_set", _wrap_InstrumentGuiSettings_showGenericSensorLabels_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_showGenericSensorLabels_get", _wrap_InstrumentGuiSettings_showGenericSensorLabels_get, METH_O, NULL},
	 { "InstrumentGuiSettings_showTransceiverLabels_set", _wrap_InstrumentGuiSettings_showTransceiverLabels_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_showTransceiverLabels_get", _wrap_InstrumentGuiSettings_showTransceiverLabels_get, METH_O, NULL},
	 { "InstrumentGuiSettings_showTransceiverFrustrum_set", _wrap_InstrumentGuiSettings_showTransceiverFrustrum_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_showTransceiverFrustrum_get", _wrap_InstrumentGuiSettings_showTransceiverFrustrum_get, METH_O, NULL},
	 { "InstrumentGuiSettings_showGenericStoragePanel_set", _wrap_InstrumentGuiSettings_showGenericStoragePanel_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_showGenericStoragePanel_get", _wrap_InstrumentGuiSettings_showGenericStoragePanel_get, METH_O, NULL},
	 { "InstrumentGuiSettings_showMultiSphereLabels_set", _wrap_InstrumentGuiSettings_showMultiSphereLabels_set, METH_VARARGS, NULL},
	 { "InstrumentGuiSettings_showMultiSphereLabels_get", _wrap_InstrumentGuiSettings_showMultiSphereLabels_get, METH_O, NULL},
	 { "new_InstrumentGuiSettings", _wrap_new_InstrumentGuiSettings, METH_NOARGS, NULL},
	 { "delete_InstrumentGuiSettings", _wrap_delete_InstrumentGuiSettings, METH_O, NULL},
	 { "InstrumentGuiSettings_swigregister", InstrumentGuiSettings_swigregister, METH_O, NULL},
	 { "InstrumentGuiSettings_swiginit", InstrumentGuiSettings_swiginit, METH_VARARGS, NULL},
	 { "CustomModel_modelPath_set", _wrap_CustomModel_modelPath_set, METH_VARARGS, NULL},
	 { "CustomModel_modelPath_get", _wrap_CustomModel_modelPath_get, METH_O, NULL},
	 { "CustomModel_simBodiesToModify_set", _wrap_CustomModel_simBodiesToModify_set, METH_VARARGS, NULL},
	 { "CustomModel_simBodiesToModify_get", _wrap_CustomModel_simBodiesToModify_get, METH_O, NULL},
	 { "CustomModel_offset_set", _wrap_CustomModel_offset_set, METH_VARARGS, NULL},
	 { "CustomModel_offset_get", _wrap_CustomModel_offset_get, METH_O, NULL},
	 { "CustomModel_rotation_set", _wrap_CustomModel_rotation_set, METH_VARARGS, NULL},
	 { "CustomModel_rotation_get", _wrap_CustomModel_rotation_get, METH_O, NULL},
	 { "CustomModel_scale_set", _wrap_CustomModel_scale_set, METH_VARARGS, NULL},
	 { "CustomModel_scale_get", _wrap_CustomModel_scale_get, METH_O, NULL},
	 { "CustomModel_customTexturePath_set", _wrap_CustomModel_customTexturePath_set, METH_VARARGS, NULL},
	 { "CustomModel_customTexturePath_get", _wrap_CustomModel_customTexturePath_get, METH_O, NULL},
	 { "CustomModel_normalMapPath_set", _wrap_CustomModel_normalMapPath_set, METH_VARARGS, NULL},
	 { "CustomModel_normalMapPath_get", _wrap_CustomModel_normalMapPath_get, METH_O, NULL},
	 { "CustomModel_shader_set", _wrap_CustomModel_shader_set, METH_VARARGS, NULL},
	 { "CustomModel_shader_get", _wrap_CustomModel_shader_get, METH_O, NULL},
	 { "CustomModel_color_set", _wrap_CustomModel_color_set, METH_VARARGS, NULL},
	 { "CustomModel_color_get", _wrap_CustomModel_color_get, METH_O, NULL},
	 { "new_CustomModel", _wrap_new_CustomModel, METH_NOARGS, NULL},
	 { "delete_CustomModel", _wrap_delete_CustomModel, METH_O, NULL},
	 { "CustomModel_swigregister", CustomModel_swigregister, METH_O, NULL},
	 { "CustomModel_swiginit", CustomModel_swiginit, METH_VARARGS, NULL},
	 { "LocationPbMsg_stationName_set", _wrap_LocationPbMsg_stationName_set, METH_VARARGS, NULL},
	 { "LocationPbMsg_stationName_get", _wrap_LocationPbMsg_stationName_get, METH_O, NULL},
	 { "LocationPbMsg_parentBodyName_set", _wrap_LocationPbMsg_parentBodyName_set, METH_VARARGS, NULL},
	 { "LocationPbMsg_parentBodyName_get", _wrap_LocationPbMsg_parentBodyName_get, METH_O, NULL},
	 { "LocationPbMsg_r_GP_P_set", _wrap_LocationPbMsg_r_GP_P_set, METH_VARARGS, NULL},
	 { "LocationPbMsg_r_GP_P_get", _wrap_LocationPbMsg_r_GP_P_get, METH_O, NULL},
	 { "LocationPbMsg_gHat_P_set", _wrap_LocationPbMsg_gHat_P_set, METH_VARARGS, NULL},
	 { "LocationPbMsg_gHat_P_get", _wrap_LocationPbMsg_gHat_P_get, METH_O, NULL},
	 { "LocationPbMsg_fieldOfView_set", _wrap_LocationPbMsg_fieldOfView_set, METH_VARARGS, NULL},
	 { "LocationPbMsg_fieldOfView_get", _wrap_LocationPbMsg_fieldOfView_get, METH_O, NULL},
	 { "LocationPbMsg_color_set", _wrap_LocationPbMsg_color_set, METH_VARARGS, NULL},
	 { "LocationPbMsg_color_get", _wrap_LocationPbMsg_color_get, METH_O, NULL},
	 { "LocationPbMsg_range_set", _wrap_LocationPbMsg_range_set, METH_VARARGS, NULL},
	 { "LocationPbMsg_range_get", _wrap_LocationPbMsg_range_get, METH_O, NULL},
	 { "new_LocationPbMsg", _wrap_new_LocationPbMsg, METH_NOARGS, NULL},
	 { "delete_LocationPbMsg", _wrap_delete_LocationPbMsg, METH_O, NULL},
	 { "LocationPbMsg_swigregister", LocationPbMsg_swigregister, METH_O, NULL},
	 { "LocationPbMsg_swiginit", LocationPbMsg_swiginit, METH_VARARGS, NULL},
	 { "GenericSensor_r_SB_B_set", _wrap_GenericSensor_r_SB_B_set, METH_VARARGS, NULL},
	 { "GenericSensor_r_SB_B_get", _wrap_GenericSensor_r_SB_B_get, METH_O, NULL},
	 { "GenericSensor_fieldOfView_set", _wrap_GenericSensor_fieldOfView_set, METH_VARARGS, NULL},
	 { "GenericSensor_fieldOfView_get", _wrap_GenericSensor_fieldOfView_get, METH_O, NULL},
	 { "GenericSensor_normalVector_set", _wrap_GenericSensor_normalVector_set, METH_VARARGS, NULL},
	 { "GenericSensor_normalVector_get", _wrap_GenericSensor_normalVector_get, METH_O, NULL},
	 { "GenericSensor_isHidden_set", _wrap_GenericSensor_isHidden_set, METH_VARARGS, NULL},
	 { "GenericSensor_isHidden_get", _wrap_GenericSensor_isHidden_get, METH_O, NULL},
	 { "GenericSensor_size_set", _wrap_GenericSensor_size_set, METH_VARARGS, NULL},
	 { "GenericSensor_size_get", _wrap_GenericSensor_size_get, METH_O, NULL},
	 { "GenericSensor_color_set", _wrap_GenericSensor_color_set, METH_VARARGS, NULL},
	 { "GenericSensor_color_get", _wrap_GenericSensor_color_get, METH_O, NULL},
	 { "GenericSensor_label_set", _wrap_GenericSensor_label_set, METH_VARARGS, NULL},
	 { "GenericSensor_label_get", _wrap_GenericSensor_label_get, METH_O, NULL},
	 { "GenericSensor_genericSensorCmdInMsg_set", _wrap_GenericSensor_genericSensorCmdInMsg_set, METH_VARARGS, NULL},
	 { "GenericSensor_genericSensorCmdInMsg_get", _wrap_GenericSensor_genericSensorCmdInMsg_get, METH_O, NULL},
	 { "GenericSensor_genericSensorCmd_set", _wrap_GenericSensor_genericSensorCmd_set, METH_VARARGS, NULL},
	 { "GenericSensor_genericSensorCmd_get", _wrap_GenericSensor_genericSensorCmd_get, METH_O, NULL},
	 { "new_GenericSensor", _wrap_new_GenericSensor, METH_NOARGS, NULL},
	 { "delete_GenericSensor", _wrap_delete_GenericSensor, METH_O, NULL},
	 { "GenericSensor_swigregister", GenericSensor_swigregister, METH_O, NULL},
	 { "GenericSensor_swiginit", GenericSensor_swiginit, METH_VARARGS, NULL},
	 { "Ellipsoid_isOn_set", _wrap_Ellipsoid_isOn_set, METH_VARARGS, NULL},
	 { "Ellipsoid_isOn_get", _wrap_Ellipsoid_isOn_get, METH_O, NULL},
	 { "Ellipsoid_useBodyFrame_set", _wrap_Ellipsoid_useBodyFrame_set, METH_VARARGS, NULL},
	 { "Ellipsoid_useBodyFrame_get", _wrap_Ellipsoid_useBodyFrame_get, METH_O, NULL},
	 { "Ellipsoid_position_set", _wrap_Ellipsoid_position_set, METH_VARARGS, NULL},
	 { "Ellipsoid_position_get", _wrap_Ellipsoid_position_get, METH_O, NULL},
	 { "Ellipsoid_semiMajorAxes_set", _wrap_Ellipsoid_semiMajorAxes_set, METH_VARARGS, NULL},
	 { "Ellipsoid_semiMajorAxes_get", _wrap_Ellipsoid_semiMajorAxes_get, METH_O, NULL},
	 { "Ellipsoid_color_set", _wrap_Ellipsoid_color_set, METH_VARARGS, NULL},
	 { "Ellipsoid_color_get", _wrap_Ellipsoid_color_get, METH_O, NULL},
	 { "Ellipsoid_showGridLines_set", _wrap_Ellipsoid_showGridLines_set, METH_VARARGS, NULL},
	 { "Ellipsoid_showGridLines_get", _wrap_Ellipsoid_showGridLines_get, METH_O, NULL},
	 { "new_Ellipsoid", _wrap_new_Ellipsoid, METH_NOARGS, NULL},
	 { "delete_Ellipsoid", _wrap_delete_Ellipsoid, METH_O, NULL},
	 { "Ellipsoid_swigregister", Ellipsoid_swigregister, METH_O, NULL},
	 { "Ellipsoid_swiginit", Ellipsoid_swiginit, METH_VARARGS, NULL},
	 { "Light_label_set", _wrap_Light_label_set, METH_VARARGS, NULL},
	 { "Light_label_get", _wrap_Light_label_get, METH_O, NULL},
	 { "Light_position_set", _wrap_Light_position_set, METH_VARARGS, NULL},
	 { "Light_position_get", _wrap_Light_position_get, METH_O, NULL},
	 { "Light_fieldOfView_set", _wrap_Light_fieldOfView_set, METH_VARARGS, NULL},
	 { "Light_fieldOfView_get", _wrap_Light_fieldOfView_get, METH_O, NULL},
	 { "Light_normalVector_set", _wrap_Light_normalVector_set, METH_VARARGS, NULL},
	 { "Light_normalVector_get", _wrap_Light_normalVector_get, METH_O, NULL},
	 { "Light_lightOn_set", _wrap_Light_lightOn_set, METH_VARARGS, NULL},
	 { "Light_lightOn_get", _wrap_Light_lightOn_get, METH_O, NULL},
	 { "Light_range_set", _wrap_Light_range_set, METH_VARARGS, NULL},
	 { "Light_range_get", _wrap_Light_range_get, METH_O, NULL},
	 { "Light_intensity_set", _wrap_Light_intensity_set, METH_VARARGS, NULL},
	 { "Light_intensity_get", _wrap_Light_intensity_get, METH_O, NULL},
	 { "Light_showLightMarker_set", _wrap_Light_showLightMarker_set, METH_VARARGS, NULL},
	 { "Light_showLightMarker_get", _wrap_Light_showLightMarker_get, METH_O, NULL},
	 { "Light_markerDiameter_set", _wrap_Light_markerDiameter_set, METH_VARARGS, NULL},
	 { "Light_markerDiameter_get", _wrap_Light_markerDiameter_get, METH_O, NULL},
	 { "Light_color_set", _wrap_Light_color_set, METH_VARARGS, NULL},
	 { "Light_color_get", _wrap_Light_color_get, METH_O, NULL},
	 { "Light_gammaSaturation_set", _wrap_Light_gammaSaturation_set, METH_VARARGS, NULL},
	 { "Light_gammaSaturation_get", _wrap_Light_gammaSaturation_get, METH_O, NULL},
	 { "Light_showLensFlare_set", _wrap_Light_showLensFlare_set, METH_VARARGS, NULL},
	 { "Light_showLensFlare_get", _wrap_Light_showLensFlare_get, METH_O, NULL},
	 { "Light_lensFlareBrightness_set", _wrap_Light_lensFlareBrightness_set, METH_VARARGS, NULL},
	 { "Light_lensFlareBrightness_get", _wrap_Light_lensFlareBrightness_get, METH_O, NULL},
	 { "Light_lensFlareFadeSpeed_set", _wrap_Light_lensFlareFadeSpeed_set, METH_VARARGS, NULL},
	 { "Light_lensFlareFadeSpeed_get", _wrap_Light_lensFlareFadeSpeed_get, METH_O, NULL},
	 { "Light_onOffCmdInMsg_set", _wrap_Light_onOffCmdInMsg_set, METH_VARARGS, NULL},
	 { "Light_onOffCmdInMsg_get", _wrap_Light_onOffCmdInMsg_get, METH_O, NULL},
	 { "new_Light", _wrap_new_Light, METH_NOARGS, NULL},
	 { "delete_Light", _wrap_delete_Light, METH_O, NULL},
	 { "Light_swigregister", Light_swigregister, METH_O, NULL},
	 { "Light_swiginit", Light_swiginit, METH_VARARGS, NULL},
	 { "MultiSphere_isOn_set", _wrap_MultiSphere_isOn_set, METH_VARARGS, NULL},
	 { "MultiSphere_isOn_get", _wrap_MultiSphere_isOn_get, METH_O, NULL},
	 { "MultiSphere_position_set", _wrap_MultiSphere_position_set, METH_VARARGS, NULL},
	 { "MultiSphere_position_get", _wrap_MultiSphere_position_get, METH_O, NULL},
	 { "MultiSphere_radius_set", _wrap_MultiSphere_radius_set, METH_VARARGS, NULL},
	 { "MultiSphere_radius_get", _wrap_MultiSphere_radius_get, METH_O, NULL},
	 { "MultiSphere_currentValue_set", _wrap_MultiSphere_currentValue_set, METH_VARARGS, NULL},
	 { "MultiSphere_currentValue_get", _wrap_MultiSphere_currentValue_get, METH_O, NULL},
	 { "MultiSphere_maxValue_set", _wrap_MultiSphere_maxValue_set, METH_VARARGS, NULL},
	 { "MultiSphere_maxValue_get", _wrap_MultiSphere_maxValue_get, METH_O, NULL},
	 { "MultiSphere_positiveColor_set", _wrap_MultiSphere_positiveColor_set, METH_VARARGS, NULL},
	 { "MultiSphere_positiveColor_get", _wrap_MultiSphere_positiveColor_get, METH_O, NULL},
	 { "MultiSphere_negativeColor_set", _wrap_MultiSphere_negativeColor_set, METH_VARARGS, NULL},
	 { "MultiSphere_negativeColor_get", _wrap_MultiSphere_negativeColor_get, METH_O, NULL},
	 { "MultiSphere_neutralOpacity_set", _wrap_MultiSphere_neutralOpacity_set, METH_VARARGS, NULL},
	 { "MultiSphere_neutralOpacity_get", _wrap_MultiSphere_neutralOpacity_get, METH_O, NULL},
	 { "new_MultiSphere", _wrap_new_MultiSphere, METH_NOARGS, NULL},
	 { "delete_MultiSphere", _wrap_delete_MultiSphere, METH_O, NULL},
	 { "MultiSphere_swigregister", MultiSphere_swigregister, METH_O, NULL},
	 { "MultiSphere_swiginit", MultiSphere_swiginit, METH_VARARGS, NULL},
	 { "MultiSphereInfo_msmList_set", _wrap_MultiSphereInfo_msmList_set, METH_VARARGS, NULL},
	 { "MultiSphereInfo_msmList_get", _wrap_MultiSphereInfo_msmList_get, METH_O, NULL},
	 { "MultiSphereInfo_msmChargeInMsg_set", _wrap_MultiSphereInfo_msmChargeInMsg_set, METH_VARARGS, NULL},
	 { "MultiSphereInfo_msmChargeInMsg_get", _wrap_MultiSphereInfo_msmChargeInMsg_get, METH_O, NULL},
	 { "new_MultiSphereInfo", _wrap_new_MultiSphereInfo, METH_NOARGS, NULL},
	 { "delete_MultiSphereInfo", _wrap_delete_MultiSphereInfo, METH_O, NULL},
	 { "MultiSphereInfo_swigregister", MultiSphereInfo_swigregister, METH_O, NULL},
	 { "MultiSphereInfo_swiginit", MultiSphereInfo_swiginit, METH_VARARGS, NULL},
	 { "GenericStorage_label_set", _wrap_GenericStorage_label_set, METH_VARARGS, NULL},
	 { "GenericStorage_label_get", _wrap_GenericStorage_label_get, METH_O, NULL},
	 { "GenericStorage_type_set", _wrap_GenericStorage_type_set, METH_VARARGS, NULL},
	 { "GenericStorage_type_get", _wrap_GenericStorage_type_get, METH_O, NULL},
	 { "GenericStorage_currentValue_set", _wrap_GenericStorage_currentValue_set, METH_VARARGS, NULL},
	 { "GenericStorage_currentValue_get", _wrap_GenericStorage_currentValue_get, METH_O, NULL},
	 { "GenericStorage_maxValue_set", _wrap_GenericStorage_maxValue_set, METH_VARARGS, NULL},
	 { "GenericStorage_maxValue_get", _wrap_GenericStorage_maxValue_get, METH_O, NULL},
	 { "GenericStorage_units_set", _wrap_GenericStorage_units_set, METH_VARARGS, NULL},
	 { "GenericStorage_units_get", _wrap_GenericStorage_units_get, METH_O, NULL},
	 { "GenericStorage_color_set", _wrap_GenericStorage_color_set, METH_VARARGS, NULL},
	 { "GenericStorage_color_get", _wrap_GenericStorage_color_get, METH_O, NULL},
	 { "GenericStorage_thresholds_set", _wrap_GenericStorage_thresholds_set, METH_VARARGS, NULL},
	 { "GenericStorage_thresholds_get", _wrap_GenericStorage_thresholds_get, METH_O, NULL},
	 { "GenericStorage_batteryStateInMsg_set", _wrap_GenericStorage_batteryStateInMsg_set, METH_VARARGS, NULL},
	 { "GenericStorage_batteryStateInMsg_get", _wrap_GenericStorage_batteryStateInMsg_get, METH_O, NULL},
	 { "GenericStorage_dataStorageStateInMsg_set", _wrap_GenericStorage_dataStorageStateInMsg_set, METH_VARARGS, NULL},
	 { "GenericStorage_dataStorageStateInMsg_get", _wrap_GenericStorage_dataStorageStateInMsg_get, METH_O, NULL},
	 { "GenericStorage_fuelTankStateInMsg_set", _wrap_GenericStorage_fuelTankStateInMsg_set, METH_VARARGS, NULL},
	 { "GenericStorage_fuelTankStateInMsg_get", _wrap_GenericStorage_fuelTankStateInMsg_get, METH_O, NULL},
	 { "new_GenericStorage", _wrap_new_GenericStorage, METH_NOARGS, NULL},
	 { "delete_GenericStorage", _wrap_delete_GenericStorage, METH_O, NULL},
	 { "GenericStorage_swigregister", GenericStorage_swigregister, METH_O, NULL},
	 { "GenericStorage_swiginit", GenericStorage_swiginit, METH_VARARGS, NULL},
	 { "Transceiver_r_SB_B_set", _wrap_Transceiver_r_SB_B_set, METH_VARARGS, NULL},
	 { "Transceiver_r_SB_B_get", _wrap_Transceiver_r_SB_B_get, METH_O, NULL},
	 { "Transceiver_fieldOfView_set", _wrap_Transceiver_fieldOfView_set, METH_VARARGS, NULL},
	 { "Transceiver_fieldOfView_get", _wrap_Transceiver_fieldOfView_get, METH_O, NULL},
	 { "Transceiver_normalVector_set", _wrap_Transceiver_normalVector_set, METH_VARARGS, NULL},
	 { "Transceiver_normalVector_get", _wrap_Transceiver_normalVector_get, METH_O, NULL},
	 { "Transceiver_isHidden_set", _wrap_Transceiver_isHidden_set, METH_VARARGS, NULL},
	 { "Transceiver_isHidden_get", _wrap_Transceiver_isHidden_get, METH_O, NULL},
	 { "Transceiver_color_set", _wrap_Transceiver_color_set, METH_VARARGS, NULL},
	 { "Transceiver_color_get", _wrap_Transceiver_color_get, METH_O, NULL},
	 { "Transceiver_label_set", _wrap_Transceiver_label_set, METH_VARARGS, NULL},
	 { "Transceiver_label_get", _wrap_Transceiver_label_get, METH_O, NULL},
	 { "Transceiver_animationSpeed_set", _wrap_Transceiver_animationSpeed_set, METH_VARARGS, NULL},
	 { "Transceiver_animationSpeed_get", _wrap_Transceiver_animationSpeed_get, METH_O, NULL},
	 { "Transceiver_transceiverStateInMsgs_set", _wrap_Transceiver_transceiverStateInMsgs_set, METH_VARARGS, NULL},
	 { "Transceiver_transceiverStateInMsgs_get", _wrap_Transceiver_transceiverStateInMsgs_get, METH_O, NULL},
	 { "Transceiver_transceiverState_set", _wrap_Transceiver_transceiverState_set, METH_VARARGS, NULL},
	 { "Transceiver_transceiverState_get", _wrap_Transceiver_transceiverState_get, METH_O, NULL},
	 { "new_Transceiver", _wrap_new_Transceiver, METH_NOARGS, NULL},
	 { "delete_Transceiver", _wrap_delete_Transceiver, METH_O, NULL},
	 { "Transceiver_swigregister", Transceiver_swigregister, METH_O, NULL},
	 { "Transceiver_swiginit", Transceiver_swiginit, METH_VARARGS, NULL},
	 { "VizSpacecraftData_spacecraftName_set", _wrap_VizSpacecraftData_spacecraftName_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_spacecraftName_get", _wrap_VizSpacecraftData_spacecraftName_get, METH_O, NULL},
	 { "VizSpacecraftData_parentSpacecraftName_set", _wrap_VizSpacecraftData_parentSpacecraftName_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_parentSpacecraftName_get", _wrap_VizSpacecraftData_parentSpacecraftName_get, METH_O, NULL},
	 { "VizSpacecraftData_scStateInMsg_set", _wrap_VizSpacecraftData_scStateInMsg_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_scStateInMsg_get", _wrap_VizSpacecraftData_scStateInMsg_get, METH_O, NULL},
	 { "VizSpacecraftData_scStateInMsgStatus_set", _wrap_VizSpacecraftData_scStateInMsgStatus_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_scStateInMsgStatus_get", _wrap_VizSpacecraftData_scStateInMsgStatus_get, METH_O, NULL},
	 { "VizSpacecraftData_scStateMsgBuffer_set", _wrap_VizSpacecraftData_scStateMsgBuffer_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_scStateMsgBuffer_get", _wrap_VizSpacecraftData_scStateMsgBuffer_get, METH_O, NULL},
	 { "VizSpacecraftData_rwInMsgs_set", _wrap_VizSpacecraftData_rwInMsgs_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_rwInMsgs_get", _wrap_VizSpacecraftData_rwInMsgs_get, METH_O, NULL},
	 { "VizSpacecraftData_rwInMsgStatus_set", _wrap_VizSpacecraftData_rwInMsgStatus_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_rwInMsgStatus_get", _wrap_VizSpacecraftData_rwInMsgStatus_get, METH_O, NULL},
	 { "VizSpacecraftData_rwInMessage_set", _wrap_VizSpacecraftData_rwInMessage_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_rwInMessage_get", _wrap_VizSpacecraftData_rwInMessage_get, METH_O, NULL},
	 { "VizSpacecraftData_cssInMsgs_set", _wrap_VizSpacecraftData_cssInMsgs_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_cssInMsgs_get", _wrap_VizSpacecraftData_cssInMsgs_get, METH_O, NULL},
	 { "VizSpacecraftData_cssConfLogInMsgStatus_set", _wrap_VizSpacecraftData_cssConfLogInMsgStatus_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_cssConfLogInMsgStatus_get", _wrap_VizSpacecraftData_cssConfLogInMsgStatus_get, METH_O, NULL},
	 { "VizSpacecraftData_cssInMessage_set", _wrap_VizSpacecraftData_cssInMessage_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_cssInMessage_get", _wrap_VizSpacecraftData_cssInMessage_get, METH_O, NULL},
	 { "VizSpacecraftData_thrInMsgs_set", _wrap_VizSpacecraftData_thrInMsgs_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_thrInMsgs_get", _wrap_VizSpacecraftData_thrInMsgs_get, METH_O, NULL},
	 { "VizSpacecraftData_thrMsgStatus_set", _wrap_VizSpacecraftData_thrMsgStatus_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_thrMsgStatus_get", _wrap_VizSpacecraftData_thrMsgStatus_get, METH_O, NULL},
	 { "VizSpacecraftData_thrOutputMessage_set", _wrap_VizSpacecraftData_thrOutputMessage_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_thrOutputMessage_get", _wrap_VizSpacecraftData_thrOutputMessage_get, METH_O, NULL},
	 { "VizSpacecraftData_thrInfo_set", _wrap_VizSpacecraftData_thrInfo_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_thrInfo_get", _wrap_VizSpacecraftData_thrInfo_get, METH_O, NULL},
	 { "VizSpacecraftData_genericSensorList_set", _wrap_VizSpacecraftData_genericSensorList_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_genericSensorList_get", _wrap_VizSpacecraftData_genericSensorList_get, METH_O, NULL},
	 { "VizSpacecraftData_transceiverList_set", _wrap_VizSpacecraftData_transceiverList_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_transceiverList_get", _wrap_VizSpacecraftData_transceiverList_get, METH_O, NULL},
	 { "VizSpacecraftData_genericStorageList_set", _wrap_VizSpacecraftData_genericStorageList_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_genericStorageList_get", _wrap_VizSpacecraftData_genericStorageList_get, METH_O, NULL},
	 { "VizSpacecraftData_lightList_set", _wrap_VizSpacecraftData_lightList_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_lightList_get", _wrap_VizSpacecraftData_lightList_get, METH_O, NULL},
	 { "VizSpacecraftData_spacecraftSprite_set", _wrap_VizSpacecraftData_spacecraftSprite_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_spacecraftSprite_get", _wrap_VizSpacecraftData_spacecraftSprite_get, METH_O, NULL},
	 { "VizSpacecraftData_modelDictionaryKey_set", _wrap_VizSpacecraftData_modelDictionaryKey_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_modelDictionaryKey_get", _wrap_VizSpacecraftData_modelDictionaryKey_get, METH_O, NULL},
	 { "VizSpacecraftData_logoTexture_set", _wrap_VizSpacecraftData_logoTexture_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_logoTexture_get", _wrap_VizSpacecraftData_logoTexture_get, METH_O, NULL},
	 { "VizSpacecraftData_oscOrbitLineColor_set", _wrap_VizSpacecraftData_oscOrbitLineColor_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_oscOrbitLineColor_get", _wrap_VizSpacecraftData_oscOrbitLineColor_get, METH_O, NULL},
	 { "VizSpacecraftData_trueTrajectoryLineColor_set", _wrap_VizSpacecraftData_trueTrajectoryLineColor_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_trueTrajectoryLineColor_get", _wrap_VizSpacecraftData_trueTrajectoryLineColor_get, METH_O, NULL},
	 { "VizSpacecraftData_trueTrajectoryLineColorInMsg_set", _wrap_VizSpacecraftData_trueTrajectoryLineColorInMsg_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_trueTrajectoryLineColorInMsg_get", _wrap_VizSpacecraftData_trueTrajectoryLineColorInMsg_get, METH_O, NULL},
	 { "VizSpacecraftData_msmInfo_set", _wrap_VizSpacecraftData_msmInfo_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_msmInfo_get", _wrap_VizSpacecraftData_msmInfo_get, METH_O, NULL},
	 { "VizSpacecraftData_ellipsoidList_set", _wrap_VizSpacecraftData_ellipsoidList_set, METH_VARARGS, NULL},
	 { "VizSpacecraftData_ellipsoidList_get", _wrap_VizSpacecraftData_ellipsoidList_get, METH_O, NULL},
	 { "new_VizSpacecraftData", _wrap_new_VizSpacecraftData, METH_NOARGS, NULL},
	 { "delete_VizSpacecraftData", _wrap_delete_VizSpacecraftData, METH_O, NULL},
	 { "VizSpacecraftData_swigregister", VizSpacecraftData_swigregister, METH_O, NULL},
	 { "VizSpacecraftData_swiginit", VizSpacecraftData_swiginit, METH_VARARGS, NULL},
	 { "VizSettings_ambient_set", _wrap_VizSettings_ambient_set, METH_VARARGS, NULL},
	 { "VizSettings_ambient_get", _wrap_VizSettings_ambient_get, METH_O, NULL},
	 { "VizSettings_orbitLinesOn_set", _wrap_VizSettings_orbitLinesOn_set, METH_VARARGS, NULL},
	 { "VizSettings_orbitLinesOn_get", _wrap_VizSettings_orbitLinesOn_get, METH_O, NULL},
	 { "VizSettings_trueTrajectoryLinesOn_set", _wrap_VizSettings_trueTrajectoryLinesOn_set, METH_VARARGS, NULL},
	 { "VizSettings_trueTrajectoryLinesOn_get", _wrap_VizSettings_trueTrajectoryLinesOn_get, METH_O, NULL},
	 { "VizSettings_spacecraftCSon_set", _wrap_VizSettings_spacecraftCSon_set, METH_VARARGS, NULL},
	 { "VizSettings_spacecraftCSon_get", _wrap_VizSettings_spacecraftCSon_get, METH_O, NULL},
	 { "VizSettings_planetCSon_set", _wrap_VizSettings_planetCSon_set, METH_VARARGS, NULL},
	 { "VizSettings_planetCSon_get", _wrap_VizSettings_planetCSon_get, METH_O, NULL},
	 { "VizSettings_pointLineList_set", _wrap_VizSettings_pointLineList_set, METH_VARARGS, NULL},
	 { "VizSettings_pointLineList_get", _wrap_VizSettings_pointLineList_get, METH_O, NULL},
	 { "VizSettings_coneList_set", _wrap_VizSettings_coneList_set, METH_VARARGS, NULL},
	 { "VizSettings_coneList_get", _wrap_VizSettings_coneList_get, METH_O, NULL},
	 { "VizSettings_stdCameraList_set", _wrap_VizSettings_stdCameraList_set, METH_VARARGS, NULL},
	 { "VizSettings_stdCameraList_get", _wrap_VizSettings_stdCameraList_get, METH_O, NULL},
	 { "VizSettings_customModelList_set", _wrap_VizSettings_customModelList_set, METH_VARARGS, NULL},
	 { "VizSettings_customModelList_get", _wrap_VizSettings_customModelList_get, METH_O, NULL},
	 { "VizSettings_actuatorGuiSettingsList_set", _wrap_VizSettings_actuatorGuiSettingsList_set, METH_VARARGS, NULL},
	 { "VizSettings_actuatorGuiSettingsList_get", _wrap_VizSettings_actuatorGuiSettingsList_get, METH_O, NULL},
	 { "VizSettings_instrumentGuiSettingsList_set", _wrap_VizSettings_instrumentGuiSettingsList_set, METH_VARARGS, NULL},
	 { "VizSettings_instrumentGuiSettingsList_get", _wrap_VizSettings_instrumentGuiSettingsList_get, METH_O, NULL},
	 { "VizSettings_skyBox_set", _wrap_VizSettings_skyBox_set, METH_VARARGS, NULL},
	 { "VizSettings_skyBox_get", _wrap_VizSettings_skyBox_get, METH_O, NULL},
	 { "VizSettings_dataFresh_set", _wrap_VizSettings_dataFresh_set, METH_VARARGS, NULL},
	 { "VizSettings_dataFresh_get", _wrap_VizSettings_dataFresh_get, METH_O, NULL},
	 { "VizSettings_viewCameraBoresightHUD_set", _wrap_VizSettings_viewCameraBoresightHUD_set, METH_VARARGS, NULL},
	 { "VizSettings_viewCameraBoresightHUD_get", _wrap_VizSettings_viewCameraBoresightHUD_get, METH_O, NULL},
	 { "VizSettings_viewCameraConeHUD_set", _wrap_VizSettings_viewCameraConeHUD_set, METH_VARARGS, NULL},
	 { "VizSettings_viewCameraConeHUD_get", _wrap_VizSettings_viewCameraConeHUD_get, METH_O, NULL},
	 { "VizSettings_showCSLabels_set", _wrap_VizSettings_showCSLabels_set, METH_VARARGS, NULL},
	 { "VizSettings_showCSLabels_get", _wrap_VizSettings_showCSLabels_get, METH_O, NULL},
	 { "VizSettings_showCelestialBodyLabels_set", _wrap_VizSettings_showCelestialBodyLabels_set, METH_VARARGS, NULL},
	 { "VizSettings_showCelestialBodyLabels_get", _wrap_VizSettings_showCelestialBodyLabels_get, METH_O, NULL},
	 { "VizSettings_showSpacecraftLabels_set", _wrap_VizSettings_showSpacecraftLabels_set, METH_VARARGS, NULL},
	 { "VizSettings_showSpacecraftLabels_get", _wrap_VizSettings_showSpacecraftLabels_get, METH_O, NULL},
	 { "VizSettings_showCameraLabels_set", _wrap_VizSettings_showCameraLabels_set, METH_VARARGS, NULL},
	 { "VizSettings_showCameraLabels_get", _wrap_VizSettings_showCameraLabels_get, METH_O, NULL},
	 { "VizSettings_customGUIScale_set", _wrap_VizSettings_customGUIScale_set, METH_VARARGS, NULL},
	 { "VizSettings_customGUIScale_get", _wrap_VizSettings_customGUIScale_get, METH_O, NULL},
	 { "VizSettings_defaultSpacecraftSprite_set", _wrap_VizSettings_defaultSpacecraftSprite_set, METH_VARARGS, NULL},
	 { "VizSettings_defaultSpacecraftSprite_get", _wrap_VizSettings_defaultSpacecraftSprite_get, METH_O, NULL},
	 { "VizSettings_showSpacecraftAsSprites_set", _wrap_VizSettings_showSpacecraftAsSprites_set, METH_VARARGS, NULL},
	 { "VizSettings_showSpacecraftAsSprites_get", _wrap_VizSettings_showSpacecraftAsSprites_get, METH_O, NULL},
	 { "VizSettings_showCelestialBodiesAsSprites_set", _wrap_VizSettings_showCelestialBodiesAsSprites_set, METH_VARARGS, NULL},
	 { "VizSettings_showCelestialBodiesAsSprites_get", _wrap_VizSettings_showCelestialBodiesAsSprites_get, METH_O, NULL},
	 { "VizSettings_show24hrClock_set", _wrap_VizSettings_show24hrClock_set, METH_VARARGS, NULL},
	 { "VizSettings_show24hrClock_get", _wrap_VizSettings_show24hrClock_get, METH_O, NULL},
	 { "VizSettings_showDataRateDisplay_set", _wrap_VizSettings_showDataRateDisplay_set, METH_VARARGS, NULL},
	 { "VizSettings_showDataRateDisplay_get", _wrap_VizSettings_showDataRateDisplay_get, METH_O, NULL},
	 { "VizSettings_keyboardAngularRate_set", _wrap_VizSettings_keyboardAngularRate_set, METH_VARARGS, NULL},
	 { "VizSettings_keyboardAngularRate_get", _wrap_VizSettings_keyboardAngularRate_get, METH_O, NULL},
	 { "VizSettings_keyboardZoomRate_set", _wrap_VizSettings_keyboardZoomRate_set, METH_VARARGS, NULL},
	 { "VizSettings_keyboardZoomRate_get", _wrap_VizSettings_keyboardZoomRate_get, METH_O, NULL},
	 { "VizSettings_defaultThrusterColor_set", _wrap_VizSettings_defaultThrusterColor_set, METH_VARARGS, NULL},
	 { "VizSettings_defaultThrusterColor_get", _wrap_VizSettings_defaultThrusterColor_get, METH_O, NULL},
	 { "VizSettings_defaultThrusterPlumeLifeScalar_set", _wrap_VizSettings_defaultThrusterPlumeLifeScalar_set, METH_VARARGS, NULL},
	 { "VizSettings_defaultThrusterPlumeLifeScalar_get", _wrap_VizSettings_defaultThrusterPlumeLifeScalar_get, METH_O, NULL},
	 { "VizSettings_orbitLineSegments_set", _wrap_VizSettings_orbitLineSegments_set, METH_VARARGS, NULL},
	 { "VizSettings_orbitLineSegments_get", _wrap_VizSettings_orbitLineSegments_get, METH_O, NULL},
	 { "VizSettings_relativeOrbitRange_set", _wrap_VizSettings_relativeOrbitRange_set, METH_VARARGS, NULL},
	 { "VizSettings_relativeOrbitRange_get", _wrap_VizSettings_relativeOrbitRange_get, METH_O, NULL},
	 { "VizSettings_mainCameraTarget_set", _wrap_VizSettings_mainCameraTarget_set, METH_VARARGS, NULL},
	 { "VizSettings_mainCameraTarget_get", _wrap_VizSettings_mainCameraTarget_get, METH_O, NULL},
	 { "VizSettings_showHillFrame_set", _wrap_VizSettings_showHillFrame_set, METH_VARARGS, NULL},
	 { "VizSettings_showHillFrame_get", _wrap_VizSettings_showHillFrame_get, METH_O, NULL},
	 { "VizSettings_showVelocityFrame_set", _wrap_VizSettings_showVelocityFrame_set, METH_VARARGS, NULL},
	 { "VizSettings_showVelocityFrame_get", _wrap_VizSettings_showVelocityFrame_get, METH_O, NULL},
	 { "VizSettings_relativeOrbitFrame_set", _wrap_VizSettings_relativeOrbitFrame_set, METH_VARARGS, NULL},
	 { "VizSettings_relativeOrbitFrame_get", _wrap_VizSettings_relativeOrbitFrame_get, METH_O, NULL},
	 { "VizSettings_spacecraftShadowBrightness_set", _wrap_VizSettings_spacecraftShadowBrightness_set, METH_VARARGS, NULL},
	 { "VizSettings_spacecraftShadowBrightness_get", _wrap_VizSettings_spacecraftShadowBrightness_get, METH_O, NULL},
	 { "VizSettings_spacecraftSizeMultiplier_set", _wrap_VizSettings_spacecraftSizeMultiplier_set, METH_VARARGS, NULL},
	 { "VizSettings_spacecraftSizeMultiplier_get", _wrap_VizSettings_spacecraftSizeMultiplier_get, METH_O, NULL},
	 { "VizSettings_spacecraftHelioViewSizeMultiplier_set", _wrap_VizSettings_spacecraftHelioViewSizeMultiplier_set, METH_VARARGS, NULL},
	 { "VizSettings_spacecraftHelioViewSizeMultiplier_get", _wrap_VizSettings_spacecraftHelioViewSizeMultiplier_get, METH_O, NULL},
	 { "VizSettings_forceStartAtSpacecraftLocalView_set", _wrap_VizSettings_forceStartAtSpacecraftLocalView_set, METH_VARARGS, NULL},
	 { "VizSettings_forceStartAtSpacecraftLocalView_get", _wrap_VizSettings_forceStartAtSpacecraftLocalView_get, METH_O, NULL},
	 { "VizSettings_useSimpleLocationMarkers_set", _wrap_VizSettings_useSimpleLocationMarkers_set, METH_VARARGS, NULL},
	 { "VizSettings_useSimpleLocationMarkers_get", _wrap_VizSettings_useSimpleLocationMarkers_get, METH_O, NULL},
	 { "VizSettings_showLocationCommLines_set", _wrap_VizSettings_showLocationCommLines_set, METH_VARARGS, NULL},
	 { "VizSettings_showLocationCommLines_get", _wrap_VizSettings_showLocationCommLines_get, METH_O, NULL},
	 { "VizSettings_showLocationCones_set", _wrap_VizSettings_showLocationCones_set, METH_VARARGS, NULL},
	 { "VizSettings_showLocationCones_get", _wrap_VizSettings_showLocationCones_get, METH_O, NULL},
	 { "VizSettings_showLocationLabels_set", _wrap_VizSettings_showLocationLabels_set, METH_VARARGS, NULL},
	 { "VizSettings_showLocationLabels_get", _wrap_VizSettings_showLocationLabels_get, METH_O, NULL},
	 { "VizSettings_atmospheresOff_set", _wrap_VizSettings_atmospheresOff_set, METH_VARARGS, NULL},
	 { "VizSettings_atmospheresOff_get", _wrap_VizSettings_atmospheresOff_get, METH_O, NULL},
	 { "VizSettings_scViewToPlanetViewBoundaryMultiplier_set", _wrap_VizSettings_scViewToPlanetViewBoundaryMultiplier_set, METH_VARARGS, NULL},
	 { "VizSettings_scViewToPlanetViewBoundaryMultiplier_get", _wrap_VizSettings_scViewToPlanetViewBoundaryMultiplier_get, METH_O, NULL},
	 { "VizSettings_planetViewToHelioViewBoundaryMultiplier_set", _wrap_VizSettings_planetViewToHelioViewBoundaryMultiplier_set, METH_VARARGS, NULL},
	 { "VizSettings_planetViewToHelioViewBoundaryMultiplier_get", _wrap_VizSettings_planetViewToHelioViewBoundaryMultiplier_get, METH_O, NULL},
	 { "VizSettings_sunIntensity_set", _wrap_VizSettings_sunIntensity_set, METH_VARARGS, NULL},
	 { "VizSettings_sunIntensity_get", _wrap_VizSettings_sunIntensity_get, METH_O, NULL},
	 { "VizSettings_attenuateSunLightWithDistance_set", _wrap_VizSettings_attenuateSunLightWithDistance_set, METH_VARARGS, NULL},
	 { "VizSettings_attenuateSunLightWithDistance_get", _wrap_VizSettings_attenuateSunLightWithDistance_get, METH_O, NULL},
	 { "VizSettings_showLightLabels_set", _wrap_VizSettings_showLightLabels_set, METH_VARARGS, NULL},
	 { "VizSettings_showLightLabels_get", _wrap_VizSettings_showLightLabels_get, METH_O, NULL},
	 { "VizSettings_celestialBodyHelioViewSizeMultiplier_set", _wrap_VizSettings_celestialBodyHelioViewSizeMultiplier_set, METH_VARARGS, NULL},
	 { "VizSettings_celestialBodyHelioViewSizeMultiplier_get", _wrap_VizSettings_celestialBodyHelioViewSizeMultiplier_get, METH_O, NULL},
	 { "VizSettings_showMissionTime_set", _wrap_VizSettings_showMissionTime_set, METH_VARARGS, NULL},
	 { "VizSettings_showMissionTime_get", _wrap_VizSettings_showMissionTime_get, METH_O, NULL},
	 { "new_VizSettings", _wrap_new_VizSettings, METH_NOARGS, NULL},
	 { "delete_VizSettings", _wrap_delete_VizSettings, METH_O, NULL},
	 { "VizSettings_swigregister", VizSettings_swigregister, METH_O, NULL},
	 { "VizSettings_swiginit", VizSettings_swiginit, METH_VARARGS, NULL},
	 { "LiveVizSettings_targetLineList_set", _wrap_LiveVizSettings_targetLineList_set, METH_VARARGS, NULL},
	 { "LiveVizSettings_targetLineList_get", _wrap_LiveVizSettings_targetLineList_get, METH_O, NULL},
	 { "LiveVizSettings_relativeOrbitChief_set", _wrap_LiveVizSettings_relativeOrbitChief_set, METH_VARARGS, NULL},
	 { "LiveVizSettings_relativeOrbitChief_get", _wrap_LiveVizSettings_relativeOrbitChief_get, METH_O, NULL},
	 { "new_LiveVizSettings", _wrap_new_LiveVizSettings, METH_NOARGS, NULL},
	 { "delete_LiveVizSettings", _wrap_delete_LiveVizSettings, METH_O, NULL},
	 { "LiveVizSettings_swigregister", LiveVizSettings_swigregister, METH_O, NULL},
	 { "LiveVizSettings_swiginit", LiveVizSettings_swiginit, METH_VARARGS, NULL},
	 { "GravBodyInfo_bodyName_set", _wrap_GravBodyInfo_bodyName_set, METH_VARARGS, NULL},
	 { "GravBodyInfo_bodyName_get", _wrap_GravBodyInfo_bodyName_get, METH_O, NULL},
	 { "GravBodyInfo_mu_set", _wrap_GravBodyInfo_mu_set, METH_VARARGS, NULL},
	 { "GravBodyInfo_mu_get", _wrap_GravBodyInfo_mu_get, METH_O, NULL},
	 { "GravBodyInfo_radEquator_set", _wrap_GravBodyInfo_radEquator_set, METH_VARARGS, NULL},
	 { "GravBodyInfo_radEquator_get", _wrap_GravBodyInfo_radEquator_get, METH_O, NULL},
	 { "GravBodyInfo_radiusRatio_set", _wrap_GravBodyInfo_radiusRatio_set, METH_VARARGS, NULL},
	 { "GravBodyInfo_radiusRatio_get", _wrap_GravBodyInfo_radiusRatio_get, METH_O, NULL},
	 { "GravBodyInfo_modelDictionaryKey_set", _wrap_GravBodyInfo_modelDictionaryKey_set, METH_VARARGS, NULL},
	 { "GravBodyInfo_modelDictionaryKey_get", _wrap_GravBodyInfo_modelDictionaryKey_get, METH_O, NULL},
	 { "new_GravBodyInfo", _wrap_new_GravBodyInfo, METH_NOARGS, NULL},
	 { "delete_GravBodyInfo", _wrap_delete_GravBodyInfo, METH_O, NULL},
	 { "GravBodyInfo_swigregister", GravBodyInfo_swigregister, METH_O, NULL},
	 { "GravBodyInfo_swiginit", GravBodyInfo_swiginit, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_r_BN_N_set", _wrap_SCStatesMsgPayload_r_BN_N_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_r_BN_N_get", _wrap_SCStatesMsgPayload_r_BN_N_get, METH_O, NULL},
	 { "SCStatesMsgPayload_v_BN_N_set", _wrap_SCStatesMsgPayload_v_BN_N_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_v_BN_N_get", _wrap_SCStatesMsgPayload_v_BN_N_get, METH_O, NULL},
	 { "SCStatesMsgPayload_r_CN_N_set", _wrap_SCStatesMsgPayload_r_CN_N_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_r_CN_N_get", _wrap_SCStatesMsgPayload_r_CN_N_get, METH_O, NULL},
	 { "SCStatesMsgPayload_v_CN_N_set", _wrap_SCStatesMsgPayload_v_CN_N_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_v_CN_N_get", _wrap_SCStatesMsgPayload_v_CN_N_get, METH_O, NULL},
	 { "SCStatesMsgPayload_sigma_BN_set", _wrap_SCStatesMsgPayload_sigma_BN_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_sigma_BN_get", _wrap_SCStatesMsgPayload_sigma_BN_get, METH_O, NULL},
	 { "SCStatesMsgPayload_omega_BN_B_set", _wrap_SCStatesMsgPayload_omega_BN_B_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_omega_BN_B_get", _wrap_SCStatesMsgPayload_omega_BN_B_get, METH_O, NULL},
	 { "SCStatesMsgPayload_omegaDot_BN_B_set", _wrap_SCStatesMsgPayload_omegaDot_BN_B_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_omegaDot_BN_B_get", _wrap_SCStatesMsgPayload_omegaDot_BN_B_get, METH_O, NULL},
	 { "SCStatesMsgPayload_TotalAccumDVBdy_set", _wrap_SCStatesMsgPayload_TotalAccumDVBdy_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_TotalAccumDVBdy_get", _wrap_SCStatesMsgPayload_TotalAccumDVBdy_get, METH_O, NULL},
	 { "SCStatesMsgPayload_TotalAccumDV_BN_B_set", _wrap_SCStatesMsgPayload_TotalAccumDV_BN_B_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_TotalAccumDV_BN_B_get", _wrap_SCStatesMsgPayload_TotalAccumDV_BN_B_get, METH_O, NULL},
	 { "SCStatesMsgPayload_nonConservativeAccelpntB_B_set", _wrap_SCStatesMsgPayload_nonConservativeAccelpntB_B_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_nonConservativeAccelpntB_B_get", _wrap_SCStatesMsgPayload_nonConservativeAccelpntB_B_get, METH_O, NULL},
	 { "SCStatesMsgPayload_MRPSwitchCount_set", _wrap_SCStatesMsgPayload_MRPSwitchCount_set, METH_VARARGS, NULL},
	 { "SCStatesMsgPayload_MRPSwitchCount_get", _wrap_SCStatesMsgPayload_MRPSwitchCount_get, METH_O, NULL},
	 { "new_SCStatesMsgPayload", _wrap_new_SCStatesMsgPayload, METH_NOARGS, NULL},
	 { "delete_SCStatesMsgPayload", _wrap_delete_SCStatesMsgPayload, METH_O, NULL},
	 { "SCStatesMsgPayload_swigregister", SCStatesMsgPayload_swigregister, METH_O, NULL},
	 { "SCStatesMsgPayload_swiginit", SCStatesMsgPayload_swiginit, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_rWB_B_set", _wrap_RWConfigLogMsgPayload_rWB_B_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_rWB_B_get", _wrap_RWConfigLogMsgPayload_rWB_B_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_gsHat_B_set", _wrap_RWConfigLogMsgPayload_gsHat_B_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_gsHat_B_get", _wrap_RWConfigLogMsgPayload_gsHat_B_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_w2Hat0_B_set", _wrap_RWConfigLogMsgPayload_w2Hat0_B_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_w2Hat0_B_get", _wrap_RWConfigLogMsgPayload_w2Hat0_B_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_w3Hat0_B_set", _wrap_RWConfigLogMsgPayload_w3Hat0_B_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_w3Hat0_B_get", _wrap_RWConfigLogMsgPayload_w3Hat0_B_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_mass_set", _wrap_RWConfigLogMsgPayload_mass_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_mass_get", _wrap_RWConfigLogMsgPayload_mass_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_theta_set", _wrap_RWConfigLogMsgPayload_theta_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_theta_get", _wrap_RWConfigLogMsgPayload_theta_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_Omega_set", _wrap_RWConfigLogMsgPayload_Omega_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_Omega_get", _wrap_RWConfigLogMsgPayload_Omega_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_Js_set", _wrap_RWConfigLogMsgPayload_Js_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_Js_get", _wrap_RWConfigLogMsgPayload_Js_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_Jt_set", _wrap_RWConfigLogMsgPayload_Jt_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_Jt_get", _wrap_RWConfigLogMsgPayload_Jt_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_Jg_set", _wrap_RWConfigLogMsgPayload_Jg_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_Jg_get", _wrap_RWConfigLogMsgPayload_Jg_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_U_s_set", _wrap_RWConfigLogMsgPayload_U_s_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_U_s_get", _wrap_RWConfigLogMsgPayload_U_s_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_U_d_set", _wrap_RWConfigLogMsgPayload_U_d_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_U_d_get", _wrap_RWConfigLogMsgPayload_U_d_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_d_set", _wrap_RWConfigLogMsgPayload_d_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_d_get", _wrap_RWConfigLogMsgPayload_d_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_J13_set", _wrap_RWConfigLogMsgPayload_J13_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_J13_get", _wrap_RWConfigLogMsgPayload_J13_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_u_current_set", _wrap_RWConfigLogMsgPayload_u_current_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_u_current_get", _wrap_RWConfigLogMsgPayload_u_current_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_frictionTorque_set", _wrap_RWConfigLogMsgPayload_frictionTorque_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_frictionTorque_get", _wrap_RWConfigLogMsgPayload_frictionTorque_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_u_max_set", _wrap_RWConfigLogMsgPayload_u_max_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_u_max_get", _wrap_RWConfigLogMsgPayload_u_max_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_u_min_set", _wrap_RWConfigLogMsgPayload_u_min_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_u_min_get", _wrap_RWConfigLogMsgPayload_u_min_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_u_f_set", _wrap_RWConfigLogMsgPayload_u_f_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_u_f_get", _wrap_RWConfigLogMsgPayload_u_f_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_Omega_max_set", _wrap_RWConfigLogMsgPayload_Omega_max_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_Omega_max_get", _wrap_RWConfigLogMsgPayload_Omega_max_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_P_max_set", _wrap_RWConfigLogMsgPayload_P_max_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_P_max_get", _wrap_RWConfigLogMsgPayload_P_max_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_linearFrictionRatio_set", _wrap_RWConfigLogMsgPayload_linearFrictionRatio_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_linearFrictionRatio_get", _wrap_RWConfigLogMsgPayload_linearFrictionRatio_get, METH_O, NULL},
	 { "RWConfigLogMsgPayload_RWModel_set", _wrap_RWConfigLogMsgPayload_RWModel_set, METH_VARARGS, NULL},
	 { "RWConfigLogMsgPayload_RWModel_get", _wrap_RWConfigLogMsgPayload_RWModel_get, METH_O, NULL},
	 { "new_RWConfigLogMsgPayload", _wrap_new_RWConfigLogMsgPayload, METH_NOARGS, NULL},
	 { "delete_RWConfigLogMsgPayload", _wrap_delete_RWConfigLogMsgPayload, METH_O, NULL},
	 { "RWConfigLogMsgPayload_swigregister", RWConfigLogMsgPayload_swigregister, METH_O, NULL},
	 { "RWConfigLogMsgPayload_swiginit", RWConfigLogMsgPayload_swiginit, METH_VARARGS, NULL},
	 { "THROutputMsgPayload_maxThrust_set", _wrap_THROutputMsgPayload_maxThrust_set, METH_VARARGS, NULL},
	 { "THROutputMsgPayload_maxThrust_get", _wrap_THROutputMsgPayload_maxThrust_get, METH_O, NULL},
	 { "THROutputMsgPayload_thrustFactor_set", _wrap_THROutputMsgPayload_thrustFactor_set, METH_VARARGS, NULL},
	 { "THROutputMsgPayload_thrustFactor_get", _wrap_THROutputMsgPayload_thrustFactor_get, METH_O, NULL},
	 { "THROutputMsgPayload_thrustForce_set", _wrap_THROutputMsgPayload_thrustForce_set, METH_VARARGS, NULL},
	 { "THROutputMsgPayload_thrustForce_get", _wrap_THROutputMsgPayload_thrustForce_get, METH_O, NULL},
	 { "THROutputMsgPayload_thrustForce_B_set", _wrap_THROutputMsgPayload_thrustForce_B_set, METH_VARARGS, NULL},
	 { "THROutputMsgPayload_thrustForce_B_get", _wrap_THROutputMsgPayload_thrustForce_B_get, METH_O, NULL},
	 { "THROutputMsgPayload_thrustTorquePntB_B_set", _wrap_THROutputMsgPayload_thrustTorquePntB_B_set, METH_VARARGS, NULL},
	 { "THROutputMsgPayload_thrustTorquePntB_B_get", _wrap_THROutputMsgPayload_thrustTorquePntB_B_get, METH_O, NULL},
	 { "THROutputMsgPayload_thrusterLocation_set", _wrap_THROutputMsgPayload_thrusterLocation_set, METH_VARARGS, NULL},
	 { "THROutputMsgPayload_thrusterLocation_get", _wrap_THROutputMsgPayload_thrusterLocation_get, METH_O, NULL},
	 { "THROutputMsgPayload_thrusterDirection_set", _wrap_THROutputMsgPayload_thrusterDirection_set, METH_VARARGS, NULL},
	 { "THROutputMsgPayload_thrusterDirection_get", _wrap_THROutputMsgPayload_thrusterDirection_get, METH_O, NULL},
	 { "new_THROutputMsgPayload", _wrap_new_THROutputMsgPayload, METH_NOARGS, NULL},
	 { "delete_THROutputMsgPayload", _wrap_delete_THROutputMsgPayload, METH_O, NULL},
	 { "THROutputMsgPayload_swigregister", THROutputMsgPayload_swigregister, METH_O, NULL},
	 { "THROutputMsgPayload_swiginit", THROutputMsgPayload_swiginit, METH_VARARGS, NULL},
	 { "VizThrConfig_iterator", _wrap_VizThrConfig_iterator, METH_O, NULL},
	 { "VizThrConfig___nonzero__", _wrap_VizThrConfig___nonzero__, METH_O, NULL},
	 { "VizThrConfig___bool__", _wrap_VizThrConfig___bool__, METH_O, NULL},
	 { "VizThrConfig___len__", _wrap_VizThrConfig___len__, METH_O, NULL},
	 { "VizThrConfig___getslice__", _wrap_VizThrConfig___getslice__, METH_VARARGS, NULL},
	 { "VizThrConfig___setslice__", _wrap_VizThrConfig___setslice__, METH_VARARGS, NULL},
	 { "VizThrConfig___delslice__", _wrap_VizThrConfig___delslice__, METH_VARARGS, NULL},
	 { "VizThrConfig___delitem__", _wrap_VizThrConfig___delitem__, METH_VARARGS, NULL},
	 { "VizThrConfig___getitem__", _wrap_VizThrConfig___getitem__, METH_VARARGS, NULL},
	 { "VizThrConfig___setitem__", _wrap_VizThrConfig___setitem__, METH_VARARGS, NULL},
	 { "VizThrConfig_pop", _wrap_VizThrConfig_pop, METH_O, NULL},
	 { "VizThrConfig_append", _wrap_VizThrConfig_append, METH_VARARGS, NULL},
	 { "VizThrConfig_empty", _wrap_VizThrConfig_empty, METH_O, NULL},
	 { "VizThrConfig_size", _wrap_VizThrConfig_size, METH_O, NULL},
	 { "VizThrConfig_swap", _wrap_VizThrConfig_swap, METH_VARARGS, NULL},
	 { "VizThrConfig_begin", _wrap_VizThrConfig_begin, METH_O, NULL},
	 { "VizThrConfig_end", _wrap_VizThrConfig_end, METH_O, NULL},
	 { "VizThrConfig_rbegin", _wrap_VizThrConfig_rbegin, METH_O, NULL},
	 { "VizThrConfig_rend", _wrap_VizThrConfig_rend, METH_O, NULL},
	 { "VizThrConfig_clear", _wrap_VizThrConfig_clear, METH_O, NULL},
	 { "VizThrConfig_get_allocator", _wrap_VizThrConfig_get_allocator, METH_O, NULL},
	 { "VizThrConfig_pop_back", _wrap_VizThrConfig_pop_back, METH_O, NULL},
	 { "VizThrConfig_erase", _wrap_VizThrConfig_erase, METH_VARARGS, NULL},
	 { "new_VizThrConfig", _wrap_new_VizThrConfig, METH_VARARGS, NULL},
	 { "VizThrConfig_push_back", _wrap_VizThrConfig_push_back, METH_VARARGS, NULL},
	 { "VizThrConfig_front", _wrap_VizThrConfig_front, METH_O, NULL},
	 { "VizThrConfig_back", _wrap_VizThrConfig_back, METH_O, NULL},
	 { "VizThrConfig_assign", _wrap_VizThrConfig_assign, METH_VARARGS, NULL},
	 { "VizThrConfig_resize", _wrap_VizThrConfig_resize, METH_VARARGS, NULL},
	 { "VizThrConfig_insert", _wrap_VizThrConfig_insert, METH_VARARGS, NULL},
	 { "VizThrConfig_reserve", _wrap_VizThrConfig_reserve, METH_VARARGS, NULL},
	 { "VizThrConfig_capacity", _wrap_VizThrConfig_capacity, METH_O, NULL},
	 { "delete_VizThrConfig", _wrap_delete_VizThrConfig, METH_O, NULL},
	 { "VizThrConfig_swigregister", VizThrConfig_swigregister, METH_O, NULL},
	 { "VizThrConfig_swiginit", VizThrConfig_swiginit, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_iterator", _wrap_ThrClusterMapVectorVector_iterator, METH_O, NULL},
	 { "ThrClusterMapVectorVector___nonzero__", _wrap_ThrClusterMapVectorVector___nonzero__, METH_O, NULL},
	 { "ThrClusterMapVectorVector___bool__", _wrap_ThrClusterMapVectorVector___bool__, METH_O, NULL},
	 { "ThrClusterMapVectorVector___len__", _wrap_ThrClusterMapVectorVector___len__, METH_O, NULL},
	 { "ThrClusterMapVectorVector___getslice__", _wrap_ThrClusterMapVectorVector___getslice__, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector___setslice__", _wrap_ThrClusterMapVectorVector___setslice__, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector___delslice__", _wrap_ThrClusterMapVectorVector___delslice__, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector___delitem__", _wrap_ThrClusterMapVectorVector___delitem__, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector___getitem__", _wrap_ThrClusterMapVectorVector___getitem__, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector___setitem__", _wrap_ThrClusterMapVectorVector___setitem__, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_pop", _wrap_ThrClusterMapVectorVector_pop, METH_O, NULL},
	 { "ThrClusterMapVectorVector_append", _wrap_ThrClusterMapVectorVector_append, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_empty", _wrap_ThrClusterMapVectorVector_empty, METH_O, NULL},
	 { "ThrClusterMapVectorVector_size", _wrap_ThrClusterMapVectorVector_size, METH_O, NULL},
	 { "ThrClusterMapVectorVector_swap", _wrap_ThrClusterMapVectorVector_swap, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_begin", _wrap_ThrClusterMapVectorVector_begin, METH_O, NULL},
	 { "ThrClusterMapVectorVector_end", _wrap_ThrClusterMapVectorVector_end, METH_O, NULL},
	 { "ThrClusterMapVectorVector_rbegin", _wrap_ThrClusterMapVectorVector_rbegin, METH_O, NULL},
	 { "ThrClusterMapVectorVector_rend", _wrap_ThrClusterMapVectorVector_rend, METH_O, NULL},
	 { "ThrClusterMapVectorVector_clear", _wrap_ThrClusterMapVectorVector_clear, METH_O, NULL},
	 { "ThrClusterMapVectorVector_get_allocator", _wrap_ThrClusterMapVectorVector_get_allocator, METH_O, NULL},
	 { "ThrClusterMapVectorVector_pop_back", _wrap_ThrClusterMapVectorVector_pop_back, METH_O, NULL},
	 { "ThrClusterMapVectorVector_erase", _wrap_ThrClusterMapVectorVector_erase, METH_VARARGS, NULL},
	 { "new_ThrClusterMapVectorVector", _wrap_new_ThrClusterMapVectorVector, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_push_back", _wrap_ThrClusterMapVectorVector_push_back, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_front", _wrap_ThrClusterMapVectorVector_front, METH_O, NULL},
	 { "ThrClusterMapVectorVector_back", _wrap_ThrClusterMapVectorVector_back, METH_O, NULL},
	 { "ThrClusterMapVectorVector_assign", _wrap_ThrClusterMapVectorVector_assign, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_resize", _wrap_ThrClusterMapVectorVector_resize, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_insert", _wrap_ThrClusterMapVectorVector_insert, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_reserve", _wrap_ThrClusterMapVectorVector_reserve, METH_VARARGS, NULL},
	 { "ThrClusterMapVectorVector_capacity", _wrap_ThrClusterMapVectorVector_capacity, METH_O, NULL},
	 { "delete_ThrClusterMapVectorVector", _wrap_delete_ThrClusterMapVectorVector, METH_O, NULL},
	 { "ThrClusterMapVectorVector_swigregister", ThrClusterMapVectorVector_swigregister, METH_O, NULL},
	 { "ThrClusterMapVectorVector_swiginit", ThrClusterMapVectorVector_swiginit, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_iterator", _wrap_THROutputMsgOutMsgsVector_iterator, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector___nonzero__", _wrap_THROutputMsgOutMsgsVector___nonzero__, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector___bool__", _wrap_THROutputMsgOutMsgsVector___bool__, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector___len__", _wrap_THROutputMsgOutMsgsVector___len__, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector___getslice__", _wrap_THROutputMsgOutMsgsVector___getslice__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector___setslice__", _wrap_THROutputMsgOutMsgsVector___setslice__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector___delslice__", _wrap_THROutputMsgOutMsgsVector___delslice__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector___delitem__", _wrap_THROutputMsgOutMsgsVector___delitem__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector___getitem__", _wrap_THROutputMsgOutMsgsVector___getitem__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector___setitem__", _wrap_THROutputMsgOutMsgsVector___setitem__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_pop", _wrap_THROutputMsgOutMsgsVector_pop, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_append", _wrap_THROutputMsgOutMsgsVector_append, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_empty", _wrap_THROutputMsgOutMsgsVector_empty, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_size", _wrap_THROutputMsgOutMsgsVector_size, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_swap", _wrap_THROutputMsgOutMsgsVector_swap, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_begin", _wrap_THROutputMsgOutMsgsVector_begin, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_end", _wrap_THROutputMsgOutMsgsVector_end, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_rbegin", _wrap_THROutputMsgOutMsgsVector_rbegin, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_rend", _wrap_THROutputMsgOutMsgsVector_rend, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_clear", _wrap_THROutputMsgOutMsgsVector_clear, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_get_allocator", _wrap_THROutputMsgOutMsgsVector_get_allocator, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_pop_back", _wrap_THROutputMsgOutMsgsVector_pop_back, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_erase", _wrap_THROutputMsgOutMsgsVector_erase, METH_VARARGS, NULL},
	 { "new_THROutputMsgOutMsgsVector", _wrap_new_THROutputMsgOutMsgsVector, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_push_back", _wrap_THROutputMsgOutMsgsVector_push_back, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_front", _wrap_THROutputMsgOutMsgsVector_front, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_back", _wrap_THROutputMsgOutMsgsVector_back, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_assign", _wrap_THROutputMsgOutMsgsVector_assign, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_resize", _wrap_THROutputMsgOutMsgsVector_resize, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_insert", _wrap_THROutputMsgOutMsgsVector_insert, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_reserve", _wrap_THROutputMsgOutMsgsVector_reserve, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsVector_capacity", _wrap_THROutputMsgOutMsgsVector_capacity, METH_O, NULL},
	 { "delete_THROutputMsgOutMsgsVector", _wrap_delete_THROutputMsgOutMsgsVector, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_swigregister", THROutputMsgOutMsgsVector_swigregister, METH_O, NULL},
	 { "THROutputMsgOutMsgsVector_swiginit", THROutputMsgOutMsgsVector_swiginit, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_iterator", _wrap_THROutputMsgOutMsgsPtrVector_iterator, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector___nonzero__", _wrap_THROutputMsgOutMsgsPtrVector___nonzero__, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector___bool__", _wrap_THROutputMsgOutMsgsPtrVector___bool__, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector___len__", _wrap_THROutputMsgOutMsgsPtrVector___len__, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector___getslice__", _wrap_THROutputMsgOutMsgsPtrVector___getslice__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector___setslice__", _wrap_THROutputMsgOutMsgsPtrVector___setslice__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector___delslice__", _wrap_THROutputMsgOutMsgsPtrVector___delslice__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector___delitem__", _wrap_THROutputMsgOutMsgsPtrVector___delitem__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector___getitem__", _wrap_THROutputMsgOutMsgsPtrVector___getitem__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector___setitem__", _wrap_THROutputMsgOutMsgsPtrVector___setitem__, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_pop", _wrap_THROutputMsgOutMsgsPtrVector_pop, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_append", _wrap_THROutputMsgOutMsgsPtrVector_append, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_empty", _wrap_THROutputMsgOutMsgsPtrVector_empty, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_size", _wrap_THROutputMsgOutMsgsPtrVector_size, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_swap", _wrap_THROutputMsgOutMsgsPtrVector_swap, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_begin", _wrap_THROutputMsgOutMsgsPtrVector_begin, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_end", _wrap_THROutputMsgOutMsgsPtrVector_end, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_rbegin", _wrap_THROutputMsgOutMsgsPtrVector_rbegin, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_rend", _wrap_THROutputMsgOutMsgsPtrVector_rend, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_clear", _wrap_THROutputMsgOutMsgsPtrVector_clear, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_get_allocator", _wrap_THROutputMsgOutMsgsPtrVector_get_allocator, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_pop_back", _wrap_THROutputMsgOutMsgsPtrVector_pop_back, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_erase", _wrap_THROutputMsgOutMsgsPtrVector_erase, METH_VARARGS, NULL},
	 { "new_THROutputMsgOutMsgsPtrVector", _wrap_new_THROutputMsgOutMsgsPtrVector, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_push_back", _wrap_THROutputMsgOutMsgsPtrVector_push_back, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_front", _wrap_THROutputMsgOutMsgsPtrVector_front, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_back", _wrap_THROutputMsgOutMsgsPtrVector_back, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_assign", _wrap_THROutputMsgOutMsgsPtrVector_assign, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_resize", _wrap_THROutputMsgOutMsgsPtrVector_resize, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_insert", _wrap_THROutputMsgOutMsgsPtrVector_insert, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_reserve", _wrap_THROutputMsgOutMsgsPtrVector_reserve, METH_VARARGS, NULL},
	 { "THROutputMsgOutMsgsPtrVector_capacity", _wrap_THROutputMsgOutMsgsPtrVector_capacity, METH_O, NULL},
	 { "delete_THROutputMsgOutMsgsPtrVector", _wrap_delete_THROutputMsgOutMsgsPtrVector, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_swigregister", THROutputMsgOutMsgsPtrVector_swigregister, METH_O, NULL},
	 { "THROutputMsgOutMsgsPtrVector_swiginit", THROutputMsgOutMsgsPtrVector_swiginit, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_iterator", _wrap_THROutputMsgInMsgsVector_iterator, METH_O, NULL},
	 { "THROutputMsgInMsgsVector___nonzero__", _wrap_THROutputMsgInMsgsVector___nonzero__, METH_O, NULL},
	 { "THROutputMsgInMsgsVector___bool__", _wrap_THROutputMsgInMsgsVector___bool__, METH_O, NULL},
	 { "THROutputMsgInMsgsVector___len__", _wrap_THROutputMsgInMsgsVector___len__, METH_O, NULL},
	 { "THROutputMsgInMsgsVector___getslice__", _wrap_THROutputMsgInMsgsVector___getslice__, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector___setslice__", _wrap_THROutputMsgInMsgsVector___setslice__, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector___delslice__", _wrap_THROutputMsgInMsgsVector___delslice__, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector___delitem__", _wrap_THROutputMsgInMsgsVector___delitem__, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector___getitem__", _wrap_THROutputMsgInMsgsVector___getitem__, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector___setitem__", _wrap_THROutputMsgInMsgsVector___setitem__, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_pop", _wrap_THROutputMsgInMsgsVector_pop, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_append", _wrap_THROutputMsgInMsgsVector_append, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_empty", _wrap_THROutputMsgInMsgsVector_empty, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_size", _wrap_THROutputMsgInMsgsVector_size, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_swap", _wrap_THROutputMsgInMsgsVector_swap, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_begin", _wrap_THROutputMsgInMsgsVector_begin, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_end", _wrap_THROutputMsgInMsgsVector_end, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_rbegin", _wrap_THROutputMsgInMsgsVector_rbegin, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_rend", _wrap_THROutputMsgInMsgsVector_rend, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_clear", _wrap_THROutputMsgInMsgsVector_clear, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_get_allocator", _wrap_THROutputMsgInMsgsVector_get_allocator, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_pop_back", _wrap_THROutputMsgInMsgsVector_pop_back, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_erase", _wrap_THROutputMsgInMsgsVector_erase, METH_VARARGS, NULL},
	 { "new_THROutputMsgInMsgsVector", _wrap_new_THROutputMsgInMsgsVector, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_push_back", _wrap_THROutputMsgInMsgsVector_push_back, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_front", _wrap_THROutputMsgInMsgsVector_front, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_back", _wrap_THROutputMsgInMsgsVector_back, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_assign", _wrap_THROutputMsgInMsgsVector_assign, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_resize", _wrap_THROutputMsgInMsgsVector_resize, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_insert", _wrap_THROutputMsgInMsgsVector_insert, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_reserve", _wrap_THROutputMsgInMsgsVector_reserve, METH_VARARGS, NULL},
	 { "THROutputMsgInMsgsVector_capacity", _wrap_THROutputMsgInMsgsVector_capacity, METH_O, NULL},
	 { "delete_THROutputMsgInMsgsVector", _wrap_delete_THROutputMsgInMsgsVector, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_swigregister", THROutputMsgInMsgsVector_swigregister, METH_O, NULL},
	 { "THROutputMsgInMsgsVector_swiginit", THROutputMsgInMsgsVector_swiginit, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_iterator", _wrap_THROutputOutMsgsVectorVector_iterator, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector___nonzero__", _wrap_THROutputOutMsgsVectorVector___nonzero__, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector___bool__", _wrap_THROutputOutMsgsVectorVector___bool__, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector___len__", _wrap_THROutputOutMsgsVectorVector___len__, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector___getslice__", _wrap_THROutputOutMsgsVectorVector___getslice__, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector___setslice__", _wrap_THROutputOutMsgsVectorVector___setslice__, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector___delslice__", _wrap_THROutputOutMsgsVectorVector___delslice__, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector___delitem__", _wrap_THROutputOutMsgsVectorVector___delitem__, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector___getitem__", _wrap_THROutputOutMsgsVectorVector___getitem__, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector___setitem__", _wrap_THROutputOutMsgsVectorVector___setitem__, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_pop", _wrap_THROutputOutMsgsVectorVector_pop, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_append", _wrap_THROutputOutMsgsVectorVector_append, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_empty", _wrap_THROutputOutMsgsVectorVector_empty, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_size", _wrap_THROutputOutMsgsVectorVector_size, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_swap", _wrap_THROutputOutMsgsVectorVector_swap, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_begin", _wrap_THROutputOutMsgsVectorVector_begin, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_end", _wrap_THROutputOutMsgsVectorVector_end, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_rbegin", _wrap_THROutputOutMsgsVectorVector_rbegin, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_rend", _wrap_THROutputOutMsgsVectorVector_rend, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_clear", _wrap_THROutputOutMsgsVectorVector_clear, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_get_allocator", _wrap_THROutputOutMsgsVectorVector_get_allocator, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_pop_back", _wrap_THROutputOutMsgsVectorVector_pop_back, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_erase", _wrap_THROutputOutMsgsVectorVector_erase, METH_VARARGS, NULL},
	 { "new_THROutputOutMsgsVectorVector", _wrap_new_THROutputOutMsgsVectorVector, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_push_back", _wrap_THROutputOutMsgsVectorVector_push_back, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_front", _wrap_THROutputOutMsgsVectorVector_front, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_back", _wrap_THROutputOutMsgsVectorVector_back, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_assign", _wrap_THROutputOutMsgsVectorVector_assign, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_resize", _wrap_THROutputOutMsgsVectorVector_resize, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_insert", _wrap_THROutputOutMsgsVectorVector_insert, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_reserve", _wrap_THROutputOutMsgsVectorVector_reserve, METH_VARARGS, NULL},
	 { "THROutputOutMsgsVectorVector_capacity", _wrap_THROutputOutMsgsVectorVector_capacity, METH_O, NULL},
	 { "delete_THROutputOutMsgsVectorVector", _wrap_delete_THROutputOutMsgsVectorVector, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_swigregister", THROutputOutMsgsVectorVector_swigregister, METH_O, NULL},
	 { "THROutputOutMsgsVectorVector_swiginit", THROutputOutMsgsVectorVector_swiginit, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_iterator", _wrap_RWConfigLogMsgOutMsgsVector_iterator, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector___nonzero__", _wrap_RWConfigLogMsgOutMsgsVector___nonzero__, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector___bool__", _wrap_RWConfigLogMsgOutMsgsVector___bool__, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector___len__", _wrap_RWConfigLogMsgOutMsgsVector___len__, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector___getslice__", _wrap_RWConfigLogMsgOutMsgsVector___getslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector___setslice__", _wrap_RWConfigLogMsgOutMsgsVector___setslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector___delslice__", _wrap_RWConfigLogMsgOutMsgsVector___delslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector___delitem__", _wrap_RWConfigLogMsgOutMsgsVector___delitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector___getitem__", _wrap_RWConfigLogMsgOutMsgsVector___getitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector___setitem__", _wrap_RWConfigLogMsgOutMsgsVector___setitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_pop", _wrap_RWConfigLogMsgOutMsgsVector_pop, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_append", _wrap_RWConfigLogMsgOutMsgsVector_append, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_empty", _wrap_RWConfigLogMsgOutMsgsVector_empty, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_size", _wrap_RWConfigLogMsgOutMsgsVector_size, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_swap", _wrap_RWConfigLogMsgOutMsgsVector_swap, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_begin", _wrap_RWConfigLogMsgOutMsgsVector_begin, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_end", _wrap_RWConfigLogMsgOutMsgsVector_end, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_rbegin", _wrap_RWConfigLogMsgOutMsgsVector_rbegin, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_rend", _wrap_RWConfigLogMsgOutMsgsVector_rend, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_clear", _wrap_RWConfigLogMsgOutMsgsVector_clear, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_get_allocator", _wrap_RWConfigLogMsgOutMsgsVector_get_allocator, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_pop_back", _wrap_RWConfigLogMsgOutMsgsVector_pop_back, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_erase", _wrap_RWConfigLogMsgOutMsgsVector_erase, METH_VARARGS, NULL},
	 { "new_RWConfigLogMsgOutMsgsVector", _wrap_new_RWConfigLogMsgOutMsgsVector, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_push_back", _wrap_RWConfigLogMsgOutMsgsVector_push_back, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_front", _wrap_RWConfigLogMsgOutMsgsVector_front, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_back", _wrap_RWConfigLogMsgOutMsgsVector_back, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_assign", _wrap_RWConfigLogMsgOutMsgsVector_assign, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_resize", _wrap_RWConfigLogMsgOutMsgsVector_resize, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_insert", _wrap_RWConfigLogMsgOutMsgsVector_insert, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_reserve", _wrap_RWConfigLogMsgOutMsgsVector_reserve, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsVector_capacity", _wrap_RWConfigLogMsgOutMsgsVector_capacity, METH_O, NULL},
	 { "delete_RWConfigLogMsgOutMsgsVector", _wrap_delete_RWConfigLogMsgOutMsgsVector, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_swigregister", RWConfigLogMsgOutMsgsVector_swigregister, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsVector_swiginit", RWConfigLogMsgOutMsgsVector_swiginit, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_iterator", _wrap_RWConfigLogMsgOutMsgsPtrVector_iterator, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___nonzero__", _wrap_RWConfigLogMsgOutMsgsPtrVector___nonzero__, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___bool__", _wrap_RWConfigLogMsgOutMsgsPtrVector___bool__, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___len__", _wrap_RWConfigLogMsgOutMsgsPtrVector___len__, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___getslice__", _wrap_RWConfigLogMsgOutMsgsPtrVector___getslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___setslice__", _wrap_RWConfigLogMsgOutMsgsPtrVector___setslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___delslice__", _wrap_RWConfigLogMsgOutMsgsPtrVector___delslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___delitem__", _wrap_RWConfigLogMsgOutMsgsPtrVector___delitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___getitem__", _wrap_RWConfigLogMsgOutMsgsPtrVector___getitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector___setitem__", _wrap_RWConfigLogMsgOutMsgsPtrVector___setitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_pop", _wrap_RWConfigLogMsgOutMsgsPtrVector_pop, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_append", _wrap_RWConfigLogMsgOutMsgsPtrVector_append, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_empty", _wrap_RWConfigLogMsgOutMsgsPtrVector_empty, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_size", _wrap_RWConfigLogMsgOutMsgsPtrVector_size, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_swap", _wrap_RWConfigLogMsgOutMsgsPtrVector_swap, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_begin", _wrap_RWConfigLogMsgOutMsgsPtrVector_begin, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_end", _wrap_RWConfigLogMsgOutMsgsPtrVector_end, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_rbegin", _wrap_RWConfigLogMsgOutMsgsPtrVector_rbegin, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_rend", _wrap_RWConfigLogMsgOutMsgsPtrVector_rend, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_clear", _wrap_RWConfigLogMsgOutMsgsPtrVector_clear, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_get_allocator", _wrap_RWConfigLogMsgOutMsgsPtrVector_get_allocator, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_pop_back", _wrap_RWConfigLogMsgOutMsgsPtrVector_pop_back, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_erase", _wrap_RWConfigLogMsgOutMsgsPtrVector_erase, METH_VARARGS, NULL},
	 { "new_RWConfigLogMsgOutMsgsPtrVector", _wrap_new_RWConfigLogMsgOutMsgsPtrVector, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_push_back", _wrap_RWConfigLogMsgOutMsgsPtrVector_push_back, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_front", _wrap_RWConfigLogMsgOutMsgsPtrVector_front, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_back", _wrap_RWConfigLogMsgOutMsgsPtrVector_back, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_assign", _wrap_RWConfigLogMsgOutMsgsPtrVector_assign, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_resize", _wrap_RWConfigLogMsgOutMsgsPtrVector_resize, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_insert", _wrap_RWConfigLogMsgOutMsgsPtrVector_insert, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_reserve", _wrap_RWConfigLogMsgOutMsgsPtrVector_reserve, METH_VARARGS, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_capacity", _wrap_RWConfigLogMsgOutMsgsPtrVector_capacity, METH_O, NULL},
	 { "delete_RWConfigLogMsgOutMsgsPtrVector", _wrap_delete_RWConfigLogMsgOutMsgsPtrVector, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_swigregister", RWConfigLogMsgOutMsgsPtrVector_swigregister, METH_O, NULL},
	 { "RWConfigLogMsgOutMsgsPtrVector_swiginit", RWConfigLogMsgOutMsgsPtrVector_swiginit, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_iterator", _wrap_RWConfigLogMsgInMsgsVector_iterator, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector___nonzero__", _wrap_RWConfigLogMsgInMsgsVector___nonzero__, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector___bool__", _wrap_RWConfigLogMsgInMsgsVector___bool__, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector___len__", _wrap_RWConfigLogMsgInMsgsVector___len__, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector___getslice__", _wrap_RWConfigLogMsgInMsgsVector___getslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector___setslice__", _wrap_RWConfigLogMsgInMsgsVector___setslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector___delslice__", _wrap_RWConfigLogMsgInMsgsVector___delslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector___delitem__", _wrap_RWConfigLogMsgInMsgsVector___delitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector___getitem__", _wrap_RWConfigLogMsgInMsgsVector___getitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector___setitem__", _wrap_RWConfigLogMsgInMsgsVector___setitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_pop", _wrap_RWConfigLogMsgInMsgsVector_pop, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_append", _wrap_RWConfigLogMsgInMsgsVector_append, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_empty", _wrap_RWConfigLogMsgInMsgsVector_empty, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_size", _wrap_RWConfigLogMsgInMsgsVector_size, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_swap", _wrap_RWConfigLogMsgInMsgsVector_swap, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_begin", _wrap_RWConfigLogMsgInMsgsVector_begin, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_end", _wrap_RWConfigLogMsgInMsgsVector_end, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_rbegin", _wrap_RWConfigLogMsgInMsgsVector_rbegin, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_rend", _wrap_RWConfigLogMsgInMsgsVector_rend, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_clear", _wrap_RWConfigLogMsgInMsgsVector_clear, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_get_allocator", _wrap_RWConfigLogMsgInMsgsVector_get_allocator, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_pop_back", _wrap_RWConfigLogMsgInMsgsVector_pop_back, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_erase", _wrap_RWConfigLogMsgInMsgsVector_erase, METH_VARARGS, NULL},
	 { "new_RWConfigLogMsgInMsgsVector", _wrap_new_RWConfigLogMsgInMsgsVector, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_push_back", _wrap_RWConfigLogMsgInMsgsVector_push_back, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_front", _wrap_RWConfigLogMsgInMsgsVector_front, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_back", _wrap_RWConfigLogMsgInMsgsVector_back, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_assign", _wrap_RWConfigLogMsgInMsgsVector_assign, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_resize", _wrap_RWConfigLogMsgInMsgsVector_resize, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_insert", _wrap_RWConfigLogMsgInMsgsVector_insert, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_reserve", _wrap_RWConfigLogMsgInMsgsVector_reserve, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVector_capacity", _wrap_RWConfigLogMsgInMsgsVector_capacity, METH_O, NULL},
	 { "delete_RWConfigLogMsgInMsgsVector", _wrap_delete_RWConfigLogMsgInMsgsVector, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_swigregister", RWConfigLogMsgInMsgsVector_swigregister, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVector_swiginit", RWConfigLogMsgInMsgsVector_swiginit, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_iterator", _wrap_RWConfigLogMsgInMsgsVectorVector_iterator, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___nonzero__", _wrap_RWConfigLogMsgInMsgsVectorVector___nonzero__, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___bool__", _wrap_RWConfigLogMsgInMsgsVectorVector___bool__, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___len__", _wrap_RWConfigLogMsgInMsgsVectorVector___len__, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___getslice__", _wrap_RWConfigLogMsgInMsgsVectorVector___getslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___setslice__", _wrap_RWConfigLogMsgInMsgsVectorVector___setslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___delslice__", _wrap_RWConfigLogMsgInMsgsVectorVector___delslice__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___delitem__", _wrap_RWConfigLogMsgInMsgsVectorVector___delitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___getitem__", _wrap_RWConfigLogMsgInMsgsVectorVector___getitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector___setitem__", _wrap_RWConfigLogMsgInMsgsVectorVector___setitem__, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_pop", _wrap_RWConfigLogMsgInMsgsVectorVector_pop, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_append", _wrap_RWConfigLogMsgInMsgsVectorVector_append, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_empty", _wrap_RWConfigLogMsgInMsgsVectorVector_empty, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_size", _wrap_RWConfigLogMsgInMsgsVectorVector_size, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_swap", _wrap_RWConfigLogMsgInMsgsVectorVector_swap, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_begin", _wrap_RWConfigLogMsgInMsgsVectorVector_begin, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_end", _wrap_RWConfigLogMsgInMsgsVectorVector_end, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_rbegin", _wrap_RWConfigLogMsgInMsgsVectorVector_rbegin, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_rend", _wrap_RWConfigLogMsgInMsgsVectorVector_rend, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_clear", _wrap_RWConfigLogMsgInMsgsVectorVector_clear, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_get_allocator", _wrap_RWConfigLogMsgInMsgsVectorVector_get_allocator, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_pop_back", _wrap_RWConfigLogMsgInMsgsVectorVector_pop_back, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_erase", _wrap_RWConfigLogMsgInMsgsVectorVector_erase, METH_VARARGS, NULL},
	 { "new_RWConfigLogMsgInMsgsVectorVector", _wrap_new_RWConfigLogMsgInMsgsVectorVector, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_push_back", _wrap_RWConfigLogMsgInMsgsVectorVector_push_back, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_front", _wrap_RWConfigLogMsgInMsgsVectorVector_front, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_back", _wrap_RWConfigLogMsgInMsgsVectorVector_back, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_assign", _wrap_RWConfigLogMsgInMsgsVectorVector_assign, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_resize", _wrap_RWConfigLogMsgInMsgsVectorVector_resize, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_insert", _wrap_RWConfigLogMsgInMsgsVectorVector_insert, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_reserve", _wrap_RWConfigLogMsgInMsgsVectorVector_reserve, METH_VARARGS, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_capacity", _wrap_RWConfigLogMsgInMsgsVectorVector_capacity, METH_O, NULL},
	 { "delete_RWConfigLogMsgInMsgsVectorVector", _wrap_delete_RWConfigLogMsgInMsgsVectorVector, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_swigregister", RWConfigLogMsgInMsgsVectorVector_swigregister, METH_O, NULL},
	 { "RWConfigLogMsgInMsgsVectorVector_swiginit", RWConfigLogMsgInMsgsVectorVector_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_DataFileToVizTo_p_SysModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SysModel *)  ((DataFileToViz *) x));
}
static swig_type_info _swigt__p_ActuatorGuiSettings = {"_p_ActuatorGuiSettings", "ActuatorGuiSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BSKLogger = {"_p_BSKLogger", "BSKLogger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CustomModel = {"_p_CustomModel", "CustomModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataFileToViz = {"_p_DataFileToViz", "DataFileToViz *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ellipsoid = {"_p_Ellipsoid", "Ellipsoid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GenericSensor = {"_p_GenericSensor", "GenericSensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GenericStorage = {"_p_GenericStorage", "GenericStorage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GravBodyInfo = {"_p_GravBodyInfo", "GravBodyInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InstrumentGuiSettings = {"_p_InstrumentGuiSettings", "InstrumentGuiSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KeepOutInCone = {"_p_KeepOutInCone", "KeepOutInCone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Light = {"_p_Light", "Light *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LiveVizSettings = {"_p_LiveVizSettings", "LiveVizSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LocationPbMsg = {"_p_LocationPbMsg", "LocationPbMsg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MessageT_RWConfigLogMsgPayload_t = {"_p_MessageT_RWConfigLogMsgPayload_t", "std::vector< Message< RWConfigLogMsgPayload > * >::value_type|std::vector< Message< RWConfigLogMsgPayload > >::value_type *|Message< RWConfigLogMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MessageT_THROutputMsgPayload_t = {"_p_MessageT_THROutputMsgPayload_t", "std::vector< Message< THROutputMsgPayload > * >::value_type|std::vector< Message< THROutputMsgPayload > >::value_type *|Message< THROutputMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MsgCurrStatus = {"_p_MsgCurrStatus", "MsgCurrStatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultiSphere = {"_p_MultiSphere", "MultiSphere *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultiSphereInfo = {"_p_MultiSphereInfo", "MultiSphereInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointLine = {"_p_PointLine", "PointLine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RWConfigLogMsgPayload = {"_p_RWConfigLogMsgPayload", "RWConfigLogMsgPayload *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RWModels = {"_p_RWModels", "RWModels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_ChargeMsmMsgPayload_t = {"_p_ReadFunctorT_ChargeMsmMsgPayload_t", "ReadFunctor< ChargeMsmMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_ColorMsgPayload_t = {"_p_ReadFunctorT_ColorMsgPayload_t", "ReadFunctor< ColorMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_DataStorageStatusMsgPayload_t = {"_p_ReadFunctorT_DataStorageStatusMsgPayload_t", "ReadFunctor< DataStorageStatusMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_DeviceCmdMsgPayload_t = {"_p_ReadFunctorT_DeviceCmdMsgPayload_t", "ReadFunctor< DeviceCmdMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_FuelTankMsgPayload_t = {"_p_ReadFunctorT_FuelTankMsgPayload_t", "ReadFunctor< FuelTankMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_PowerStorageStatusMsgPayload_t = {"_p_ReadFunctorT_PowerStorageStatusMsgPayload_t", "ReadFunctor< PowerStorageStatusMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_RWConfigLogMsgPayload_t = {"_p_ReadFunctorT_RWConfigLogMsgPayload_t", "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::value_type *|ReadFunctor< RWConfigLogMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_SCStatesMsgPayload_t = {"_p_ReadFunctorT_SCStatesMsgPayload_t", "ReadFunctor< SCStatesMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReadFunctorT_THROutputMsgPayload_t = {"_p_ReadFunctorT_THROutputMsgPayload_t", "std::vector< ReadFunctor< THROutputMsgPayload > >::value_type *|ReadFunctor< THROutputMsgPayload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SCStatesMsgPayload = {"_p_SCStatesMsgPayload", "SCStatesMsgPayload *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StdCameraSettings = {"_p_StdCameraSettings", "StdCameraSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SysModel = {"_p_SysModel", "SysModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_THROutputMsgPayload = {"_p_THROutputMsgPayload", "THROutputMsgPayload *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ThrClusterMap = {"_p_ThrClusterMap", "std::vector< ThrClusterMap >::value_type *|ThrClusterMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Transceiver = {"_p_Transceiver", "Transceiver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VizSettings = {"_p_VizSettings", "VizSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VizSpacecraftData = {"_p_VizSpacecraftData", "VizSpacecraftData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_logLevel_t = {"_p_logLevel_t", "logLevel_t *|enum logLevel_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t = {"_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t", "std::vector< Message< RWConfigLogMsgPayload > * >::allocator_type *|std::allocator< Message< RWConfigLogMsgPayload > * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t = {"_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t", "std::vector< Message< RWConfigLogMsgPayload > >::allocator_type *|std::allocator< Message< RWConfigLogMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t = {"_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t", "std::vector< Message< THROutputMsgPayload > * >::allocator_type *|std::allocator< Message< THROutputMsgPayload > * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_MessageT_THROutputMsgPayload_t_t = {"_p_std__allocatorT_MessageT_THROutputMsgPayload_t_t", "std::vector< Message< THROutputMsgPayload > >::allocator_type *|std::allocator< Message< THROutputMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t = {"_p_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t", "std::vector< ReadFunctor< RWConfigLogMsgPayload > >::allocator_type *|std::allocator< ReadFunctor< RWConfigLogMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t = {"_p_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t", "std::vector< ReadFunctor< THROutputMsgPayload > >::allocator_type *|std::allocator< ReadFunctor< THROutputMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ThrClusterMap_t = {"_p_std__allocatorT_ThrClusterMap_t", "std::vector< ThrClusterMap >::allocator_type *|std::allocator< ThrClusterMap > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t = {"_p_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t", "std::vector< std::vector< Message< RWConfigLogMsgPayload > * > >::allocator_type *|std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t = {"_p_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t", "std::vector< std::vector< Message< THROutputMsgPayload > * > >::allocator_type *|std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t = {"_p_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t", "std::vector< std::vector< ThrClusterMap > >::allocator_type *|std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_char_const_p_t = {"_p_std__mapT_int_char_const_p_t", "std::map< int,char const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t = {"_p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t", "std::vector< ActuatorGuiSettings,std::allocator< ActuatorGuiSettings > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t = {"_p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t", "std::vector< CSSConfigLogMsgPayload,std::allocator< CSSConfigLogMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t = {"_p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t", "std::vector< CustomModel,std::allocator< CustomModel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t = {"_p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t", "std::vector< Ellipsoid *,std::allocator< Ellipsoid * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t = {"_p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t", "std::vector< GenericSensor *,std::allocator< GenericSensor * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t = {"_p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t", "std::vector< GenericStorage *,std::allocator< GenericStorage * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t = {"_p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t", "std::vector< InstrumentGuiSettings,std::allocator< InstrumentGuiSettings > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t = {"_p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t", "std::vector< KeepOutInCone,std::allocator< KeepOutInCone > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t = {"_p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t", "std::vector< Light *,std::allocator< Light * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t = {"_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t", "std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > *|std::vector< Message< RWConfigLogMsgPayload > * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t = {"_p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t", "std::vector< Message< RWConfigLogMsgPayload >,std::allocator< Message< RWConfigLogMsgPayload > > > *|std::vector< Message< RWConfigLogMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t = {"_p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t", "std::vector< Message< SCStatesMsgPayload > *,std::allocator< Message< SCStatesMsgPayload > * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t = {"_p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t", "std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > *|std::vector< Message< THROutputMsgPayload > * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t = {"_p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t", "std::vector< Message< THROutputMsgPayload >,std::allocator< Message< THROutputMsgPayload > > > *|std::vector< Message< THROutputMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t = {"_p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t", "std::vector< MsgCurrStatus,std::allocator< MsgCurrStatus > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t = {"_p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t", "std::vector< MultiSphere *,std::allocator< MultiSphere * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t = {"_p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t", "std::vector< PointLine,std::allocator< PointLine > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t = {"_p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t", "std::vector< RWConfigLogMsgPayload,std::allocator< RWConfigLogMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t = {"_p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t", "std::vector< ReadFunctor< CSSConfigLogMsgPayload >,std::allocator< ReadFunctor< CSSConfigLogMsgPayload > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t = {"_p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t", "std::vector< ReadFunctor< DataNodeUsageMsgPayload >,std::allocator< ReadFunctor< DataNodeUsageMsgPayload > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t = {"_p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t", "std::vector< ReadFunctor< RWConfigLogMsgPayload >,std::allocator< ReadFunctor< RWConfigLogMsgPayload > > > *|std::vector< ReadFunctor< RWConfigLogMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t = {"_p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t", "std::vector< ReadFunctor< THROutputMsgPayload >,std::allocator< ReadFunctor< THROutputMsgPayload > > > *|std::vector< ReadFunctor< THROutputMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t = {"_p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t", "std::vector< StdCameraSettings,std::allocator< StdCameraSettings > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t = {"_p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t", "std::vector< THROutputMsgPayload,std::allocator< THROutputMsgPayload > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t = {"_p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t", "std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > *|std::vector< ThrClusterMap > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t = {"_p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t", "std::vector< Transceiver *,std::allocator< Transceiver * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t = {"_p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t", "std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > *|std::vector< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > >,std::allocator< std::vector< Message< RWConfigLogMsgPayload > *,std::allocator< Message< RWConfigLogMsgPayload > * > > > > *|std::vector< std::vector< Message< RWConfigLogMsgPayload > * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t = {"_p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t", "std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > *|std::vector< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > >,std::allocator< std::vector< Message< THROutputMsgPayload > *,std::allocator< Message< THROutputMsgPayload > * > > > > *|std::vector< std::vector< Message< THROutputMsgPayload > * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t = {"_p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t", "std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > *|std::vector< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > >,std::allocator< std::vector< ThrClusterMap,std::allocator< ThrClusterMap > > > > *|std::vector< std::vector< ThrClusterMap > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ActuatorGuiSettings,
  &_swigt__p_BSKLogger,
  &_swigt__p_CustomModel,
  &_swigt__p_DataFileToViz,
  &_swigt__p_Ellipsoid,
  &_swigt__p_GenericSensor,
  &_swigt__p_GenericStorage,
  &_swigt__p_GravBodyInfo,
  &_swigt__p_InstrumentGuiSettings,
  &_swigt__p_KeepOutInCone,
  &_swigt__p_Light,
  &_swigt__p_LiveVizSettings,
  &_swigt__p_LocationPbMsg,
  &_swigt__p_MessageT_RWConfigLogMsgPayload_t,
  &_swigt__p_MessageT_THROutputMsgPayload_t,
  &_swigt__p_MsgCurrStatus,
  &_swigt__p_MultiSphere,
  &_swigt__p_MultiSphereInfo,
  &_swigt__p_PointLine,
  &_swigt__p_RWConfigLogMsgPayload,
  &_swigt__p_RWModels,
  &_swigt__p_ReadFunctorT_ChargeMsmMsgPayload_t,
  &_swigt__p_ReadFunctorT_ColorMsgPayload_t,
  &_swigt__p_ReadFunctorT_DataStorageStatusMsgPayload_t,
  &_swigt__p_ReadFunctorT_DeviceCmdMsgPayload_t,
  &_swigt__p_ReadFunctorT_FuelTankMsgPayload_t,
  &_swigt__p_ReadFunctorT_PowerStorageStatusMsgPayload_t,
  &_swigt__p_ReadFunctorT_RWConfigLogMsgPayload_t,
  &_swigt__p_ReadFunctorT_SCStatesMsgPayload_t,
  &_swigt__p_ReadFunctorT_THROutputMsgPayload_t,
  &_swigt__p_SCStatesMsgPayload,
  &_swigt__p_StdCameraSettings,
  &_swigt__p_SysModel,
  &_swigt__p_THROutputMsgPayload,
  &_swigt__p_ThrClusterMap,
  &_swigt__p_Transceiver,
  &_swigt__p_VizSettings,
  &_swigt__p_VizSpacecraftData,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_logLevel_t,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_PyObject,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t,
  &_swigt__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t,
  &_swigt__p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t,
  &_swigt__p_std__allocatorT_MessageT_THROutputMsgPayload_t_t,
  &_swigt__p_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t,
  &_swigt__p_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t,
  &_swigt__p_std__allocatorT_ThrClusterMap_t,
  &_swigt__p_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__mapT_int_char_const_p_t,
  &_swigt__p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t,
  &_swigt__p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t,
  &_swigt__p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t,
  &_swigt__p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t,
  &_swigt__p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t,
  &_swigt__p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t,
  &_swigt__p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t,
  &_swigt__p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t,
  &_swigt__p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t,
  &_swigt__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t,
  &_swigt__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t,
  &_swigt__p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t,
  &_swigt__p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t,
  &_swigt__p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t,
  &_swigt__p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t,
  &_swigt__p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t,
  &_swigt__p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t,
  &_swigt__p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t,
  &_swigt__p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t,
  &_swigt__p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t,
  &_swigt__p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t,
  &_swigt__p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t,
  &_swigt__p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t,
  &_swigt__p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t,
  &_swigt__p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t,
  &_swigt__p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_ActuatorGuiSettings[] = {  {&_swigt__p_ActuatorGuiSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BSKLogger[] = {  {&_swigt__p_BSKLogger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CustomModel[] = {  {&_swigt__p_CustomModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataFileToViz[] = {  {&_swigt__p_DataFileToViz, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ellipsoid[] = {  {&_swigt__p_Ellipsoid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GenericSensor[] = {  {&_swigt__p_GenericSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GenericStorage[] = {  {&_swigt__p_GenericStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GravBodyInfo[] = {  {&_swigt__p_GravBodyInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InstrumentGuiSettings[] = {  {&_swigt__p_InstrumentGuiSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeepOutInCone[] = {  {&_swigt__p_KeepOutInCone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Light[] = {  {&_swigt__p_Light, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LiveVizSettings[] = {  {&_swigt__p_LiveVizSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LocationPbMsg[] = {  {&_swigt__p_LocationPbMsg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MessageT_RWConfigLogMsgPayload_t[] = {  {&_swigt__p_MessageT_RWConfigLogMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MessageT_THROutputMsgPayload_t[] = {  {&_swigt__p_MessageT_THROutputMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MsgCurrStatus[] = {  {&_swigt__p_MsgCurrStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultiSphere[] = {  {&_swigt__p_MultiSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultiSphereInfo[] = {  {&_swigt__p_MultiSphereInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointLine[] = {  {&_swigt__p_PointLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RWConfigLogMsgPayload[] = {  {&_swigt__p_RWConfigLogMsgPayload, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RWModels[] = {  {&_swigt__p_RWModels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_ChargeMsmMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_ChargeMsmMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_ColorMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_ColorMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_DataStorageStatusMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_DataStorageStatusMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_DeviceCmdMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_DeviceCmdMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_FuelTankMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_FuelTankMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_PowerStorageStatusMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_PowerStorageStatusMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_RWConfigLogMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_RWConfigLogMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_SCStatesMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_SCStatesMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReadFunctorT_THROutputMsgPayload_t[] = {  {&_swigt__p_ReadFunctorT_THROutputMsgPayload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCStatesMsgPayload[] = {  {&_swigt__p_SCStatesMsgPayload, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StdCameraSettings[] = {  {&_swigt__p_StdCameraSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SysModel[] = {  {&_swigt__p_SysModel, 0, 0, 0},  {&_swigt__p_DataFileToViz, _p_DataFileToVizTo_p_SysModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_THROutputMsgPayload[] = {  {&_swigt__p_THROutputMsgPayload, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ThrClusterMap[] = {  {&_swigt__p_ThrClusterMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Transceiver[] = {  {&_swigt__p_Transceiver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VizSettings[] = {  {&_swigt__p_VizSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VizSpacecraftData[] = {  {&_swigt__p_VizSpacecraftData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_logLevel_t[] = {  {&_swigt__p_logLevel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t[] = {  {&_swigt__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t[] = {  {&_swigt__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t[] = {  {&_swigt__p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_MessageT_THROutputMsgPayload_t_t[] = {  {&_swigt__p_std__allocatorT_MessageT_THROutputMsgPayload_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t[] = {  {&_swigt__p_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t[] = {  {&_swigt__p_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ThrClusterMap_t[] = {  {&_swigt__p_std__allocatorT_ThrClusterMap_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_char_const_p_t[] = {  {&_swigt__p_std__mapT_int_char_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t[] = {  {&_swigt__p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t[] = {  {&_swigt__p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t[] = {  {&_swigt__p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t[] = {  {&_swigt__p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t[] = {  {&_swigt__p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t[] = {  {&_swigt__p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t[] = {  {&_swigt__p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t[] = {  {&_swigt__p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t[] = {  {&_swigt__p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t[] = {  {&_swigt__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t[] = {  {&_swigt__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t[] = {  {&_swigt__p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t[] = {  {&_swigt__p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t[] = {  {&_swigt__p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t[] = {  {&_swigt__p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t[] = {  {&_swigt__p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t[] = {  {&_swigt__p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t[] = {  {&_swigt__p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t[] = {  {&_swigt__p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t[] = {  {&_swigt__p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t[] = {  {&_swigt__p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t[] = {  {&_swigt__p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t[] = {  {&_swigt__p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t[] = {  {&_swigt__p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t[] = {  {&_swigt__p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t[] = {  {&_swigt__p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ActuatorGuiSettings,
  _swigc__p_BSKLogger,
  _swigc__p_CustomModel,
  _swigc__p_DataFileToViz,
  _swigc__p_Ellipsoid,
  _swigc__p_GenericSensor,
  _swigc__p_GenericStorage,
  _swigc__p_GravBodyInfo,
  _swigc__p_InstrumentGuiSettings,
  _swigc__p_KeepOutInCone,
  _swigc__p_Light,
  _swigc__p_LiveVizSettings,
  _swigc__p_LocationPbMsg,
  _swigc__p_MessageT_RWConfigLogMsgPayload_t,
  _swigc__p_MessageT_THROutputMsgPayload_t,
  _swigc__p_MsgCurrStatus,
  _swigc__p_MultiSphere,
  _swigc__p_MultiSphereInfo,
  _swigc__p_PointLine,
  _swigc__p_RWConfigLogMsgPayload,
  _swigc__p_RWModels,
  _swigc__p_ReadFunctorT_ChargeMsmMsgPayload_t,
  _swigc__p_ReadFunctorT_ColorMsgPayload_t,
  _swigc__p_ReadFunctorT_DataStorageStatusMsgPayload_t,
  _swigc__p_ReadFunctorT_DeviceCmdMsgPayload_t,
  _swigc__p_ReadFunctorT_FuelTankMsgPayload_t,
  _swigc__p_ReadFunctorT_PowerStorageStatusMsgPayload_t,
  _swigc__p_ReadFunctorT_RWConfigLogMsgPayload_t,
  _swigc__p_ReadFunctorT_SCStatesMsgPayload_t,
  _swigc__p_ReadFunctorT_THROutputMsgPayload_t,
  _swigc__p_SCStatesMsgPayload,
  _swigc__p_StdCameraSettings,
  _swigc__p_SysModel,
  _swigc__p_THROutputMsgPayload,
  _swigc__p_ThrClusterMap,
  _swigc__p_Transceiver,
  _swigc__p_VizSettings,
  _swigc__p_VizSpacecraftData,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_logLevel_t,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_PyObject,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t,
  _swigc__p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t,
  _swigc__p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t,
  _swigc__p_std__allocatorT_MessageT_THROutputMsgPayload_t_t,
  _swigc__p_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t,
  _swigc__p_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t,
  _swigc__p_std__allocatorT_ThrClusterMap_t,
  _swigc__p_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__mapT_int_char_const_p_t,
  _swigc__p_std__vectorT_ActuatorGuiSettings_std__allocatorT_ActuatorGuiSettings_t_t,
  _swigc__p_std__vectorT_CSSConfigLogMsgPayload_std__allocatorT_CSSConfigLogMsgPayload_t_t,
  _swigc__p_std__vectorT_CustomModel_std__allocatorT_CustomModel_t_t,
  _swigc__p_std__vectorT_Ellipsoid_p_std__allocatorT_Ellipsoid_p_t_t,
  _swigc__p_std__vectorT_GenericSensor_p_std__allocatorT_GenericSensor_p_t_t,
  _swigc__p_std__vectorT_GenericStorage_p_std__allocatorT_GenericStorage_p_t_t,
  _swigc__p_std__vectorT_InstrumentGuiSettings_std__allocatorT_InstrumentGuiSettings_t_t,
  _swigc__p_std__vectorT_KeepOutInCone_std__allocatorT_KeepOutInCone_t_t,
  _swigc__p_std__vectorT_Light_p_std__allocatorT_Light_p_t_t,
  _swigc__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t,
  _swigc__p_std__vectorT_MessageT_RWConfigLogMsgPayload_t_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_t_t,
  _swigc__p_std__vectorT_MessageT_SCStatesMsgPayload_t_p_std__allocatorT_MessageT_SCStatesMsgPayload_t_p_t_t,
  _swigc__p_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t,
  _swigc__p_std__vectorT_MessageT_THROutputMsgPayload_t_std__allocatorT_MessageT_THROutputMsgPayload_t_t_t,
  _swigc__p_std__vectorT_MsgCurrStatus_std__allocatorT_MsgCurrStatus_t_t,
  _swigc__p_std__vectorT_MultiSphere_p_std__allocatorT_MultiSphere_p_t_t,
  _swigc__p_std__vectorT_PointLine_std__allocatorT_PointLine_t_t,
  _swigc__p_std__vectorT_RWConfigLogMsgPayload_std__allocatorT_RWConfigLogMsgPayload_t_t,
  _swigc__p_std__vectorT_ReadFunctorT_CSSConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_CSSConfigLogMsgPayload_t_t_t,
  _swigc__p_std__vectorT_ReadFunctorT_DataNodeUsageMsgPayload_t_std__allocatorT_ReadFunctorT_DataNodeUsageMsgPayload_t_t_t,
  _swigc__p_std__vectorT_ReadFunctorT_RWConfigLogMsgPayload_t_std__allocatorT_ReadFunctorT_RWConfigLogMsgPayload_t_t_t,
  _swigc__p_std__vectorT_ReadFunctorT_THROutputMsgPayload_t_std__allocatorT_ReadFunctorT_THROutputMsgPayload_t_t_t,
  _swigc__p_std__vectorT_StdCameraSettings_std__allocatorT_StdCameraSettings_t_t,
  _swigc__p_std__vectorT_THROutputMsgPayload_std__allocatorT_THROutputMsgPayload_t_t,
  _swigc__p_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t,
  _swigc__p_std__vectorT_Transceiver_p_std__allocatorT_Transceiver_p_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_RWConfigLogMsgPayload_t_p_std__allocatorT_MessageT_RWConfigLogMsgPayload_t_p_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_std__allocatorT_std__vectorT_MessageT_THROutputMsgPayload_t_p_std__allocatorT_MessageT_THROutputMsgPayload_t_p_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_std__allocatorT_std__vectorT_ThrClusterMap_std__allocatorT_ThrClusterMap_t_t_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "MAX_LOGGING_LENGTH",SWIG_From_int(static_cast< int >(255)));
  SWIG_Python_SetConstant(d, "BSK_DEBUG",SWIG_From_int(static_cast< int >(BSK_DEBUG)));
  SWIG_Python_SetConstant(d, "BSK_INFORMATION",SWIG_From_int(static_cast< int >(BSK_INFORMATION)));
  SWIG_Python_SetConstant(d, "BSK_WARNING",SWIG_From_int(static_cast< int >(BSK_WARNING)));
  SWIG_Python_SetConstant(d, "BSK_ERROR",SWIG_From_int(static_cast< int >(BSK_ERROR)));
  SWIG_Python_SetConstant(d, "BSK_SILENT",SWIG_From_int(static_cast< int >(BSK_SILENT)));
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  SWIG_addvarlink(globals, "LogLevel", Swig_var_LogLevel_get, Swig_var_LogLevel_set);
  
  // thread safe initialization
  swig::container_owner_attribute();
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

