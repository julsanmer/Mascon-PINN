# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable
from Basilisk.utilities import pythonVariableLogger



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _motorVoltageInterface
else:
    import _motorVoltageInterface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _motorVoltageInterface.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _motorVoltageInterface.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _motorVoltageInterface.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _motorVoltageInterface.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _motorVoltageInterface.new_longArray(nelements)

def delete_longArray(ary):
    return _motorVoltageInterface.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _motorVoltageInterface.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _motorVoltageInterface.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _motorVoltageInterface.new_intArray(nelements)

def delete_intArray(ary):
    return _motorVoltageInterface.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _motorVoltageInterface.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _motorVoltageInterface.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _motorVoltageInterface.new_shortArray(nelements)

def delete_shortArray(ary):
    return _motorVoltageInterface.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _motorVoltageInterface.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _motorVoltageInterface.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _motorVoltageInterface.MAX_LOGGING_LENGTH
BSK_DEBUG = _motorVoltageInterface.BSK_DEBUG
BSK_INFORMATION = _motorVoltageInterface.BSK_INFORMATION
BSK_WARNING = _motorVoltageInterface.BSK_WARNING
BSK_ERROR = _motorVoltageInterface.BSK_ERROR
BSK_SILENT = _motorVoltageInterface.BSK_SILENT

def printDefaultLogLevel():
    return _motorVoltageInterface.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _motorVoltageInterface.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _motorVoltageInterface.getDefaultLogLevel()
class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _motorVoltageInterface.BSKLogger_swiginit(self, _motorVoltageInterface.new_BSKLogger(*args))
    __swig_destroy__ = _motorVoltageInterface.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _motorVoltageInterface.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _motorVoltageInterface.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _motorVoltageInterface.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _motorVoltageInterface.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_motorVoltageInterface.BSKLogger_logLevelMap_get, _motorVoltageInterface.BSKLogger_logLevelMap_set)

# Register BSKLogger in _motorVoltageInterface:
_motorVoltageInterface.BSKLogger_swigregister(BSKLogger)
cvar = _motorVoltageInterface.cvar


def _BSKLogger():
    return _motorVoltageInterface._BSKLogger()

def _BSKLogger_d(arg1):
    return _motorVoltageInterface._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _motorVoltageInterface._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _motorVoltageInterface._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _motorVoltageInterface._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _motorVoltageInterface.SysModel_swiginit(self, _motorVoltageInterface.new_SysModel(*args))
    __swig_destroy__ = _motorVoltageInterface.delete_SysModel

    def SelfInit(self):
        return _motorVoltageInterface.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _motorVoltageInterface.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _motorVoltageInterface.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _motorVoltageInterface.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_motorVoltageInterface.SysModel_ModelTag_get, _motorVoltageInterface.SysModel_ModelTag_set)
    CallCounts = property(_motorVoltageInterface.SysModel_CallCounts_get, _motorVoltageInterface.SysModel_CallCounts_set)
    RNGSeed = property(_motorVoltageInterface.SysModel_RNGSeed_get, _motorVoltageInterface.SysModel_RNGSeed_set)
    moduleID = property(_motorVoltageInterface.SysModel_moduleID_get, _motorVoltageInterface.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        logging_functions = {
            variable_name: lambda _, vn=variable_name: getattr(self, vn)
            for variable_name in variableNames
        }

        for variable_name, log_fun in logging_functions.items():
            try:
                log_fun(0)
            except AttributeError:
                raise ValueError(f"Cannot log {variable_name} as it is not a "
                                f"variable of {type(self).__name__}")

        return pythonVariableLogger.PythonVariableLogger(logging_functions, recordingTime)


# Register SysModel in _motorVoltageInterface:
_motorVoltageInterface.SysModel_swigregister(SysModel)
class MotorVoltageInterface(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _motorVoltageInterface.MotorVoltageInterface_swiginit(self, _motorVoltageInterface.new_MotorVoltageInterface())
    __swig_destroy__ = _motorVoltageInterface.delete_MotorVoltageInterface

    def computeMotorTorque(self):
        return _motorVoltageInterface.MotorVoltageInterface_computeMotorTorque(self)

    def Reset(self, CurrentSimNanos):
        return _motorVoltageInterface.MotorVoltageInterface_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _motorVoltageInterface.MotorVoltageInterface_UpdateState(self, CurrentSimNanos)

    def readInputMessages(self):
        return _motorVoltageInterface.MotorVoltageInterface_readInputMessages(self)

    def writeOutputMessages(self, Clock):
        return _motorVoltageInterface.MotorVoltageInterface_writeOutputMessages(self, Clock)

    def setGains(self, gains):
        return _motorVoltageInterface.MotorVoltageInterface_setGains(self, gains)

    def setScaleFactors(self, scaleFactors):
        return _motorVoltageInterface.MotorVoltageInterface_setScaleFactors(self, scaleFactors)

    def setBiases(self, biases):
        return _motorVoltageInterface.MotorVoltageInterface_setBiases(self, biases)
    motorVoltageInMsg = property(_motorVoltageInterface.MotorVoltageInterface_motorVoltageInMsg_get, _motorVoltageInterface.MotorVoltageInterface_motorVoltageInMsg_set)
    motorTorqueOutMsg = property(_motorVoltageInterface.MotorVoltageInterface_motorTorqueOutMsg_get, _motorVoltageInterface.MotorVoltageInterface_motorTorqueOutMsg_set)
    voltage2TorqueGain = property(_motorVoltageInterface.MotorVoltageInterface_voltage2TorqueGain_get, _motorVoltageInterface.MotorVoltageInterface_voltage2TorqueGain_set)
    scaleFactor = property(_motorVoltageInterface.MotorVoltageInterface_scaleFactor_get, _motorVoltageInterface.MotorVoltageInterface_scaleFactor_set)
    bias = property(_motorVoltageInterface.MotorVoltageInterface_bias_get, _motorVoltageInterface.MotorVoltageInterface_bias_set)
    bskLogger = property(_motorVoltageInterface.MotorVoltageInterface_bskLogger_get, _motorVoltageInterface.MotorVoltageInterface_bskLogger_set)

# Register MotorVoltageInterface in _motorVoltageInterface:
_motorVoltageInterface.MotorVoltageInterface_swigregister(MotorVoltageInterface)
class ArrayMotorVoltageMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    voltage = property(_motorVoltageInterface.ArrayMotorVoltageMsgPayload_voltage_get, _motorVoltageInterface.ArrayMotorVoltageMsgPayload_voltage_set)

    def __init__(self):
        _motorVoltageInterface.ArrayMotorVoltageMsgPayload_swiginit(self, _motorVoltageInterface.new_ArrayMotorVoltageMsgPayload())
    __swig_destroy__ = _motorVoltageInterface.delete_ArrayMotorVoltageMsgPayload

# Register ArrayMotorVoltageMsgPayload in _motorVoltageInterface:
_motorVoltageInterface.ArrayMotorVoltageMsgPayload_swigregister(ArrayMotorVoltageMsgPayload)
class ArrayMotorTorqueMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    motorTorque = property(_motorVoltageInterface.ArrayMotorTorqueMsgPayload_motorTorque_get, _motorVoltageInterface.ArrayMotorTorqueMsgPayload_motorTorque_set)

    def __init__(self):
        _motorVoltageInterface.ArrayMotorTorqueMsgPayload_swiginit(self, _motorVoltageInterface.new_ArrayMotorTorqueMsgPayload())
    __swig_destroy__ = _motorVoltageInterface.delete_ArrayMotorTorqueMsgPayload

# Register ArrayMotorTorqueMsgPayload in _motorVoltageInterface:
_motorVoltageInterface.ArrayMotorTorqueMsgPayload_swigregister(ArrayMotorTorqueMsgPayload)
MAX_CIRCLE_NUM = _motorVoltageInterface.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _motorVoltageInterface.MAX_LIMB_PNTS
MAX_EFF_CNT = _motorVoltageInterface.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _motorVoltageInterface.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _motorVoltageInterface.MAX_ST_VEH_COUNT
NANO2SEC = _motorVoltageInterface.NANO2SEC
SEC2NANO = _motorVoltageInterface.SEC2NANO
SEC2HOUR = _motorVoltageInterface.SEC2HOUR

import sys
protectAllClasses(sys.modules[__name__])


