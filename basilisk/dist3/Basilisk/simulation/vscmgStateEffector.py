# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable
from Basilisk.utilities import pythonVariableLogger



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vscmgStateEffector
else:
    import _vscmgStateEffector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _vscmgStateEffector.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _vscmgStateEffector.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _vscmgStateEffector.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _vscmgStateEffector.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _vscmgStateEffector.new_longArray(nelements)

def delete_longArray(ary):
    return _vscmgStateEffector.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _vscmgStateEffector.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _vscmgStateEffector.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _vscmgStateEffector.new_intArray(nelements)

def delete_intArray(ary):
    return _vscmgStateEffector.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _vscmgStateEffector.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _vscmgStateEffector.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _vscmgStateEffector.new_shortArray(nelements)

def delete_shortArray(ary):
    return _vscmgStateEffector.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _vscmgStateEffector.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _vscmgStateEffector.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _vscmgStateEffector.MAX_LOGGING_LENGTH
BSK_DEBUG = _vscmgStateEffector.BSK_DEBUG
BSK_INFORMATION = _vscmgStateEffector.BSK_INFORMATION
BSK_WARNING = _vscmgStateEffector.BSK_WARNING
BSK_ERROR = _vscmgStateEffector.BSK_ERROR
BSK_SILENT = _vscmgStateEffector.BSK_SILENT

def printDefaultLogLevel():
    return _vscmgStateEffector.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _vscmgStateEffector.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _vscmgStateEffector.getDefaultLogLevel()
class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vscmgStateEffector.BSKLogger_swiginit(self, _vscmgStateEffector.new_BSKLogger(*args))
    __swig_destroy__ = _vscmgStateEffector.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _vscmgStateEffector.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _vscmgStateEffector.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _vscmgStateEffector.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _vscmgStateEffector.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_vscmgStateEffector.BSKLogger_logLevelMap_get, _vscmgStateEffector.BSKLogger_logLevelMap_set)

# Register BSKLogger in _vscmgStateEffector:
_vscmgStateEffector.BSKLogger_swigregister(BSKLogger)
cvar = _vscmgStateEffector.cvar


def _BSKLogger():
    return _vscmgStateEffector._BSKLogger()

def _BSKLogger_d(arg1):
    return _vscmgStateEffector._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _vscmgStateEffector._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _vscmgStateEffector._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _vscmgStateEffector._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vscmgStateEffector.SysModel_swiginit(self, _vscmgStateEffector.new_SysModel(*args))
    __swig_destroy__ = _vscmgStateEffector.delete_SysModel

    def SelfInit(self):
        return _vscmgStateEffector.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _vscmgStateEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _vscmgStateEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _vscmgStateEffector.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_vscmgStateEffector.SysModel_ModelTag_get, _vscmgStateEffector.SysModel_ModelTag_set)
    CallCounts = property(_vscmgStateEffector.SysModel_CallCounts_get, _vscmgStateEffector.SysModel_CallCounts_set)
    RNGSeed = property(_vscmgStateEffector.SysModel_RNGSeed_get, _vscmgStateEffector.SysModel_RNGSeed_set)
    moduleID = property(_vscmgStateEffector.SysModel_moduleID_get, _vscmgStateEffector.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        logging_functions = {
            variable_name: lambda _, vn=variable_name: getattr(self, vn)
            for variable_name in variableNames
        }

        for variable_name, log_fun in logging_functions.items():
            try:
                log_fun(0)
            except AttributeError:
                raise ValueError(f"Cannot log {variable_name} as it is not a "
                                f"variable of {type(self).__name__}")

        return pythonVariableLogger.PythonVariableLogger(logging_functions, recordingTime)


# Register SysModel in _vscmgStateEffector:
_vscmgStateEffector.SysModel_swigregister(SysModel)
class StateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_vscmgStateEffector.StateData_state_get, _vscmgStateEffector.StateData_state_set)
    stateDeriv = property(_vscmgStateEffector.StateData_stateDeriv_get, _vscmgStateEffector.StateData_stateDeriv_set)
    stateName = property(_vscmgStateEffector.StateData_stateName_get, _vscmgStateEffector.StateData_stateName_set)
    stateEnabled = property(_vscmgStateEffector.StateData_stateEnabled_get, _vscmgStateEffector.StateData_stateEnabled_set)
    bskLogger = property(_vscmgStateEffector.StateData_bskLogger_get, _vscmgStateEffector.StateData_bskLogger_set)

    def __init__(self, *args):
        _vscmgStateEffector.StateData_swiginit(self, _vscmgStateEffector.new_StateData(*args))
    __swig_destroy__ = _vscmgStateEffector.delete_StateData

    def setState(self, newState):
        return _vscmgStateEffector.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _vscmgStateEffector.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _vscmgStateEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _vscmgStateEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _vscmgStateEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _vscmgStateEffector.StateData_getName(self)

    def getRowSize(self):
        return _vscmgStateEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _vscmgStateEffector.StateData_getColumnSize(self)

    def isStateActive(self):
        return _vscmgStateEffector.StateData_isStateActive(self)

    def disable(self):
        return _vscmgStateEffector.StateData_disable(self)

    def enable(self):
        return _vscmgStateEffector.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _vscmgStateEffector.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _vscmgStateEffector.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _vscmgStateEffector.StateData___mul__(self, scaleFactor)

# Register StateData in _vscmgStateEffector:
_vscmgStateEffector.StateData_swigregister(StateData)
class BackSubMatrices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    matrixA = property(_vscmgStateEffector.BackSubMatrices_matrixA_get, _vscmgStateEffector.BackSubMatrices_matrixA_set)
    matrixB = property(_vscmgStateEffector.BackSubMatrices_matrixB_get, _vscmgStateEffector.BackSubMatrices_matrixB_set)
    matrixC = property(_vscmgStateEffector.BackSubMatrices_matrixC_get, _vscmgStateEffector.BackSubMatrices_matrixC_set)
    matrixD = property(_vscmgStateEffector.BackSubMatrices_matrixD_get, _vscmgStateEffector.BackSubMatrices_matrixD_set)
    vecTrans = property(_vscmgStateEffector.BackSubMatrices_vecTrans_get, _vscmgStateEffector.BackSubMatrices_vecTrans_set)
    vecRot = property(_vscmgStateEffector.BackSubMatrices_vecRot_get, _vscmgStateEffector.BackSubMatrices_vecRot_set)

    def __init__(self):
        _vscmgStateEffector.BackSubMatrices_swiginit(self, _vscmgStateEffector.new_BackSubMatrices())
    __swig_destroy__ = _vscmgStateEffector.delete_BackSubMatrices

# Register BackSubMatrices in _vscmgStateEffector:
_vscmgStateEffector.BackSubMatrices_swigregister(BackSubMatrices)
class EffectorMassProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mEff = property(_vscmgStateEffector.EffectorMassProps_mEff_get, _vscmgStateEffector.EffectorMassProps_mEff_set)
    mEffDot = property(_vscmgStateEffector.EffectorMassProps_mEffDot_get, _vscmgStateEffector.EffectorMassProps_mEffDot_set)
    IEffPntB_B = property(_vscmgStateEffector.EffectorMassProps_IEffPntB_B_get, _vscmgStateEffector.EffectorMassProps_IEffPntB_B_set)
    rEff_CB_B = property(_vscmgStateEffector.EffectorMassProps_rEff_CB_B_get, _vscmgStateEffector.EffectorMassProps_rEff_CB_B_set)
    rEffPrime_CB_B = property(_vscmgStateEffector.EffectorMassProps_rEffPrime_CB_B_get, _vscmgStateEffector.EffectorMassProps_rEffPrime_CB_B_set)
    IEffPrimePntB_B = property(_vscmgStateEffector.EffectorMassProps_IEffPrimePntB_B_get, _vscmgStateEffector.EffectorMassProps_IEffPrimePntB_B_set)

    def __init__(self):
        _vscmgStateEffector.EffectorMassProps_swiginit(self, _vscmgStateEffector.new_EffectorMassProps())
    __swig_destroy__ = _vscmgStateEffector.delete_EffectorMassProps

# Register EffectorMassProps in _vscmgStateEffector:
_vscmgStateEffector.EffectorMassProps_swigregister(EffectorMassProps)
class StateEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    nameOfSpacecraftAttachedTo = property(_vscmgStateEffector.StateEffector_nameOfSpacecraftAttachedTo_get, _vscmgStateEffector.StateEffector_nameOfSpacecraftAttachedTo_set)
    parentSpacecraftName = property(_vscmgStateEffector.StateEffector_parentSpacecraftName_get, _vscmgStateEffector.StateEffector_parentSpacecraftName_set)
    effProps = property(_vscmgStateEffector.StateEffector_effProps_get, _vscmgStateEffector.StateEffector_effProps_set)
    stateDerivContribution = property(_vscmgStateEffector.StateEffector_stateDerivContribution_get, _vscmgStateEffector.StateEffector_stateDerivContribution_set)
    forceOnBody_B = property(_vscmgStateEffector.StateEffector_forceOnBody_B_get, _vscmgStateEffector.StateEffector_forceOnBody_B_set)
    torqueOnBodyPntB_B = property(_vscmgStateEffector.StateEffector_torqueOnBodyPntB_B_get, _vscmgStateEffector.StateEffector_torqueOnBodyPntB_B_set)
    torqueOnBodyPntC_B = property(_vscmgStateEffector.StateEffector_torqueOnBodyPntC_B_get, _vscmgStateEffector.StateEffector_torqueOnBodyPntC_B_set)
    r_BP_P = property(_vscmgStateEffector.StateEffector_r_BP_P_get, _vscmgStateEffector.StateEffector_r_BP_P_set)
    dcm_BP = property(_vscmgStateEffector.StateEffector_dcm_BP_get, _vscmgStateEffector.StateEffector_dcm_BP_set)
    bskLogger = property(_vscmgStateEffector.StateEffector_bskLogger_get, _vscmgStateEffector.StateEffector_bskLogger_set)
    __swig_destroy__ = _vscmgStateEffector.delete_StateEffector

    def updateEffectorMassProps(self, integTime):
        return _vscmgStateEffector.StateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _vscmgStateEffector.StateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _vscmgStateEffector.StateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _vscmgStateEffector.StateEffector_modifyStates(self, integTime)

    def calcForceTorqueOnBody(self, integTime, omega_BN_B):
        return _vscmgStateEffector.StateEffector_calcForceTorqueOnBody(self, integTime, omega_BN_B)

    def writeOutputStateMessages(self, integTimeNanos):
        return _vscmgStateEffector.StateEffector_writeOutputStateMessages(self, integTimeNanos)

    def registerStates(self, states):
        return _vscmgStateEffector.StateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _vscmgStateEffector.StateEffector_linkInStates(self, states)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _vscmgStateEffector.StateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def prependSpacecraftNameToStates(self):
        return _vscmgStateEffector.StateEffector_prependSpacecraftNameToStates(self)

    def receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP):
        return _vscmgStateEffector.StateEffector_receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP)

# Register StateEffector in _vscmgStateEffector:
_vscmgStateEffector.StateEffector_swigregister(StateEffector)
class DynamicEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vscmgStateEffector.delete_DynamicEffector

    def computeStateContribution(self, integTime):
        return _vscmgStateEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _vscmgStateEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _vscmgStateEffector.DynamicEffector_computeForceTorque(self, integTime, timeStep)
    stateDerivContribution = property(_vscmgStateEffector.DynamicEffector_stateDerivContribution_get, _vscmgStateEffector.DynamicEffector_stateDerivContribution_set)
    forceExternal_N = property(_vscmgStateEffector.DynamicEffector_forceExternal_N_get, _vscmgStateEffector.DynamicEffector_forceExternal_N_set)
    forceExternal_B = property(_vscmgStateEffector.DynamicEffector_forceExternal_B_get, _vscmgStateEffector.DynamicEffector_forceExternal_B_set)
    torqueExternalPntB_B = property(_vscmgStateEffector.DynamicEffector_torqueExternalPntB_B_get, _vscmgStateEffector.DynamicEffector_torqueExternalPntB_B_set)
    bskLogger = property(_vscmgStateEffector.DynamicEffector_bskLogger_get, _vscmgStateEffector.DynamicEffector_bskLogger_set)

# Register DynamicEffector in _vscmgStateEffector:
_vscmgStateEffector.DynamicEffector_swigregister(DynamicEffector)
class StateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateMap = property(_vscmgStateEffector.StateVector_stateMap_get, _vscmgStateEffector.StateVector_stateMap_set)

    def __add__(self, operand):
        return _vscmgStateEffector.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _vscmgStateEffector.StateVector___mul__(self, scaleFactor)

    def __init__(self):
        _vscmgStateEffector.StateVector_swiginit(self, _vscmgStateEffector.new_StateVector())
    __swig_destroy__ = _vscmgStateEffector.delete_StateVector

# Register StateVector in _vscmgStateEffector:
_vscmgStateEffector.StateVector_swigregister(StateVector)
class DynParamManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dynProperties = property(_vscmgStateEffector.DynParamManager_dynProperties_get, _vscmgStateEffector.DynParamManager_dynProperties_set)
    stateContainer = property(_vscmgStateEffector.DynParamManager_stateContainer_get, _vscmgStateEffector.DynParamManager_stateContainer_set)
    bskLogger = property(_vscmgStateEffector.DynParamManager_bskLogger_get, _vscmgStateEffector.DynParamManager_bskLogger_set)

    def __init__(self):
        _vscmgStateEffector.DynParamManager_swiginit(self, _vscmgStateEffector.new_DynParamManager())
    __swig_destroy__ = _vscmgStateEffector.delete_DynParamManager

    def registerState(self, nRow, nCol, stateName):
        return _vscmgStateEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _vscmgStateEffector.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _vscmgStateEffector.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _vscmgStateEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _vscmgStateEffector.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _vscmgStateEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _vscmgStateEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _vscmgStateEffector.DynParamManager_setPropertyValue(self, propName, propValue)

# Register DynParamManager in _vscmgStateEffector:
_vscmgStateEffector.DynParamManager_swigregister(DynParamManager)
class DynamicObject(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    dynManager = property(_vscmgStateEffector.DynamicObject_dynManager_get, _vscmgStateEffector.DynamicObject_dynManager_set)
    integrator = property(_vscmgStateEffector.DynamicObject_integrator_get, _vscmgStateEffector.DynamicObject_integrator_set)
    bskLogger = property(_vscmgStateEffector.DynamicObject_bskLogger_get, _vscmgStateEffector.DynamicObject_bskLogger_set)
    __swig_destroy__ = _vscmgStateEffector.delete_DynamicObject

    def UpdateState(self, callTime):
        return _vscmgStateEffector.DynamicObject_UpdateState(self, callTime)

    def equationsOfMotion(self, t, timeStep):
        return _vscmgStateEffector.DynamicObject_equationsOfMotion(self, t, timeStep)

    def preIntegration(self, callTime):
        return _vscmgStateEffector.DynamicObject_preIntegration(self, callTime)

    def postIntegration(self, callTime):
        return _vscmgStateEffector.DynamicObject_postIntegration(self, callTime)

    def initializeDynamics(self):
        return _vscmgStateEffector.DynamicObject_initializeDynamics(self)

    def computeEnergyMomentum(self, t):
        return _vscmgStateEffector.DynamicObject_computeEnergyMomentum(self, t)

    def integrateState(self, t):
        return _vscmgStateEffector.DynamicObject_integrateState(self, t)

    def setIntegrator(self, newIntegrator):
        return _vscmgStateEffector.DynamicObject_setIntegrator(self, newIntegrator)

    def syncDynamicsIntegration(self, dynPtr):
        return _vscmgStateEffector.DynamicObject_syncDynamicsIntegration(self, dynPtr)
    isDynamicsSynced = property(_vscmgStateEffector.DynamicObject_isDynamicsSynced_get, _vscmgStateEffector.DynamicObject_isDynamicsSynced_set)
    timeStep = property(_vscmgStateEffector.DynamicObject_timeStep_get, _vscmgStateEffector.DynamicObject_timeStep_set)
    timeBefore = property(_vscmgStateEffector.DynamicObject_timeBefore_get, _vscmgStateEffector.DynamicObject_timeBefore_set)

# Register DynamicObject in _vscmgStateEffector:
_vscmgStateEffector.DynamicObject_swigregister(DynamicObject)
class VSCMGStateEffector(SysModel, StateEffector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vscmgStateEffector.VSCMGStateEffector_swiginit(self, _vscmgStateEffector.new_VSCMGStateEffector())
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGStateEffector

    def registerStates(self, states):
        return _vscmgStateEffector.VSCMGStateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _vscmgStateEffector.VSCMGStateEffector_linkInStates(self, states)

    def updateEffectorMassProps(self, integTime):
        return _vscmgStateEffector.VSCMGStateEffector_updateEffectorMassProps(self, integTime)

    def Reset(self, CurrentSimNanos):
        return _vscmgStateEffector.VSCMGStateEffector_Reset(self, CurrentSimNanos)

    def AddVSCMG(self, NewVSCMG):
        return _vscmgStateEffector.VSCMGStateEffector_AddVSCMG(self, NewVSCMG)

    def UpdateState(self, CurrentSimNanos):
        return _vscmgStateEffector.VSCMGStateEffector_UpdateState(self, CurrentSimNanos)

    def WriteOutputMessages(self, CurrentClock):
        return _vscmgStateEffector.VSCMGStateEffector_WriteOutputMessages(self, CurrentClock)

    def ReadInputs(self):
        return _vscmgStateEffector.VSCMGStateEffector_ReadInputs(self)

    def ConfigureVSCMGRequests(self, CurrentTime):
        return _vscmgStateEffector.VSCMGStateEffector_ConfigureVSCMGRequests(self, CurrentTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _vscmgStateEffector.VSCMGStateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _vscmgStateEffector.VSCMGStateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _vscmgStateEffector.VSCMGStateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)
    VSCMGData = property(_vscmgStateEffector.VSCMGStateEffector_VSCMGData_get, _vscmgStateEffector.VSCMGStateEffector_VSCMGData_set)
    g_N = property(_vscmgStateEffector.VSCMGStateEffector_g_N_get, _vscmgStateEffector.VSCMGStateEffector_g_N_set)
    cmdsInMsg = property(_vscmgStateEffector.VSCMGStateEffector_cmdsInMsg_get, _vscmgStateEffector.VSCMGStateEffector_cmdsInMsg_set)
    speedOutMsg = property(_vscmgStateEffector.VSCMGStateEffector_speedOutMsg_get, _vscmgStateEffector.VSCMGStateEffector_speedOutMsg_set)
    vscmgOutMsgs = property(_vscmgStateEffector.VSCMGStateEffector_vscmgOutMsgs_get, _vscmgStateEffector.VSCMGStateEffector_vscmgOutMsgs_set)
    newVSCMGCmds = property(_vscmgStateEffector.VSCMGStateEffector_newVSCMGCmds_get, _vscmgStateEffector.VSCMGStateEffector_newVSCMGCmds_set)
    outputStates = property(_vscmgStateEffector.VSCMGStateEffector_outputStates_get, _vscmgStateEffector.VSCMGStateEffector_outputStates_set)
    nameOfVSCMGOmegasState = property(_vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGOmegasState_get, _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGOmegasState_set)
    nameOfVSCMGThetasState = property(_vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGThetasState_get, _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGThetasState_set)
    nameOfVSCMGGammasState = property(_vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammasState_get, _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammasState_set)
    nameOfVSCMGGammaDotsState = property(_vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammaDotsState_get, _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammaDotsState_set)
    numVSCMG = property(_vscmgStateEffector.VSCMGStateEffector_numVSCMG_get, _vscmgStateEffector.VSCMGStateEffector_numVSCMG_set)
    numVSCMGJitter = property(_vscmgStateEffector.VSCMGStateEffector_numVSCMGJitter_get, _vscmgStateEffector.VSCMGStateEffector_numVSCMGJitter_set)
    bskLogger = property(_vscmgStateEffector.VSCMGStateEffector_bskLogger_get, _vscmgStateEffector.VSCMGStateEffector_bskLogger_set)

# Register VSCMGStateEffector in _vscmgStateEffector:
_vscmgStateEffector.VSCMGStateEffector_swigregister(VSCMGStateEffector)
class VSCMGCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u_s_cmd = property(_vscmgStateEffector.VSCMGCmdMsgPayload_u_s_cmd_get, _vscmgStateEffector.VSCMGCmdMsgPayload_u_s_cmd_set)
    u_g_cmd = property(_vscmgStateEffector.VSCMGCmdMsgPayload_u_g_cmd_get, _vscmgStateEffector.VSCMGCmdMsgPayload_u_g_cmd_set)

    def __init__(self):
        _vscmgStateEffector.VSCMGCmdMsgPayload_swiginit(self, _vscmgStateEffector.new_VSCMGCmdMsgPayload())
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGCmdMsgPayload

# Register VSCMGCmdMsgPayload in _vscmgStateEffector:
_vscmgStateEffector.VSCMGCmdMsgPayload_swigregister(VSCMGCmdMsgPayload)
class VSCMGSpeedMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelSpeeds = property(_vscmgStateEffector.VSCMGSpeedMsgPayload_wheelSpeeds_get, _vscmgStateEffector.VSCMGSpeedMsgPayload_wheelSpeeds_set)
    gimbalAngles = property(_vscmgStateEffector.VSCMGSpeedMsgPayload_gimbalAngles_get, _vscmgStateEffector.VSCMGSpeedMsgPayload_gimbalAngles_set)
    gimbalRates = property(_vscmgStateEffector.VSCMGSpeedMsgPayload_gimbalRates_get, _vscmgStateEffector.VSCMGSpeedMsgPayload_gimbalRates_set)

    def __init__(self):
        _vscmgStateEffector.VSCMGSpeedMsgPayload_swiginit(self, _vscmgStateEffector.new_VSCMGSpeedMsgPayload())
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGSpeedMsgPayload

# Register VSCMGSpeedMsgPayload in _vscmgStateEffector:
_vscmgStateEffector.VSCMGSpeedMsgPayload_swigregister(VSCMGSpeedMsgPayload)
class VSCMGArrayTorqueMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelTorque = property(_vscmgStateEffector.VSCMGArrayTorqueMsgPayload_wheelTorque_get, _vscmgStateEffector.VSCMGArrayTorqueMsgPayload_wheelTorque_set)
    gimbalTorque = property(_vscmgStateEffector.VSCMGArrayTorqueMsgPayload_gimbalTorque_get, _vscmgStateEffector.VSCMGArrayTorqueMsgPayload_gimbalTorque_set)

    def __init__(self):
        _vscmgStateEffector.VSCMGArrayTorqueMsgPayload_swiginit(self, _vscmgStateEffector.new_VSCMGArrayTorqueMsgPayload())
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGArrayTorqueMsgPayload

# Register VSCMGArrayTorqueMsgPayload in _vscmgStateEffector:
_vscmgStateEffector.VSCMGArrayTorqueMsgPayload_swigregister(VSCMGArrayTorqueMsgPayload)
vscmgBalancedWheels = _vscmgStateEffector.vscmgBalancedWheels
vscmgJitterSimple = _vscmgStateEffector.vscmgJitterSimple
vscmgJitterFullyCoupled = _vscmgStateEffector.vscmgJitterFullyCoupled
class VSCMGConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VSCMGModel = property(_vscmgStateEffector.VSCMGConfigMsgPayload_VSCMGModel_get, _vscmgStateEffector.VSCMGConfigMsgPayload_VSCMGModel_set)
    rGB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rGB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rGB_B_set)
    gsHat0_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gsHat0_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gsHat0_B_set)
    gsHat_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gsHat_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gsHat_B_set)
    gtHat0_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gtHat0_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gtHat0_B_set)
    gtHat_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gtHat_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gtHat_B_set)
    ggHat_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_ggHat_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_ggHat_B_set)
    w2Hat0_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_w2Hat0_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_w2Hat0_B_set)
    w2Hat_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_w2Hat_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_w2Hat_B_set)
    w3Hat0_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_w3Hat0_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_w3Hat0_B_set)
    w3Hat_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_w3Hat_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_w3Hat_B_set)
    massV = property(_vscmgStateEffector.VSCMGConfigMsgPayload_massV_get, _vscmgStateEffector.VSCMGConfigMsgPayload_massV_set)
    massG = property(_vscmgStateEffector.VSCMGConfigMsgPayload_massG_get, _vscmgStateEffector.VSCMGConfigMsgPayload_massG_set)
    massW = property(_vscmgStateEffector.VSCMGConfigMsgPayload_massW_get, _vscmgStateEffector.VSCMGConfigMsgPayload_massW_set)
    theta = property(_vscmgStateEffector.VSCMGConfigMsgPayload_theta_get, _vscmgStateEffector.VSCMGConfigMsgPayload_theta_set)
    Omega = property(_vscmgStateEffector.VSCMGConfigMsgPayload_Omega_get, _vscmgStateEffector.VSCMGConfigMsgPayload_Omega_set)
    gamma = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gamma_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gamma_set)
    gammaDot = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gammaDot_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gammaDot_set)
    IW1 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IW1_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IW1_set)
    IW2 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IW2_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IW2_set)
    IW3 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IW3_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IW3_set)
    IW13 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IW13_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IW13_set)
    IG1 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IG1_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IG1_set)
    IG2 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IG2_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IG2_set)
    IG3 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IG3_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IG3_set)
    IG12 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IG12_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IG12_set)
    IG13 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IG13_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IG13_set)
    IG23 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IG23_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IG23_set)
    IV1 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IV1_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IV1_set)
    IV2 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IV2_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IV2_set)
    IV3 = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IV3_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IV3_set)
    rhoG = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rhoG_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rhoG_set)
    rhoW = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rhoW_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rhoW_set)
    U_s = property(_vscmgStateEffector.VSCMGConfigMsgPayload_U_s_get, _vscmgStateEffector.VSCMGConfigMsgPayload_U_s_set)
    U_d = property(_vscmgStateEffector.VSCMGConfigMsgPayload_U_d_get, _vscmgStateEffector.VSCMGConfigMsgPayload_U_d_set)
    rGcG_G = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rGcG_G_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rGcG_G_set)
    d = property(_vscmgStateEffector.VSCMGConfigMsgPayload_d_get, _vscmgStateEffector.VSCMGConfigMsgPayload_d_set)
    l = property(_vscmgStateEffector.VSCMGConfigMsgPayload_l_get, _vscmgStateEffector.VSCMGConfigMsgPayload_l_set)
    L = property(_vscmgStateEffector.VSCMGConfigMsgPayload_L_get, _vscmgStateEffector.VSCMGConfigMsgPayload_L_set)
    u_s_current = property(_vscmgStateEffector.VSCMGConfigMsgPayload_u_s_current_get, _vscmgStateEffector.VSCMGConfigMsgPayload_u_s_current_set)
    u_s_max = property(_vscmgStateEffector.VSCMGConfigMsgPayload_u_s_max_get, _vscmgStateEffector.VSCMGConfigMsgPayload_u_s_max_set)
    u_s_min = property(_vscmgStateEffector.VSCMGConfigMsgPayload_u_s_min_get, _vscmgStateEffector.VSCMGConfigMsgPayload_u_s_min_set)
    u_s_f = property(_vscmgStateEffector.VSCMGConfigMsgPayload_u_s_f_get, _vscmgStateEffector.VSCMGConfigMsgPayload_u_s_f_set)
    Omega_max = property(_vscmgStateEffector.VSCMGConfigMsgPayload_Omega_max_get, _vscmgStateEffector.VSCMGConfigMsgPayload_Omega_max_set)
    wheelLinearFrictionRatio = property(_vscmgStateEffector.VSCMGConfigMsgPayload_wheelLinearFrictionRatio_get, _vscmgStateEffector.VSCMGConfigMsgPayload_wheelLinearFrictionRatio_set)
    u_g_current = property(_vscmgStateEffector.VSCMGConfigMsgPayload_u_g_current_get, _vscmgStateEffector.VSCMGConfigMsgPayload_u_g_current_set)
    u_g_max = property(_vscmgStateEffector.VSCMGConfigMsgPayload_u_g_max_get, _vscmgStateEffector.VSCMGConfigMsgPayload_u_g_max_set)
    u_g_min = property(_vscmgStateEffector.VSCMGConfigMsgPayload_u_g_min_get, _vscmgStateEffector.VSCMGConfigMsgPayload_u_g_min_set)
    u_g_f = property(_vscmgStateEffector.VSCMGConfigMsgPayload_u_g_f_get, _vscmgStateEffector.VSCMGConfigMsgPayload_u_g_f_set)
    gammaDot_max = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gammaDot_max_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gammaDot_max_set)
    gimbalLinearFrictionRatio = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gimbalLinearFrictionRatio_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gimbalLinearFrictionRatio_set)
    IGPntGc_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IGPntGc_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IGPntGc_B_set)
    IWPntWc_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IWPntWc_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IWPntWc_B_set)
    IPrimeGPntGc_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IPrimeGPntGc_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IPrimeGPntGc_B_set)
    IPrimeWPntWc_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_IPrimeWPntWc_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_IPrimeWPntWc_B_set)
    rGcG_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rGcG_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rGcG_B_set)
    rGcB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rGcB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rGcB_B_set)
    rWcB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rWcB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rWcB_B_set)
    rWcG_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rWcG_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rWcG_B_set)
    rTildeGcB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rTildeGcB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rTildeGcB_B_set)
    rTildeWcB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rTildeWcB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rTildeWcB_B_set)
    rPrimeGcB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rPrimeGcB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rPrimeGcB_B_set)
    rPrimeWcB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rPrimeWcB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rPrimeWcB_B_set)
    rPrimeTildeGcB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rPrimeTildeGcB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rPrimeTildeGcB_B_set)
    rPrimeTildeWcB_B = property(_vscmgStateEffector.VSCMGConfigMsgPayload_rPrimeTildeWcB_B_get, _vscmgStateEffector.VSCMGConfigMsgPayload_rPrimeTildeWcB_B_set)
    aOmega = property(_vscmgStateEffector.VSCMGConfigMsgPayload_aOmega_get, _vscmgStateEffector.VSCMGConfigMsgPayload_aOmega_set)
    bOmega = property(_vscmgStateEffector.VSCMGConfigMsgPayload_bOmega_get, _vscmgStateEffector.VSCMGConfigMsgPayload_bOmega_set)
    cOmega = property(_vscmgStateEffector.VSCMGConfigMsgPayload_cOmega_get, _vscmgStateEffector.VSCMGConfigMsgPayload_cOmega_set)
    dOmega = property(_vscmgStateEffector.VSCMGConfigMsgPayload_dOmega_get, _vscmgStateEffector.VSCMGConfigMsgPayload_dOmega_set)
    eOmega = property(_vscmgStateEffector.VSCMGConfigMsgPayload_eOmega_get, _vscmgStateEffector.VSCMGConfigMsgPayload_eOmega_set)
    agamma = property(_vscmgStateEffector.VSCMGConfigMsgPayload_agamma_get, _vscmgStateEffector.VSCMGConfigMsgPayload_agamma_set)
    bgamma = property(_vscmgStateEffector.VSCMGConfigMsgPayload_bgamma_get, _vscmgStateEffector.VSCMGConfigMsgPayload_bgamma_set)
    cgamma = property(_vscmgStateEffector.VSCMGConfigMsgPayload_cgamma_get, _vscmgStateEffector.VSCMGConfigMsgPayload_cgamma_set)
    dgamma = property(_vscmgStateEffector.VSCMGConfigMsgPayload_dgamma_get, _vscmgStateEffector.VSCMGConfigMsgPayload_dgamma_set)
    egamma = property(_vscmgStateEffector.VSCMGConfigMsgPayload_egamma_get, _vscmgStateEffector.VSCMGConfigMsgPayload_egamma_set)
    p = property(_vscmgStateEffector.VSCMGConfigMsgPayload_p_get, _vscmgStateEffector.VSCMGConfigMsgPayload_p_set)
    q = property(_vscmgStateEffector.VSCMGConfigMsgPayload_q_get, _vscmgStateEffector.VSCMGConfigMsgPayload_q_set)
    s = property(_vscmgStateEffector.VSCMGConfigMsgPayload_s_get, _vscmgStateEffector.VSCMGConfigMsgPayload_s_set)
    gravityTorqueWheel_s = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gravityTorqueWheel_s_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gravityTorqueWheel_s_set)
    gravityTorqueGimbal_g = property(_vscmgStateEffector.VSCMGConfigMsgPayload_gravityTorqueGimbal_g_get, _vscmgStateEffector.VSCMGConfigMsgPayload_gravityTorqueGimbal_g_set)

    def __init__(self):
        _vscmgStateEffector.VSCMGConfigMsgPayload_swiginit(self, _vscmgStateEffector.new_VSCMGConfigMsgPayload())
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGConfigMsgPayload

# Register VSCMGConfigMsgPayload in _vscmgStateEffector:
_vscmgStateEffector.VSCMGConfigMsgPayload_swigregister(VSCMGConfigMsgPayload)
MAX_CIRCLE_NUM = _vscmgStateEffector.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _vscmgStateEffector.MAX_LIMB_PNTS
MAX_EFF_CNT = _vscmgStateEffector.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _vscmgStateEffector.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _vscmgStateEffector.MAX_ST_VEH_COUNT
NANO2SEC = _vscmgStateEffector.NANO2SEC
SEC2NANO = _vscmgStateEffector.SEC2NANO
SEC2HOUR = _vscmgStateEffector.SEC2HOUR
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vscmgStateEffector.delete_SwigPyIterator

    def value(self):
        return _vscmgStateEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _vscmgStateEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _vscmgStateEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _vscmgStateEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _vscmgStateEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _vscmgStateEffector.SwigPyIterator_copy(self)

    def next(self):
        return _vscmgStateEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _vscmgStateEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _vscmgStateEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _vscmgStateEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _vscmgStateEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _vscmgStateEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _vscmgStateEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _vscmgStateEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _vscmgStateEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _vscmgStateEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vscmgStateEffector:
_vscmgStateEffector.SwigPyIterator_swigregister(SwigPyIterator)

import sys
protectAllClasses(sys.modules[__name__])


