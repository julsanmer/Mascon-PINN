# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _smallBodyNavIntUKFCamMUin2
else:
    import _smallBodyNavIntUKFCamMUin2

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _smallBodyNavIntUKFCamMUin2.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _smallBodyNavIntUKFCamMUin2.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _smallBodyNavIntUKFCamMUin2.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _smallBodyNavIntUKFCamMUin2.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _smallBodyNavIntUKFCamMUin2.new_longArray(nelements)

def delete_longArray(ary):
    return _smallBodyNavIntUKFCamMUin2.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _smallBodyNavIntUKFCamMUin2.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _smallBodyNavIntUKFCamMUin2.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _smallBodyNavIntUKFCamMUin2.new_intArray(nelements)

def delete_intArray(ary):
    return _smallBodyNavIntUKFCamMUin2.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _smallBodyNavIntUKFCamMUin2.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _smallBodyNavIntUKFCamMUin2.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _smallBodyNavIntUKFCamMUin2.new_shortArray(nelements)

def delete_shortArray(ary):
    return _smallBodyNavIntUKFCamMUin2.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _smallBodyNavIntUKFCamMUin2.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _smallBodyNavIntUKFCamMUin2.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _smallBodyNavIntUKFCamMUin2.SysModel_swiginit(self, _smallBodyNavIntUKFCamMUin2.new_SysModel(*args))
    __swig_destroy__ = _smallBodyNavIntUKFCamMUin2.delete_SysModel

    def SelfInit(self):
        return _smallBodyNavIntUKFCamMUin2.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _smallBodyNavIntUKFCamMUin2.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _smallBodyNavIntUKFCamMUin2.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _smallBodyNavIntUKFCamMUin2.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_smallBodyNavIntUKFCamMUin2.SysModel_ModelTag_get, _smallBodyNavIntUKFCamMUin2.SysModel_ModelTag_set)
    CallCounts = property(_smallBodyNavIntUKFCamMUin2.SysModel_CallCounts_get, _smallBodyNavIntUKFCamMUin2.SysModel_CallCounts_set)
    RNGSeed = property(_smallBodyNavIntUKFCamMUin2.SysModel_RNGSeed_get, _smallBodyNavIntUKFCamMUin2.SysModel_RNGSeed_set)
    moduleID = property(_smallBodyNavIntUKFCamMUin2.SysModel_moduleID_get, _smallBodyNavIntUKFCamMUin2.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _smallBodyNavIntUKFCamMUin2:
_smallBodyNavIntUKFCamMUin2.SysModel_swigregister(SysModel)
class StateBatchIntUKFCamMUin2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tcpu = property(_smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_tcpu_get, _smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_tcpu_set)
    Xhat = property(_smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_Xhat_get, _smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_Xhat_set)
    Pxx = property(_smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_Pxx_get, _smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_Pxx_set)
    resZ = property(_smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_resZ_get, _smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_resZ_set)
    rGrav = property(_smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_rGrav_get, _smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_rGrav_set)
    aGrav = property(_smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_aGrav_get, _smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_aGrav_set)
    bskLogger = property(_smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_bskLogger_get, _smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_bskLogger_set)

    def __init__(self):
        _smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_swiginit(self, _smallBodyNavIntUKFCamMUin2.new_StateBatchIntUKFCamMUin2())
    __swig_destroy__ = _smallBodyNavIntUKFCamMUin2.delete_StateBatchIntUKFCamMUin2

# Register StateBatchIntUKFCamMUin2 in _smallBodyNavIntUKFCamMUin2:
_smallBodyNavIntUKFCamMUin2.StateBatchIntUKFCamMUin2_swigregister(StateBatchIntUKFCamMUin2)
class SphericalHarmonicsIntUKFCamMUin2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    radEquator = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_radEquator_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_radEquator_set)
    muBody = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_muBody_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_muBody_set)
    degSpher = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_degSpher_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_degSpher_set)
    nCS = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nCS_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nCS_set)
    nC = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nC_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nC_set)
    CSidx = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_CSidx_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_CSidx_set)
    nCarray = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nCarray_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nCarray_set)
    nSarray = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nSarray_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nSarray_set)
    cBar = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_cBar_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_cBar_set)
    sBar = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_sBar_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_sBar_set)
    aBar = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_aBar_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_aBar_set)
    n1 = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_n1_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_n1_set)
    n2 = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_n2_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_n2_set)
    nQuot1 = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nQuot1_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nQuot1_set)
    nQuot2 = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nQuot2_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_nQuot2_set)
    bskLogger = property(_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_bskLogger_get, _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_bskLogger_set)

    def __init__(self):
        _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_swiginit(self, _smallBodyNavIntUKFCamMUin2.new_SphericalHarmonicsIntUKFCamMUin2())
    __swig_destroy__ = _smallBodyNavIntUKFCamMUin2.delete_SphericalHarmonicsIntUKFCamMUin2

    def initializeParameters(self):
        return _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_initializeParameters(self)

    def getK(self, degree):
        return _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_getK(self, degree)

    def computeField(self, pos_Pfix):
        return _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_computeField(self, pos_Pfix)

    def CSVec2csBar(self, CSVec):
        return _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_CSVec2csBar(self, CSVec)

    def CSIndex(self):
        return _smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_CSIndex(self)

# Register SphericalHarmonicsIntUKFCamMUin2 in _smallBodyNavIntUKFCamMUin2:
_smallBodyNavIntUKFCamMUin2.SphericalHarmonicsIntUKFCamMUin2_swigregister(SphericalHarmonicsIntUKFCamMUin2)
class SmallBodyNavIntUKFCamMUin2(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_swiginit(self, _smallBodyNavIntUKFCamMUin2.new_SmallBodyNavIntUKFCamMUin2())
    __swig_destroy__ = _smallBodyNavIntUKFCamMUin2.delete_SmallBodyNavIntUKFCamMUin2

    def SelfInit(self):
        return _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_SelfInit(self)

    def Reset(self, CurrentSimNanos):
        return _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_UpdateState(self, CurrentSimNanos)

    def updateMeasBatch(self, t, Z, PvvZ, Zsol, r_AS):
        return _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_updateMeasBatch(self, t, Z, PvvZ, Zsol, r_AS)
    cameraNavInMsg = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_cameraNavInMsg_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_cameraNavInMsg_set)
    ephemerisInMsg = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_ephemerisInMsg_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_ephemerisInMsg_set)
    smallBodyNavIntOutMsg = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_smallBodyNavIntOutMsg_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_smallBodyNavIntOutMsg_set)
    smallBodyNavIntOutMsgC = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_smallBodyNavIntOutMsgC_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_smallBodyNavIntOutMsgC_set)
    bskLogger = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_bskLogger_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_bskLogger_set)
    measMode = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_measMode_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_measMode_set)
    mu_ast = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_mu_ast_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_mu_ast_set)
    xhat_k = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_xhat_k_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_xhat_k_set)
    Pxx_k = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Pxx_k_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Pxx_k_set)
    Pww = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Pww_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Pww_set)
    Pvv = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Pvv_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Pvv_set)
    resz_k = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_resz_k_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_resz_k_set)
    dcm_AN = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_dcm_AN_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_dcm_AN_set)
    rotRate = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_rotRate_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_rotRate_set)
    nx = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_nx_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_nx_set)
    nz = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_nz_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_nz_set)
    alpha = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_alpha_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_alpha_set)
    beta = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_beta_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_beta_set)
    kappa = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_kappa_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_kappa_set)
    Nint = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Nint_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_Nint_set)
    t_ad = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_t_ad_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_t_ad_set)
    lst0 = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_lst0_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_lst0_set)
    useSpherharm = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_useSpherharm_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_useSpherharm_set)
    useMascons = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_useMascons_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_useMascons_set)
    useSRP = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_useSRP_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_useSRP_set)
    useSun = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_useSun_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_useSun_set)
    m = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_m_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_m_set)
    CR = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_CR_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_CR_set)
    ASRP = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_ASRP_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_ASRP_set)
    spherharm = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_spherharm_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_spherharm_set)
    stateBatch = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_stateBatch_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_stateBatch_set)

# Register SmallBodyNavIntUKFCamMUin2 in _smallBodyNavIntUKFCamMUin2:
_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntUKFCamMUin2_swigregister(SmallBodyNavIntUKFCamMUin2)
class EphemerisMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BdyZero_N = property(_smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_r_BdyZero_N_get, _smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_r_BdyZero_N_set)
    v_BdyZero_N = property(_smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_v_BdyZero_N_get, _smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_v_BdyZero_N_set)
    sigma_BN = property(_smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_sigma_BN_get, _smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_sigma_BN_set)
    omega_BN_B = property(_smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_omega_BN_B_get, _smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_omega_BN_B_set)
    timeTag = property(_smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_timeTag_get, _smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_timeTag_set)

    def __init__(self):
        _smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_swiginit(self, _smallBodyNavIntUKFCamMUin2.new_EphemerisMsgPayload())
    __swig_destroy__ = _smallBodyNavIntUKFCamMUin2.delete_EphemerisMsgPayload

# Register EphemerisMsgPayload in _smallBodyNavIntUKFCamMUin2:
_smallBodyNavIntUKFCamMUin2.EphemerisMsgPayload_swigregister(EphemerisMsgPayload)
MAX_LANDMARKS_BUF = _smallBodyNavIntUKFCamMUin2.MAX_LANDMARKS_BUF
class CameraNavMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nLvisible = property(_smallBodyNavIntUKFCamMUin2.CameraNavMsgPayload_nLvisible_get, _smallBodyNavIntUKFCamMUin2.CameraNavMsgPayload_nLvisible_set)
    idxLvisible = property(_smallBodyNavIntUKFCamMUin2.CameraNavMsgPayload_idxLvisible_get, _smallBodyNavIntUKFCamMUin2.CameraNavMsgPayload_idxLvisible_set)
    pLvisible = property(_smallBodyNavIntUKFCamMUin2.CameraNavMsgPayload_pLvisible_get, _smallBodyNavIntUKFCamMUin2.CameraNavMsgPayload_pLvisible_set)

    def __init__(self):
        _smallBodyNavIntUKFCamMUin2.CameraNavMsgPayload_swiginit(self, _smallBodyNavIntUKFCamMUin2.new_CameraNavMsgPayload())
    __swig_destroy__ = _smallBodyNavIntUKFCamMUin2.delete_CameraNavMsgPayload

# Register CameraNavMsgPayload in _smallBodyNavIntUKFCamMUin2:
_smallBodyNavIntUKFCamMUin2.CameraNavMsgPayload_swigregister(CameraNavMsgPayload)
class SmallBodyNavIntMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_state_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_state_set)
    covar = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_covar_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_covar_set)
    skew = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_skew_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_skew_set)
    kurt = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_kurt_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_kurt_set)
    meas = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_meas_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_meas_set)
    tcpu = property(_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_tcpu_get, _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_tcpu_set)

    def __init__(self):
        _smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_swiginit(self, _smallBodyNavIntUKFCamMUin2.new_SmallBodyNavIntMsgPayload())
    __swig_destroy__ = _smallBodyNavIntUKFCamMUin2.delete_SmallBodyNavIntMsgPayload

# Register SmallBodyNavIntMsgPayload in _smallBodyNavIntUKFCamMUin2:
_smallBodyNavIntUKFCamMUin2.SmallBodyNavIntMsgPayload_swigregister(SmallBodyNavIntMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


