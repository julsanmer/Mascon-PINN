# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _smallbodyDMCUKF
else:
    import _smallbodyDMCUKF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _smallbodyDMCUKF.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _smallbodyDMCUKF.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _smallbodyDMCUKF.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _smallbodyDMCUKF.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _smallbodyDMCUKF.new_longArray(nelements)

def delete_longArray(ary):
    return _smallbodyDMCUKF.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _smallbodyDMCUKF.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _smallbodyDMCUKF.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _smallbodyDMCUKF.new_intArray(nelements)

def delete_intArray(ary):
    return _smallbodyDMCUKF.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _smallbodyDMCUKF.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _smallbodyDMCUKF.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _smallbodyDMCUKF.new_shortArray(nelements)

def delete_shortArray(ary):
    return _smallbodyDMCUKF.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _smallbodyDMCUKF.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _smallbodyDMCUKF.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _smallbodyDMCUKF.SysModel_swiginit(self, _smallbodyDMCUKF.new_SysModel(*args))
    __swig_destroy__ = _smallbodyDMCUKF.delete_SysModel

    def SelfInit(self):
        return _smallbodyDMCUKF.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _smallbodyDMCUKF.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _smallbodyDMCUKF.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _smallbodyDMCUKF.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_smallbodyDMCUKF.SysModel_ModelTag_get, _smallbodyDMCUKF.SysModel_ModelTag_set)
    CallCounts = property(_smallbodyDMCUKF.SysModel_CallCounts_get, _smallbodyDMCUKF.SysModel_CallCounts_set)
    RNGSeed = property(_smallbodyDMCUKF.SysModel_RNGSeed_get, _smallbodyDMCUKF.SysModel_RNGSeed_set)
    moduleID = property(_smallbodyDMCUKF.SysModel_moduleID_get, _smallbodyDMCUKF.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _smallbodyDMCUKF:
_smallbodyDMCUKF.SysModel_swigregister(SysModel)
class StatemeasBatchDMCUKF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tcpu = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_tcpu_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_tcpu_set)
    Xhat = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_Xhat_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_Xhat_set)
    Pxx = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_Pxx_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_Pxx_set)
    tBatch = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_tBatch_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_tBatch_set)
    pixelBatch = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_pixelBatch_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_pixelBatch_set)
    nvisibleBatch = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_nvisibleBatch_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_nvisibleBatch_set)
    visibleBatch = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_visibleBatch_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_visibleBatch_set)
    latlonBatch = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_latlonBatch_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_latlonBatch_set)
    rBatch_AS = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_rBatch_AS_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_rBatch_AS_set)
    eul323Batch_AN = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_eul323Batch_AN_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_eul323Batch_AN_set)
    nSegment = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_nSegment_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_nSegment_set)
    resZ = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_resZ_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_resZ_set)
    tGrav = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_tGrav_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_tGrav_set)
    rGrav = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_rGrav_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_rGrav_set)
    aGrav = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_aGrav_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_aGrav_set)
    bskLogger = property(_smallbodyDMCUKF.StatemeasBatchDMCUKF_bskLogger_get, _smallbodyDMCUKF.StatemeasBatchDMCUKF_bskLogger_set)

    def __init__(self):
        _smallbodyDMCUKF.StatemeasBatchDMCUKF_swiginit(self, _smallbodyDMCUKF.new_StatemeasBatchDMCUKF())
    __swig_destroy__ = _smallbodyDMCUKF.delete_StatemeasBatchDMCUKF

# Register StatemeasBatchDMCUKF in _smallbodyDMCUKF:
_smallbodyDMCUKF.StatemeasBatchDMCUKF_swigregister(StatemeasBatchDMCUKF)
class MasconDMCUKF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nM = property(_smallbodyDMCUKF.MasconDMCUKF_nM_get, _smallbodyDMCUKF.MasconDMCUKF_nM_set)
    posM = property(_smallbodyDMCUKF.MasconDMCUKF_posM_get, _smallbodyDMCUKF.MasconDMCUKF_posM_set)
    muM = property(_smallbodyDMCUKF.MasconDMCUKF_muM_get, _smallbodyDMCUKF.MasconDMCUKF_muM_set)
    bskLogger = property(_smallbodyDMCUKF.MasconDMCUKF_bskLogger_get, _smallbodyDMCUKF.MasconDMCUKF_bskLogger_set)

    def __init__(self):
        _smallbodyDMCUKF.MasconDMCUKF_swiginit(self, _smallbodyDMCUKF.new_MasconDMCUKF())
    __swig_destroy__ = _smallbodyDMCUKF.delete_MasconDMCUKF

    def initializeParameters(self):
        return _smallbodyDMCUKF.MasconDMCUKF_initializeParameters(self)

    def computeField(self, pos_Pfix):
        return _smallbodyDMCUKF.MasconDMCUKF_computeField(self, pos_Pfix)

# Register MasconDMCUKF in _smallbodyDMCUKF:
_smallbodyDMCUKF.MasconDMCUKF_swigregister(MasconDMCUKF)
class SpherharmDMCUKF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    radEquator = property(_smallbodyDMCUKF.SpherharmDMCUKF_radEquator_get, _smallbodyDMCUKF.SpherharmDMCUKF_radEquator_set)
    muBody = property(_smallbodyDMCUKF.SpherharmDMCUKF_muBody_get, _smallbodyDMCUKF.SpherharmDMCUKF_muBody_set)
    degSpher = property(_smallbodyDMCUKF.SpherharmDMCUKF_degSpher_get, _smallbodyDMCUKF.SpherharmDMCUKF_degSpher_set)
    cBar = property(_smallbodyDMCUKF.SpherharmDMCUKF_cBar_get, _smallbodyDMCUKF.SpherharmDMCUKF_cBar_set)
    sBar = property(_smallbodyDMCUKF.SpherharmDMCUKF_sBar_get, _smallbodyDMCUKF.SpherharmDMCUKF_sBar_set)
    aBar = property(_smallbodyDMCUKF.SpherharmDMCUKF_aBar_get, _smallbodyDMCUKF.SpherharmDMCUKF_aBar_set)
    n1 = property(_smallbodyDMCUKF.SpherharmDMCUKF_n1_get, _smallbodyDMCUKF.SpherharmDMCUKF_n1_set)
    n2 = property(_smallbodyDMCUKF.SpherharmDMCUKF_n2_get, _smallbodyDMCUKF.SpherharmDMCUKF_n2_set)
    nQuot1 = property(_smallbodyDMCUKF.SpherharmDMCUKF_nQuot1_get, _smallbodyDMCUKF.SpherharmDMCUKF_nQuot1_set)
    nQuot2 = property(_smallbodyDMCUKF.SpherharmDMCUKF_nQuot2_get, _smallbodyDMCUKF.SpherharmDMCUKF_nQuot2_set)
    nC = property(_smallbodyDMCUKF.SpherharmDMCUKF_nC_get, _smallbodyDMCUKF.SpherharmDMCUKF_nC_set)
    nS = property(_smallbodyDMCUKF.SpherharmDMCUKF_nS_get, _smallbodyDMCUKF.SpherharmDMCUKF_nS_set)
    nCS = property(_smallbodyDMCUKF.SpherharmDMCUKF_nCS_get, _smallbodyDMCUKF.SpherharmDMCUKF_nCS_set)
    bskLogger = property(_smallbodyDMCUKF.SpherharmDMCUKF_bskLogger_get, _smallbodyDMCUKF.SpherharmDMCUKF_bskLogger_set)

    def __init__(self):
        _smallbodyDMCUKF.SpherharmDMCUKF_swiginit(self, _smallbodyDMCUKF.new_SpherharmDMCUKF())
    __swig_destroy__ = _smallbodyDMCUKF.delete_SpherharmDMCUKF

    def initializeParameters(self):
        return _smallbodyDMCUKF.SpherharmDMCUKF_initializeParameters(self)

    def getK(self, degree):
        return _smallbodyDMCUKF.SpherharmDMCUKF_getK(self, degree)

    def computeField(self, pos_Pfix):
        return _smallbodyDMCUKF.SpherharmDMCUKF_computeField(self, pos_Pfix)

    def CSvec2CSmat(self, Csvec, CSad):
        return _smallbodyDMCUKF.SpherharmDMCUKF_CSvec2CSmat(self, Csvec, CSad)

    def CSmat2CSvec(self, Cmat, Smat, CSad):
        return _smallbodyDMCUKF.SpherharmDMCUKF_CSmat2CSvec(self, Cmat, Smat, CSad)

# Register SpherharmDMCUKF in _smallbodyDMCUKF:
_smallbodyDMCUKF.SpherharmDMCUKF_swigregister(SpherharmDMCUKF)
class SmallbodyDMCUKF(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _smallbodyDMCUKF.SmallbodyDMCUKF_swiginit(self, _smallbodyDMCUKF.new_SmallbodyDMCUKF())
    __swig_destroy__ = _smallbodyDMCUKF.delete_SmallbodyDMCUKF

    def SelfInit(self):
        return _smallbodyDMCUKF.SmallbodyDMCUKF_SelfInit(self)

    def Reset(self, CurrentSimNanos):
        return _smallbodyDMCUKF.SmallbodyDMCUKF_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _smallbodyDMCUKF.SmallbodyDMCUKF_UpdateState(self, CurrentSimNanos)

    def updateMeasBatch(self):
        return _smallbodyDMCUKF.SmallbodyDMCUKF_updateMeasBatch(self)
    camNavInMsg = property(_smallbodyDMCUKF.SmallbodyDMCUKF_camNavInMsg_get, _smallbodyDMCUKF.SmallbodyDMCUKF_camNavInMsg_set)
    ephemerisInMsg = property(_smallbodyDMCUKF.SmallbodyDMCUKF_ephemerisInMsg_get, _smallbodyDMCUKF.SmallbodyDMCUKF_ephemerisInMsg_set)
    smallbodyDMCUKFOutMsg = property(_smallbodyDMCUKF.SmallbodyDMCUKF_smallbodyDMCUKFOutMsg_get, _smallbodyDMCUKF.SmallbodyDMCUKF_smallbodyDMCUKFOutMsg_set)
    smallbodyDMCUKFOutMsgC = property(_smallbodyDMCUKF.SmallbodyDMCUKF_smallbodyDMCUKFOutMsgC_get, _smallbodyDMCUKF.SmallbodyDMCUKF_smallbodyDMCUKFOutMsgC_set)
    bskLogger = property(_smallbodyDMCUKF.SmallbodyDMCUKF_bskLogger_get, _smallbodyDMCUKF.SmallbodyDMCUKF_bskLogger_set)
    useMeasSimple = property(_smallbodyDMCUKF.SmallbodyDMCUKF_useMeasSimple_get, _smallbodyDMCUKF.SmallbodyDMCUKF_useMeasSimple_set)
    useMeasPoscam = property(_smallbodyDMCUKF.SmallbodyDMCUKF_useMeasPoscam_get, _smallbodyDMCUKF.SmallbodyDMCUKF_useMeasPoscam_set)
    useMeasPixel = property(_smallbodyDMCUKF.SmallbodyDMCUKF_useMeasPixel_get, _smallbodyDMCUKF.SmallbodyDMCUKF_useMeasPixel_set)
    xhat_k = property(_smallbodyDMCUKF.SmallbodyDMCUKF_xhat_k_get, _smallbodyDMCUKF.SmallbodyDMCUKF_xhat_k_set)
    Pxx_k = property(_smallbodyDMCUKF.SmallbodyDMCUKF_Pxx_k_get, _smallbodyDMCUKF.SmallbodyDMCUKF_Pxx_k_set)
    Pww = property(_smallbodyDMCUKF.SmallbodyDMCUKF_Pww_get, _smallbodyDMCUKF.SmallbodyDMCUKF_Pww_set)
    Pvv = property(_smallbodyDMCUKF.SmallbodyDMCUKF_Pvv_get, _smallbodyDMCUKF.SmallbodyDMCUKF_Pvv_set)
    resz_k = property(_smallbodyDMCUKF.SmallbodyDMCUKF_resz_k_get, _smallbodyDMCUKF.SmallbodyDMCUKF_resz_k_set)
    innx_k = property(_smallbodyDMCUKF.SmallbodyDMCUKF_innx_k_get, _smallbodyDMCUKF.SmallbodyDMCUKF_innx_k_set)
    latlon_k = property(_smallbodyDMCUKF.SmallbodyDMCUKF_latlon_k_get, _smallbodyDMCUKF.SmallbodyDMCUKF_latlon_k_set)
    lst_k = property(_smallbodyDMCUKF.SmallbodyDMCUKF_lst_k_get, _smallbodyDMCUKF.SmallbodyDMCUKF_lst_k_set)
    dcm_AN = property(_smallbodyDMCUKF.SmallbodyDMCUKF_dcm_AN_get, _smallbodyDMCUKF.SmallbodyDMCUKF_dcm_AN_set)
    rotRate = property(_smallbodyDMCUKF.SmallbodyDMCUKF_rotRate_get, _smallbodyDMCUKF.SmallbodyDMCUKF_rotRate_set)
    alpha = property(_smallbodyDMCUKF.SmallbodyDMCUKF_alpha_get, _smallbodyDMCUKF.SmallbodyDMCUKF_alpha_set)
    beta = property(_smallbodyDMCUKF.SmallbodyDMCUKF_beta_get, _smallbodyDMCUKF.SmallbodyDMCUKF_beta_set)
    kappa = property(_smallbodyDMCUKF.SmallbodyDMCUKF_kappa_get, _smallbodyDMCUKF.SmallbodyDMCUKF_kappa_set)
    Nint = property(_smallbodyDMCUKF.SmallbodyDMCUKF_Nint_get, _smallbodyDMCUKF.SmallbodyDMCUKF_Nint_set)
    lst0 = property(_smallbodyDMCUKF.SmallbodyDMCUKF_lst0_get, _smallbodyDMCUKF.SmallbodyDMCUKF_lst0_set)
    useSH = property(_smallbodyDMCUKF.SmallbodyDMCUKF_useSH_get, _smallbodyDMCUKF.SmallbodyDMCUKF_useSH_set)
    useM = property(_smallbodyDMCUKF.SmallbodyDMCUKF_useM_get, _smallbodyDMCUKF.SmallbodyDMCUKF_useM_set)
    useSRP = property(_smallbodyDMCUKF.SmallbodyDMCUKF_useSRP_get, _smallbodyDMCUKF.SmallbodyDMCUKF_useSRP_set)
    useSun = property(_smallbodyDMCUKF.SmallbodyDMCUKF_useSun_get, _smallbodyDMCUKF.SmallbodyDMCUKF_useSun_set)
    m = property(_smallbodyDMCUKF.SmallbodyDMCUKF_m_get, _smallbodyDMCUKF.SmallbodyDMCUKF_m_set)
    CR = property(_smallbodyDMCUKF.SmallbodyDMCUKF_CR_get, _smallbodyDMCUKF.SmallbodyDMCUKF_CR_set)
    ASRP = property(_smallbodyDMCUKF.SmallbodyDMCUKF_ASRP_get, _smallbodyDMCUKF.SmallbodyDMCUKF_ASRP_set)
    nLandmarks = property(_smallbodyDMCUKF.SmallbodyDMCUKF_nLandmarks_get, _smallbodyDMCUKF.SmallbodyDMCUKF_nLandmarks_set)
    xyzLandmarks = property(_smallbodyDMCUKF.SmallbodyDMCUKF_xyzLandmarks_get, _smallbodyDMCUKF.SmallbodyDMCUKF_xyzLandmarks_set)
    pixel = property(_smallbodyDMCUKF.SmallbodyDMCUKF_pixel_get, _smallbodyDMCUKF.SmallbodyDMCUKF_pixel_set)
    nVisible = property(_smallbodyDMCUKF.SmallbodyDMCUKF_nVisible_get, _smallbodyDMCUKF.SmallbodyDMCUKF_nVisible_set)
    idxVisible = property(_smallbodyDMCUKF.SmallbodyDMCUKF_idxVisible_get, _smallbodyDMCUKF.SmallbodyDMCUKF_idxVisible_set)
    f = property(_smallbodyDMCUKF.SmallbodyDMCUKF_f_get, _smallbodyDMCUKF.SmallbodyDMCUKF_f_set)
    wPixel = property(_smallbodyDMCUKF.SmallbodyDMCUKF_wPixel_get, _smallbodyDMCUKF.SmallbodyDMCUKF_wPixel_set)
    mascon = property(_smallbodyDMCUKF.SmallbodyDMCUKF_mascon_get, _smallbodyDMCUKF.SmallbodyDMCUKF_mascon_set)
    spherharm = property(_smallbodyDMCUKF.SmallbodyDMCUKF_spherharm_get, _smallbodyDMCUKF.SmallbodyDMCUKF_spherharm_set)
    statemeasBatch = property(_smallbodyDMCUKF.SmallbodyDMCUKF_statemeasBatch_get, _smallbodyDMCUKF.SmallbodyDMCUKF_statemeasBatch_set)

# Register SmallbodyDMCUKF in _smallbodyDMCUKF:
_smallbodyDMCUKF.SmallbodyDMCUKF_swigregister(SmallbodyDMCUKF)
class EphemerisMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BdyZero_N = property(_smallbodyDMCUKF.EphemerisMsgPayload_r_BdyZero_N_get, _smallbodyDMCUKF.EphemerisMsgPayload_r_BdyZero_N_set)
    v_BdyZero_N = property(_smallbodyDMCUKF.EphemerisMsgPayload_v_BdyZero_N_get, _smallbodyDMCUKF.EphemerisMsgPayload_v_BdyZero_N_set)
    sigma_BN = property(_smallbodyDMCUKF.EphemerisMsgPayload_sigma_BN_get, _smallbodyDMCUKF.EphemerisMsgPayload_sigma_BN_set)
    omega_BN_B = property(_smallbodyDMCUKF.EphemerisMsgPayload_omega_BN_B_get, _smallbodyDMCUKF.EphemerisMsgPayload_omega_BN_B_set)
    timeTag = property(_smallbodyDMCUKF.EphemerisMsgPayload_timeTag_get, _smallbodyDMCUKF.EphemerisMsgPayload_timeTag_set)

    def __init__(self):
        _smallbodyDMCUKF.EphemerisMsgPayload_swiginit(self, _smallbodyDMCUKF.new_EphemerisMsgPayload())
    __swig_destroy__ = _smallbodyDMCUKF.delete_EphemerisMsgPayload

# Register EphemerisMsgPayload in _smallbodyDMCUKF:
_smallbodyDMCUKF.EphemerisMsgPayload_swigregister(EphemerisMsgPayload)
class CamNav3MsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BP_P = property(_smallbodyDMCUKF.CamNav3MsgPayload_r_BP_P_get, _smallbodyDMCUKF.CamNav3MsgPayload_r_BP_P_set)
    P = property(_smallbodyDMCUKF.CamNav3MsgPayload_P_get, _smallbodyDMCUKF.CamNav3MsgPayload_P_set)
    nLvisible = property(_smallbodyDMCUKF.CamNav3MsgPayload_nLvisible_get, _smallbodyDMCUKF.CamNav3MsgPayload_nLvisible_set)
    navSolution = property(_smallbodyDMCUKF.CamNav3MsgPayload_navSolution_get, _smallbodyDMCUKF.CamNav3MsgPayload_navSolution_set)
    tcpu = property(_smallbodyDMCUKF.CamNav3MsgPayload_tcpu_get, _smallbodyDMCUKF.CamNav3MsgPayload_tcpu_set)

    def __init__(self):
        _smallbodyDMCUKF.CamNav3MsgPayload_swiginit(self, _smallbodyDMCUKF.new_CamNav3MsgPayload())
    __swig_destroy__ = _smallbodyDMCUKF.delete_CamNav3MsgPayload

# Register CamNav3MsgPayload in _smallbodyDMCUKF:
_smallbodyDMCUKF.CamNav3MsgPayload_swigregister(CamNav3MsgPayload)
class SmallbodyDMCUKFMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_state_get, _smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_state_set)
    covar = property(_smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_covar_get, _smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_covar_set)
    meas = property(_smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_meas_get, _smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_meas_set)
    tcpu = property(_smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_tcpu_get, _smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_tcpu_set)

    def __init__(self):
        _smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_swiginit(self, _smallbodyDMCUKF.new_SmallbodyDMCUKFMsgPayload())
    __swig_destroy__ = _smallbodyDMCUKF.delete_SmallbodyDMCUKFMsgPayload

# Register SmallbodyDMCUKFMsgPayload in _smallbodyDMCUKF:
_smallbodyDMCUKF.SmallbodyDMCUKFMsgPayload_swigregister(SmallbodyDMCUKFMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


