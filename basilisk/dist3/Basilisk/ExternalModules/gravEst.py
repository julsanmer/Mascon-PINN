# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gravEst
else:
    import _gravEst

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _gravEst.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _gravEst.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _gravEst.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _gravEst.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _gravEst.new_longArray(nelements)

def delete_longArray(ary):
    return _gravEst.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _gravEst.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _gravEst.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _gravEst.new_intArray(nelements)

def delete_intArray(ary):
    return _gravEst.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _gravEst.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _gravEst.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _gravEst.new_shortArray(nelements)

def delete_shortArray(ary):
    return _gravEst.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _gravEst.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _gravEst.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gravEst.SysModel_swiginit(self, _gravEst.new_SysModel(*args))
    __swig_destroy__ = _gravEst.delete_SysModel

    def SelfInit(self):
        return _gravEst.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _gravEst.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _gravEst.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _gravEst.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_gravEst.SysModel_ModelTag_get, _gravEst.SysModel_ModelTag_set)
    CallCounts = property(_gravEst.SysModel_CallCounts_get, _gravEst.SysModel_CallCounts_set)
    RNGSeed = property(_gravEst.SysModel_RNGSeed_get, _gravEst.SysModel_RNGSeed_set)
    moduleID = property(_gravEst.SysModel_moduleID_get, _gravEst.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _gravEst:
_gravEst.SysModel_swigregister(SysModel)
class PolyGravEst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nVertex = property(_gravEst.PolyGravEst_nVertex_get, _gravEst.PolyGravEst_nVertex_set)
    nFacet = property(_gravEst.PolyGravEst_nFacet_get, _gravEst.PolyGravEst_nFacet_set)
    xyzVertex = property(_gravEst.PolyGravEst_xyzVertex_get, _gravEst.PolyGravEst_xyzVertex_set)
    orderFacet = property(_gravEst.PolyGravEst_orderFacet_get, _gravEst.PolyGravEst_orderFacet_set)
    xyzFacet = property(_gravEst.PolyGravEst_xyzFacet_get, _gravEst.PolyGravEst_xyzFacet_set)
    normalFacet = property(_gravEst.PolyGravEst_normalFacet_get, _gravEst.PolyGravEst_normalFacet_set)
    muBody = property(_gravEst.PolyGravEst_muBody_get, _gravEst.PolyGravEst_muBody_set)
    volPoly = property(_gravEst.PolyGravEst_volPoly_get, _gravEst.PolyGravEst_volPoly_set)
    bskLogger = property(_gravEst.PolyGravEst_bskLogger_get, _gravEst.PolyGravEst_bskLogger_set)

    def __init__(self):
        _gravEst.PolyGravEst_swiginit(self, _gravEst.new_PolyGravEst())
    __swig_destroy__ = _gravEst.delete_PolyGravEst

    def initializeParameters(self):
        return _gravEst.PolyGravEst_initializeParameters(self)

    def computeField(self, pos):
        return _gravEst.PolyGravEst_computeField(self, pos)

    def interiorConstraint(self, posVec, nBatch):
        return _gravEst.PolyGravEst_interiorConstraint(self, posVec, nBatch)

    def computeLaplacian(self, posBatch):
        return _gravEst.PolyGravEst_computeLaplacian(self, posBatch)

    def computeAltitude(self, pos):
        return _gravEst.PolyGravEst_computeAltitude(self, pos)

# Register PolyGravEst in _gravEst:
_gravEst.PolyGravEst_swigregister(PolyGravEst)
class MasconGravEst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nM = property(_gravEst.MasconGravEst_nM_get, _gravEst.MasconGravEst_nM_set)
    posM = property(_gravEst.MasconGravEst_posM_get, _gravEst.MasconGravEst_posM_set)
    muM = property(_gravEst.MasconGravEst_muM_get, _gravEst.MasconGravEst_muM_set)
    MUPOS = property(_gravEst.MasconGravEst_MUPOS_get, _gravEst.MasconGravEst_MUPOS_set)
    MU = property(_gravEst.MasconGravEst_MU_get, _gravEst.MasconGravEst_MU_set)
    useMSE = property(_gravEst.MasconGravEst_useMSE_get, _gravEst.MasconGravEst_useMSE_set)
    useMLE = property(_gravEst.MasconGravEst_useMLE_get, _gravEst.MasconGravEst_useMLE_set)
    mu = property(_gravEst.MasconGravEst_mu_get, _gravEst.MasconGravEst_mu_set)
    muMad = property(_gravEst.MasconGravEst_muMad_get, _gravEst.MasconGravEst_muMad_set)
    posMad = property(_gravEst.MasconGravEst_posMad_get, _gravEst.MasconGravEst_posMad_set)
    posMadVec = property(_gravEst.MasconGravEst_posMadVec_get, _gravEst.MasconGravEst_posMadVec_set)
    accVec = property(_gravEst.MasconGravEst_accVec_get, _gravEst.MasconGravEst_accVec_set)
    bskLogger = property(_gravEst.MasconGravEst_bskLogger_get, _gravEst.MasconGravEst_bskLogger_set)

    def __init__(self):
        _gravEst.MasconGravEst_swiginit(self, _gravEst.new_MasconGravEst())
    __swig_destroy__ = _gravEst.delete_MasconGravEst

    def computeField(self, pos):
        return _gravEst.MasconGravEst_computeField(self, pos)

    def daccdsqrmupos(self, sqrmuposMVec, posDataVec, nData, accNormVec):
        return _gravEst.MasconGravEst_daccdsqrmupos(self, sqrmuposMVec, posDataVec, nData, accNormVec)

    def dlossdacc(self, daccdsqrmuM, sqrmuM, nData, accDataVec):
        return _gravEst.MasconGravEst_dlossdacc(self, daccdsqrmuM, sqrmuM, nData, accDataVec)

    def gradlossMUPOS(self, daccdsqrmuposM, dLdacc, nData):
        return _gravEst.MasconGravEst_gradlossMUPOS(self, daccdsqrmuposM, dLdacc, nData)

    def loss(self, daccdsqrmuM, sqrmuM, nData, accDataVec):
        return _gravEst.MasconGravEst_loss(self, daccdsqrmuM, sqrmuM, nData, accDataVec)

    def daccdmu(self, posDataVec, nData, accNormVec):
        return _gravEst.MasconGravEst_daccdmu(self, posDataVec, nData, accNormVec)

    def daccdsqrmu(self, daccdmuM, sqrmuMVec, nData):
        return _gravEst.MasconGravEst_daccdsqrmu(self, daccdmuM, sqrmuMVec, nData)

    def gradlossMU(self, daccdsqrmuM, dLdacc, nData):
        return _gravEst.MasconGravEst_gradlossMU(self, daccdsqrmuM, dLdacc, nData)

# Register MasconGravEst in _gravEst:
_gravEst.MasconGravEst_swigregister(MasconGravEst)
class SpherharmGravEst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    radEquator = property(_gravEst.SpherharmGravEst_radEquator_get, _gravEst.SpherharmGravEst_radEquator_set)
    muBody = property(_gravEst.SpherharmGravEst_muBody_get, _gravEst.SpherharmGravEst_muBody_set)
    degSpher = property(_gravEst.SpherharmGravEst_degSpher_get, _gravEst.SpherharmGravEst_degSpher_set)
    cBar = property(_gravEst.SpherharmGravEst_cBar_get, _gravEst.SpherharmGravEst_cBar_set)
    sBar = property(_gravEst.SpherharmGravEst_sBar_get, _gravEst.SpherharmGravEst_sBar_set)
    aBar = property(_gravEst.SpherharmGravEst_aBar_get, _gravEst.SpherharmGravEst_aBar_set)
    n1 = property(_gravEst.SpherharmGravEst_n1_get, _gravEst.SpherharmGravEst_n1_set)
    n2 = property(_gravEst.SpherharmGravEst_n2_get, _gravEst.SpherharmGravEst_n2_set)
    nQuot1 = property(_gravEst.SpherharmGravEst_nQuot1_get, _gravEst.SpherharmGravEst_nQuot1_set)
    nQuot2 = property(_gravEst.SpherharmGravEst_nQuot2_get, _gravEst.SpherharmGravEst_nQuot2_set)
    nC = property(_gravEst.SpherharmGravEst_nC_get, _gravEst.SpherharmGravEst_nC_set)
    nS = property(_gravEst.SpherharmGravEst_nS_get, _gravEst.SpherharmGravEst_nS_set)
    nCS = property(_gravEst.SpherharmGravEst_nCS_get, _gravEst.SpherharmGravEst_nCS_set)
    CSad = property(_gravEst.SpherharmGravEst_CSad_get, _gravEst.SpherharmGravEst_CSad_set)
    bskLogger = property(_gravEst.SpherharmGravEst_bskLogger_get, _gravEst.SpherharmGravEst_bskLogger_set)

    def __init__(self):
        _gravEst.SpherharmGravEst_swiginit(self, _gravEst.new_SpherharmGravEst())
    __swig_destroy__ = _gravEst.delete_SpherharmGravEst

    def initializeParameters(self):
        return _gravEst.SpherharmGravEst_initializeParameters(self)

    def getK(self, degree):
        return _gravEst.SpherharmGravEst_getK(self, degree)

    def CSvec2CSmat(self, Csvec, CSad):
        return _gravEst.SpherharmGravEst_CSvec2CSmat(self, Csvec, CSad)

    def CSmat2CSvec(self):
        return _gravEst.SpherharmGravEst_CSmat2CSvec(self)

    def daccdCS(self, posDataVec, nData, accStd):
        return _gravEst.SpherharmGravEst_daccdCS(self, posDataVec, nData, accStd)

    def gradlossCS(self, daccdCS, CSVec, accDataVec, accMeanVec, accStdVec, L0):
        return _gravEst.SpherharmGravEst_gradlossCS(self, daccdCS, CSVec, accDataVec, accMeanVec, accStdVec, L0)

    def lossCS(self, daccdCS, CSVec, accDataVec, accMeanVec, accStdVec, L0):
        return _gravEst.SpherharmGravEst_lossCS(self, daccdCS, CSVec, accDataVec, accMeanVec, accStdVec, L0)

# Register SpherharmGravEst in _gravEst:
_gravEst.SpherharmGravEst_swigregister(SpherharmGravEst)
class GravEst(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gravEst.GravEst_swiginit(self, _gravEst.new_GravEst())
    __swig_destroy__ = _gravEst.delete_GravEst

    def SelfInit(self):
        return _gravEst.GravEst_SelfInit(self)

    def Reset(self, CurrentSimNanos):
        return _gravEst.GravEst_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _gravEst.GravEst_UpdateState(self, CurrentSimNanos)

    def trainGravity(self, posBatch, accBatch, W):
        return _gravEst.GravEst_trainGravity(self, posBatch, accBatch, W)

    def preprocessData(self, posData, accData):
        return _gravEst.GravEst_preprocessData(self, posData, accData)
    accFit = property(_gravEst.GravEst_accFit_get, _gravEst.GravEst_accFit_set)
    W = property(_gravEst.GravEst_W_get, _gravEst.GravEst_W_set)
    nData = property(_gravEst.GravEst_nData_get, _gravEst.GravEst_nData_set)
    posDataVec = property(_gravEst.GravEst_posDataVec_get, _gravEst.GravEst_posDataVec_set)
    accDataVec = property(_gravEst.GravEst_accDataVec_get, _gravEst.GravEst_accDataVec_set)
    accNormVec = property(_gravEst.GravEst_accNormVec_get, _gravEst.GravEst_accNormVec_set)
    accMeanVec = property(_gravEst.GravEst_accMeanVec_get, _gravEst.GravEst_accMeanVec_set)
    accStdVec = property(_gravEst.GravEst_accStdVec_get, _gravEst.GravEst_accStdVec_set)
    accMean = property(_gravEst.GravEst_accMean_get, _gravEst.GravEst_accMean_set)
    accStd = property(_gravEst.GravEst_accStd_get, _gravEst.GravEst_accStd_set)
    L = property(_gravEst.GravEst_L_get, _gravEst.GravEst_L_set)
    L0 = property(_gravEst.GravEst_L0_get, _gravEst.GravEst_L0_set)
    tcpu = property(_gravEst.GravEst_tcpu_get, _gravEst.GravEst_tcpu_set)
    useSH = property(_gravEst.GravEst_useSH_get, _gravEst.GravEst_useSH_set)
    useM = property(_gravEst.GravEst_useM_get, _gravEst.GravEst_useM_set)
    useAdagrad = property(_gravEst.GravEst_useAdagrad_get, _gravEst.GravEst_useAdagrad_set)
    useAdam = property(_gravEst.GravEst_useAdam_get, _gravEst.GravEst_useAdam_set)
    useNAGD = property(_gravEst.GravEst_useNAGD_get, _gravEst.GravEst_useNAGD_set)
    useLevMar = property(_gravEst.GravEst_useLevMar_get, _gravEst.GravEst_useLevMar_set)
    stop = property(_gravEst.GravEst_stop_get, _gravEst.GravEst_stop_set)
    maxIter = property(_gravEst.GravEst_maxIter_get, _gravEst.GravEst_maxIter_set)
    eta = property(_gravEst.GravEst_eta_get, _gravEst.GravEst_eta_set)
    lam = property(_gravEst.GravEst_lam_get, _gravEst.GravEst_lam_set)
    beta1 = property(_gravEst.GravEst_beta1_get, _gravEst.GravEst_beta1_set)
    beta2 = property(_gravEst.GravEst_beta2_get, _gravEst.GravEst_beta2_set)
    w = property(_gravEst.GravEst_w_get, _gravEst.GravEst_w_set)
    tolStop = property(_gravEst.GravEst_tolStop_get, _gravEst.GravEst_tolStop_set)
    useMSE = property(_gravEst.GravEst_useMSE_get, _gravEst.GravEst_useMSE_set)
    useMLE = property(_gravEst.GravEst_useMLE_get, _gravEst.GravEst_useMLE_set)
    bskLogger = property(_gravEst.GravEst_bskLogger_get, _gravEst.GravEst_bskLogger_set)
    mascon = property(_gravEst.GravEst_mascon_get, _gravEst.GravEst_mascon_set)
    spherharm = property(_gravEst.GravEst_spherharm_get, _gravEst.GravEst_spherharm_set)
    poly = property(_gravEst.GravEst_poly_get, _gravEst.GravEst_poly_set)

# Register GravEst in _gravEst:
_gravEst.GravEst_swigregister(GravEst)

import sys
protectAllClasses(sys.modules[__name__])


