# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dmcukf
else:
    import _dmcukf

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *

from Basilisk.simulation.pointMassGravityModel import PointMassGravityModel
from Basilisk.simulation.masconGravityModel import MasconGravityModel
from Basilisk.simulation.pinnGravityModel import PINNGravityModel
from Basilisk.simulation.polyhedralGravityModel import PolyhedralGravityModel
from Basilisk.simulation.sphericalHarmonicsGravityModel import SphericalHarmonicsGravityModel

from Basilisk.utilities import deprecated

Mascon = MasconGravityModel
PINN = PINNGravityModel
Polyhedral = PolyhedralGravityModel
SphericalHarmonics = SphericalHarmonicsGravityModel

from typing import Optional, Union



def new_doubleArray(nelements):
    return _dmcukf.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _dmcukf.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _dmcukf.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _dmcukf.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _dmcukf.new_longArray(nelements)

def delete_longArray(ary):
    return _dmcukf.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _dmcukf.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _dmcukf.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _dmcukf.new_intArray(nelements)

def delete_intArray(ary):
    return _dmcukf.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _dmcukf.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _dmcukf.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _dmcukf.new_shortArray(nelements)

def delete_shortArray(ary):
    return _dmcukf.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _dmcukf.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _dmcukf.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



import sys
protectAllClasses(sys.modules[__name__])

class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dmcukf.SysModel_swiginit(self, _dmcukf.new_SysModel(*args))
    __swig_destroy__ = _dmcukf.delete_SysModel

    def SelfInit(self):
        return _dmcukf.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _dmcukf.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _dmcukf.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _dmcukf.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_dmcukf.SysModel_ModelTag_get, _dmcukf.SysModel_ModelTag_set)
    CallCounts = property(_dmcukf.SysModel_CallCounts_get, _dmcukf.SysModel_CallCounts_set)
    RNGSeed = property(_dmcukf.SysModel_RNGSeed_get, _dmcukf.SysModel_RNGSeed_set)
    moduleID = property(_dmcukf.SysModel_moduleID_get, _dmcukf.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _dmcukf:
_dmcukf.SysModel_swigregister(SysModel)
class Batch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dmcukf.Batch_swiginit(self, _dmcukf.new_Batch())
    __swig_destroy__ = _dmcukf.delete_Batch
    t = property(_dmcukf.Batch_t_get, _dmcukf.Batch_t_set)
    x = property(_dmcukf.Batch_x_get, _dmcukf.Batch_x_set)
    Pxx = property(_dmcukf.Batch_Pxx_get, _dmcukf.Batch_Pxx_set)
    pLmk = property(_dmcukf.Batch_pLmk_get, _dmcukf.Batch_pLmk_set)
    isvisibleLmk = property(_dmcukf.Batch_isvisibleLmk_get, _dmcukf.Batch_isvisibleLmk_set)
    r_PS_N1 = property(_dmcukf.Batch_r_PS_N1_get, _dmcukf.Batch_r_PS_N1_set)
    mrp_PN0 = property(_dmcukf.Batch_mrp_PN0_get, _dmcukf.Batch_mrp_PN0_set)
    mrp_BP = property(_dmcukf.Batch_mrp_BP_get, _dmcukf.Batch_mrp_BP_set)
    bskLogger = property(_dmcukf.Batch_bskLogger_get, _dmcukf.Batch_bskLogger_set)

# Register Batch in _dmcukf:
_dmcukf.Batch_swigregister(Batch)
class DMCUKF(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dmcukf.DMCUKF_swiginit(self, _dmcukf.new_DMCUKF())

        object.__setattr__(self, "_pyGravityModel", None) # Enable setting _pyGravityModel
        self.gravityModel = PointMassGravityModel() # Re-set gravityModel to populate the _pyGravityModel


    __swig_destroy__ = _dmcukf.delete_DMCUKF

    def Reset(self, CurrentSimNanos):
        return _dmcukf.DMCUKF_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _dmcukf.DMCUKF_UpdateState(self, CurrentSimNanos)

    def processBatch(self):
        return _dmcukf.DMCUKF_processBatch(self)
    bskLogger = property(_dmcukf.DMCUKF_bskLogger_get, _dmcukf.DMCUKF_bskLogger_set)
    nx = property(_dmcukf.DMCUKF_nx_get, _dmcukf.DMCUKF_nx_set)
    x = property(_dmcukf.DMCUKF_x_get, _dmcukf.DMCUKF_x_set)
    Pxx = property(_dmcukf.DMCUKF_Pxx_get, _dmcukf.DMCUKF_Pxx_set)
    Pproc = property(_dmcukf.DMCUKF_Pproc_get, _dmcukf.DMCUKF_Pproc_set)
    Pmeas = property(_dmcukf.DMCUKF_Pmeas_get, _dmcukf.DMCUKF_Pmeas_set)
    Ppixel = property(_dmcukf.DMCUKF_Ppixel_get, _dmcukf.DMCUKF_Ppixel_set)
    dcm_N1N0 = property(_dmcukf.DMCUKF_dcm_N1N0_get, _dmcukf.DMCUKF_dcm_N1N0_set)
    dcm_CB = property(_dmcukf.DMCUKF_dcm_CB_get, _dmcukf.DMCUKF_dcm_CB_set)
    Nint = property(_dmcukf.DMCUKF_Nint_get, _dmcukf.DMCUKF_Nint_set)
    useSRP = property(_dmcukf.DMCUKF_useSRP_get, _dmcukf.DMCUKF_useSRP_set)
    useSun = property(_dmcukf.DMCUKF_useSun_get, _dmcukf.DMCUKF_useSun_set)
    m = property(_dmcukf.DMCUKF_m_get, _dmcukf.DMCUKF_m_set)
    CR = property(_dmcukf.DMCUKF_CR_get, _dmcukf.DMCUKF_CR_set)
    ASRP = property(_dmcukf.DMCUKF_ASRP_get, _dmcukf.DMCUKF_ASRP_set)
    f = property(_dmcukf.DMCUKF_f_get, _dmcukf.DMCUKF_f_set)
    wPixel = property(_dmcukf.DMCUKF_wPixel_get, _dmcukf.DMCUKF_wPixel_set)
    nLmk = property(_dmcukf.DMCUKF_nLmk_get, _dmcukf.DMCUKF_nLmk_set)
    rLmk = property(_dmcukf.DMCUKF_rLmk_get, _dmcukf.DMCUKF_rLmk_set)
    landmarkInMsgs = property(_dmcukf.DMCUKF_landmarkInMsgs_get, _dmcukf.DMCUKF_landmarkInMsgs_set)
    ephemerisInMsg = property(_dmcukf.DMCUKF_ephemerisInMsg_get, _dmcukf.DMCUKF_ephemerisInMsg_set)
    attitudeInMsg = property(_dmcukf.DMCUKF_attitudeInMsg_get, _dmcukf.DMCUKF_attitudeInMsg_set)
    landmarkMsgBuffer = property(_dmcukf.DMCUKF_landmarkMsgBuffer_get, _dmcukf.DMCUKF_landmarkMsgBuffer_set)
    spacecraftAtt = property(_dmcukf.DMCUKF_spacecraftAtt_get, _dmcukf.DMCUKF_spacecraftAtt_set)
    ephemerisPlanet = property(_dmcukf.DMCUKF_ephemerisPlanet_get, _dmcukf.DMCUKF_ephemerisPlanet_set)
    DMCUKFOutMsg = property(_dmcukf.DMCUKF_DMCUKFOutMsg_get, _dmcukf.DMCUKF_DMCUKFOutMsg_set)
    gravityModel = property(_dmcukf.DMCUKF_gravityModel_get, _dmcukf.DMCUKF_gravityModel_set)
    batch = property(_dmcukf.DMCUKF_batch_get, _dmcukf.DMCUKF_batch_set)
    ukf = property(_dmcukf.DMCUKF_ukf_get, _dmcukf.DMCUKF_ukf_set)


    """
    If we were to call GravBodyData::gravityModel we would obtain a pointer to the
    parent object GravityModel, as this is what is stored in the GravBodyData C++
    class (the concrete type is "lost"). To overcome this, we store a copy of the
    set object in _pyGravityModel and use the gravityModel property to keep the
    Python and C++ objects synchronized. _pyGravityModel does retain the concrete
    type (PointMassGravityModel, SphericalHarmonicsGravityModel...)
    """
    _gravityModel = gravityModel
    @property
    def gravityModel(self):
        return self._pyGravityModel

    @gravityModel.setter
    def gravityModel(self, value):
        self._gravityModel = value
        self._pyGravityModel = value

    @property
    def useSphericalHarmParams(self):
        return isinstance(self.gravityModel, SphericalHarmonicsGravityModel)

    @useSphericalHarmParams.setter
    def useSphericalHarmParams(self, value: bool):
        deprecated.deprecationWarn(
            "GravBodyData.useSphericalHarmParams setter",
            "2024/09/07",
            "Using 'useSphericalHarmParams = True/False' to turn on/off the spherical harmonics"
            " is deprecated. Prefer the following syntax:\n"
            "\tplanet.useSphericalHarmonicsGravityModel('GGM2BData.txt', 100)\n"
            "Over:\n"
            "\tplanet.useSphericalHarmParams = True\n"
            "\tsimIncludeGravBody.loadGravFromFile('GGM2BData.txt', planet.spherHarm, 100)"
        )
        if self.useSphericalHarmParams and not value:
            self.gravityModel = PointMassGravityModel()
        elif not self.useSphericalHarmParams and value:
            self.gravityModel = SphericalHarmonicsGravityModel()

    @property
    def usePolyhedral(self):
        return isinstance(self.gravityModel, PolyhedralGravityModel)

    @usePolyhedral.setter
    def usePolyhedral(self, value: bool):
        deprecated.deprecationWarn(
            "GravBodyData.usePolyhedral setter",
            "2024/09/07",
            "Using 'usePolyhedral = True/False' to turn on/off the polyhedral model"
            " is deprecated. Prefer the following syntax:\n"
            "\tplanet.usePolyhedralGravityModel('eros.txt')\n"
            "Over:\n"
            "\tplanet.usePolyhedral = True\n"
            "\tsimIncludeGravBody.loadPolyFromFile('eros.txt', planet.poly)"
        )
        if self.usePolyhedral and not value:
            self.gravityModel = PointMassGravityModel()
        elif not self.usePolyhedral and value:
            self.gravityModel = PolyhedralGravityModel()

    @property
    def mascon(self) -> MasconGravityModel:
        return self.gravityModel

    @mascon.setter
    def mascon(self, value: MasconGravityModel):
        self.gravityModel = value

    @property
    def pinn(self) -> PINNGravityModel:
        return self.gravityModel

    @pinn.setter
    def pinn(self, value: PINNGravityModel):
        self.gravityModel = value

    @property
    def spherHarm(self) -> SphericalHarmonicsGravityModel:
        if self.useSphericalHarmParams:
            return self.gravityModel
        else:
            raise ValueError("GravBodyData is not using spherical harmonics as a gravity model. "
                "Call 'useSphericalHarmonicsGravityModel(...)' or set 'useSphericalHarmParams' to 'True' before retrieving 'spherHarm'.")

    @spherHarm.setter
    def spherHarm(self, value: SphericalHarmonicsGravityModel):
        self.gravityModel = value

    @property
    def poly(self) -> PolyhedralGravityModel:
        if self.usePolyhedral:
            return self.gravityModel
        else:
            raise ValueError("GravBodyData is not using the polyhedral gravity model. "
                "Call 'usePolyhedralGravityModel(...)' or set 'usePolyhedral' to 'True' before retrieving 'poly'.")

    @poly.setter
    def poly(self, value: PolyhedralGravityModel):
        self.gravityModel = value

    def usePointMassGravityModel(self):
        self.gravityModel = PointMassGravityModel()

    def useMasconGravityModel(self):
        self.gravityModel = MasconGravityModel()

    def usePINNGravityModel(self):
        self.gravityModel = PINNGravityModel()

    def useSphericalHarmonicsGravityModel(self, file: str, maxDeg: int):
        """Makes the GravBodyData use Spherical Harmonics as its gravity model.

        Args:
            file (str): The file that contains the spherical harmonics data in the
                JPL format.
            maxDeg (int): The maximum degree to use in the spherical harmonics.
        """
        self.gravityModel = SphericalHarmonicsGravityModel().loadFromFile(file, maxDeg)

    def usePolyhedralGravityModel(self, file: str):
        """Makes the GravBodyData use the Polyhedral gravity model.

        Args:
            file (str): The file that contains the vertices and facet
                data for the polyhedral.
        """
        self.gravityModel = PolyhedralGravityModel().loadFromFile(file)



# Register DMCUKF in _dmcukf:
_dmcukf.DMCUKF_swigregister(DMCUKF)
class EphemerisMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BdyZero_N = property(_dmcukf.EphemerisMsgPayload_r_BdyZero_N_get, _dmcukf.EphemerisMsgPayload_r_BdyZero_N_set)
    v_BdyZero_N = property(_dmcukf.EphemerisMsgPayload_v_BdyZero_N_get, _dmcukf.EphemerisMsgPayload_v_BdyZero_N_set)
    sigma_BN = property(_dmcukf.EphemerisMsgPayload_sigma_BN_get, _dmcukf.EphemerisMsgPayload_sigma_BN_set)
    omega_BN_B = property(_dmcukf.EphemerisMsgPayload_omega_BN_B_get, _dmcukf.EphemerisMsgPayload_omega_BN_B_set)
    timeTag = property(_dmcukf.EphemerisMsgPayload_timeTag_get, _dmcukf.EphemerisMsgPayload_timeTag_set)

    def __init__(self):
        _dmcukf.EphemerisMsgPayload_swiginit(self, _dmcukf.new_EphemerisMsgPayload())
    __swig_destroy__ = _dmcukf.delete_EphemerisMsgPayload

# Register EphemerisMsgPayload in _dmcukf:
_dmcukf.EphemerisMsgPayload_swigregister(EphemerisMsgPayload)
class NavAttMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_dmcukf.NavAttMsgPayload_timeTag_get, _dmcukf.NavAttMsgPayload_timeTag_set)
    sigma_BN = property(_dmcukf.NavAttMsgPayload_sigma_BN_get, _dmcukf.NavAttMsgPayload_sigma_BN_set)
    omega_BN_B = property(_dmcukf.NavAttMsgPayload_omega_BN_B_get, _dmcukf.NavAttMsgPayload_omega_BN_B_set)
    vehSunPntBdy = property(_dmcukf.NavAttMsgPayload_vehSunPntBdy_get, _dmcukf.NavAttMsgPayload_vehSunPntBdy_set)

    def __init__(self):
        _dmcukf.NavAttMsgPayload_swiginit(self, _dmcukf.new_NavAttMsgPayload())
    __swig_destroy__ = _dmcukf.delete_NavAttMsgPayload

# Register NavAttMsgPayload in _dmcukf:
_dmcukf.NavAttMsgPayload_swigregister(NavAttMsgPayload)
class LandmarkMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isVisible = property(_dmcukf.LandmarkMsgPayload_isVisible_get, _dmcukf.LandmarkMsgPayload_isVisible_set)
    pL = property(_dmcukf.LandmarkMsgPayload_pL_get, _dmcukf.LandmarkMsgPayload_pL_set)

    def __init__(self):
        _dmcukf.LandmarkMsgPayload_swiginit(self, _dmcukf.new_LandmarkMsgPayload())
    __swig_destroy__ = _dmcukf.delete_LandmarkMsgPayload

# Register LandmarkMsgPayload in _dmcukf:
_dmcukf.LandmarkMsgPayload_swigregister(LandmarkMsgPayload)
class DMCUKFMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_dmcukf.DMCUKFMsgPayload_x_get, _dmcukf.DMCUKFMsgPayload_x_set)
    Pxx = property(_dmcukf.DMCUKFMsgPayload_Pxx_get, _dmcukf.DMCUKFMsgPayload_Pxx_set)

    def __init__(self):
        _dmcukf.DMCUKFMsgPayload_swiginit(self, _dmcukf.new_DMCUKFMsgPayload())
    __swig_destroy__ = _dmcukf.delete_DMCUKFMsgPayload

# Register DMCUKFMsgPayload in _dmcukf:
_dmcukf.DMCUKFMsgPayload_swigregister(DMCUKFMsgPayload)

