# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _smallBodyNavUKF10high
else:
    import _smallBodyNavUKF10high

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _smallBodyNavUKF10high.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _smallBodyNavUKF10high.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _smallBodyNavUKF10high.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _smallBodyNavUKF10high.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _smallBodyNavUKF10high.new_longArray(nelements)

def delete_longArray(ary):
    return _smallBodyNavUKF10high.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _smallBodyNavUKF10high.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _smallBodyNavUKF10high.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _smallBodyNavUKF10high.new_intArray(nelements)

def delete_intArray(ary):
    return _smallBodyNavUKF10high.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _smallBodyNavUKF10high.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _smallBodyNavUKF10high.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _smallBodyNavUKF10high.new_shortArray(nelements)

def delete_shortArray(ary):
    return _smallBodyNavUKF10high.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _smallBodyNavUKF10high.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _smallBodyNavUKF10high.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _smallBodyNavUKF10high.SysModel_swiginit(self, _smallBodyNavUKF10high.new_SysModel(*args))
    __swig_destroy__ = _smallBodyNavUKF10high.delete_SysModel

    def SelfInit(self):
        return _smallBodyNavUKF10high.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _smallBodyNavUKF10high.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _smallBodyNavUKF10high.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _smallBodyNavUKF10high.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_smallBodyNavUKF10high.SysModel_ModelTag_get, _smallBodyNavUKF10high.SysModel_ModelTag_set)
    CallCounts = property(_smallBodyNavUKF10high.SysModel_CallCounts_get, _smallBodyNavUKF10high.SysModel_CallCounts_set)
    RNGSeed = property(_smallBodyNavUKF10high.SysModel_RNGSeed_get, _smallBodyNavUKF10high.SysModel_RNGSeed_set)
    moduleID = property(_smallBodyNavUKF10high.SysModel_moduleID_get, _smallBodyNavUKF10high.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _smallBodyNavUKF10high:
_smallBodyNavUKF10high.SysModel_swigregister(SysModel)
class StateBatchUKF10high(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tcpu = property(_smallBodyNavUKF10high.StateBatchUKF10high_tcpu_get, _smallBodyNavUKF10high.StateBatchUKF10high_tcpu_set)
    Xhat = property(_smallBodyNavUKF10high.StateBatchUKF10high_Xhat_get, _smallBodyNavUKF10high.StateBatchUKF10high_Xhat_set)
    Pxx = property(_smallBodyNavUKF10high.StateBatchUKF10high_Pxx_get, _smallBodyNavUKF10high.StateBatchUKF10high_Pxx_set)
    resZ = property(_smallBodyNavUKF10high.StateBatchUKF10high_resZ_get, _smallBodyNavUKF10high.StateBatchUKF10high_resZ_set)
    tGrav = property(_smallBodyNavUKF10high.StateBatchUKF10high_tGrav_get, _smallBodyNavUKF10high.StateBatchUKF10high_tGrav_set)
    rGrav = property(_smallBodyNavUKF10high.StateBatchUKF10high_rGrav_get, _smallBodyNavUKF10high.StateBatchUKF10high_rGrav_set)
    aGrav = property(_smallBodyNavUKF10high.StateBatchUKF10high_aGrav_get, _smallBodyNavUKF10high.StateBatchUKF10high_aGrav_set)
    bskLogger = property(_smallBodyNavUKF10high.StateBatchUKF10high_bskLogger_get, _smallBodyNavUKF10high.StateBatchUKF10high_bskLogger_set)

    def __init__(self):
        _smallBodyNavUKF10high.StateBatchUKF10high_swiginit(self, _smallBodyNavUKF10high.new_StateBatchUKF10high())
    __swig_destroy__ = _smallBodyNavUKF10high.delete_StateBatchUKF10high

# Register StateBatchUKF10high in _smallBodyNavUKF10high:
_smallBodyNavUKF10high.StateBatchUKF10high_swigregister(StateBatchUKF10high)
class MasconsUKF10high(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nM = property(_smallBodyNavUKF10high.MasconsUKF10high_nM_get, _smallBodyNavUKF10high.MasconsUKF10high_nM_set)
    posM = property(_smallBodyNavUKF10high.MasconsUKF10high_posM_get, _smallBodyNavUKF10high.MasconsUKF10high_posM_set)
    muM = property(_smallBodyNavUKF10high.MasconsUKF10high_muM_get, _smallBodyNavUKF10high.MasconsUKF10high_muM_set)
    uposM = property(_smallBodyNavUKF10high.MasconsUKF10high_uposM_get, _smallBodyNavUKF10high.MasconsUKF10high_uposM_set)
    rM = property(_smallBodyNavUKF10high.MasconsUKF10high_rM_get, _smallBodyNavUKF10high.MasconsUKF10high_rM_set)
    useMUPOS = property(_smallBodyNavUKF10high.MasconsUKF10high_useMUPOS_get, _smallBodyNavUKF10high.MasconsUKF10high_useMUPOS_set)
    useMU = property(_smallBodyNavUKF10high.MasconsUKF10high_useMU_get, _smallBodyNavUKF10high.MasconsUKF10high_useMU_set)
    bskLogger = property(_smallBodyNavUKF10high.MasconsUKF10high_bskLogger_get, _smallBodyNavUKF10high.MasconsUKF10high_bskLogger_set)

    def __init__(self):
        _smallBodyNavUKF10high.MasconsUKF10high_swiginit(self, _smallBodyNavUKF10high.new_MasconsUKF10high())
    __swig_destroy__ = _smallBodyNavUKF10high.delete_MasconsUKF10high

    def initializeParameters(self):
        return _smallBodyNavUKF10high.MasconsUKF10high_initializeParameters(self)

    def computeField(self, pos_Pfix):
        return _smallBodyNavUKF10high.MasconsUKF10high_computeField(self, pos_Pfix)

# Register MasconsUKF10high in _smallBodyNavUKF10high:
_smallBodyNavUKF10high.MasconsUKF10high_swigregister(MasconsUKF10high)
class SphericalharmonicsUKF10high(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    radEquator = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_radEquator_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_radEquator_set)
    muBody = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_muBody_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_muBody_set)
    degSpher = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_degSpher_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_degSpher_set)
    cBar = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_cBar_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_cBar_set)
    sBar = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_sBar_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_sBar_set)
    aBar = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_aBar_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_aBar_set)
    n1 = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_n1_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_n1_set)
    n2 = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_n2_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_n2_set)
    nQuot1 = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_nQuot1_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_nQuot1_set)
    nQuot2 = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_nQuot2_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_nQuot2_set)
    nC = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_nC_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_nC_set)
    nS = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_nS_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_nS_set)
    nCS = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_nCS_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_nCS_set)
    bskLogger = property(_smallBodyNavUKF10high.SphericalharmonicsUKF10high_bskLogger_get, _smallBodyNavUKF10high.SphericalharmonicsUKF10high_bskLogger_set)

    def __init__(self):
        _smallBodyNavUKF10high.SphericalharmonicsUKF10high_swiginit(self, _smallBodyNavUKF10high.new_SphericalharmonicsUKF10high())
    __swig_destroy__ = _smallBodyNavUKF10high.delete_SphericalharmonicsUKF10high

    def initializeParameters(self):
        return _smallBodyNavUKF10high.SphericalharmonicsUKF10high_initializeParameters(self)

    def getK(self, degree):
        return _smallBodyNavUKF10high.SphericalharmonicsUKF10high_getK(self, degree)

    def computeField(self, pos_Pfix):
        return _smallBodyNavUKF10high.SphericalharmonicsUKF10high_computeField(self, pos_Pfix)

    def CSvec2CSmat(self, Csvec, CSad):
        return _smallBodyNavUKF10high.SphericalharmonicsUKF10high_CSvec2CSmat(self, Csvec, CSad)

    def CSmat2CSvec(self, Cmat, Smat, CSad):
        return _smallBodyNavUKF10high.SphericalharmonicsUKF10high_CSmat2CSvec(self, Cmat, Smat, CSad)

# Register SphericalharmonicsUKF10high in _smallBodyNavUKF10high:
_smallBodyNavUKF10high.SphericalharmonicsUKF10high_swigregister(SphericalharmonicsUKF10high)
class SmallBodyNavUKF10high(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _smallBodyNavUKF10high.SmallBodyNavUKF10high_swiginit(self, _smallBodyNavUKF10high.new_SmallBodyNavUKF10high())
    __swig_destroy__ = _smallBodyNavUKF10high.delete_SmallBodyNavUKF10high

    def SelfInit(self):
        return _smallBodyNavUKF10high.SmallBodyNavUKF10high_SelfInit(self)

    def Reset(self, CurrentSimNanos):
        return _smallBodyNavUKF10high.SmallBodyNavUKF10high_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _smallBodyNavUKF10high.SmallBodyNavUKF10high_UpdateState(self, CurrentSimNanos)

    def updateMeasBatch(self, tZ, Z, PvvZ, Zsol, r_AS, nSegment):
        return _smallBodyNavUKF10high.SmallBodyNavUKF10high_updateMeasBatch(self, tZ, Z, PvvZ, Zsol, r_AS, nSegment)
    camNavInMsg = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_camNavInMsg_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_camNavInMsg_set)
    ephemerisInMsg = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_ephemerisInMsg_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_ephemerisInMsg_set)
    smallBodyNav2OutMsg = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_smallBodyNav2OutMsg_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_smallBodyNav2OutMsg_set)
    smallBodyNav2OutMsgC = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_smallBodyNav2OutMsgC_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_smallBodyNav2OutMsgC_set)
    bskLogger = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_bskLogger_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_bskLogger_set)
    measMode = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_measMode_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_measMode_set)
    xhat_k = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_xhat_k_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_xhat_k_set)
    Pxx_k = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_Pxx_k_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_Pxx_k_set)
    Pww = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_Pww_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_Pww_set)
    Pvv = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_Pvv_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_Pvv_set)
    resz_k = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_resz_k_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_resz_k_set)
    innx_k = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_innx_k_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_innx_k_set)
    dcm_AN = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_dcm_AN_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_dcm_AN_set)
    rotRate = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_rotRate_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_rotRate_set)
    alpha = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_alpha_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_alpha_set)
    beta = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_beta_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_beta_set)
    kappa = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_kappa_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_kappa_set)
    Nint = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_Nint_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_Nint_set)
    t_ad = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_t_ad_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_t_ad_set)
    lst0 = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_lst0_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_lst0_set)
    useSH = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_useSH_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_useSH_set)
    useM = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_useM_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_useM_set)
    useSRP = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_useSRP_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_useSRP_set)
    useSun = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_useSun_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_useSun_set)
    m = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_m_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_m_set)
    CR = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_CR_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_CR_set)
    ASRP = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_ASRP_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_ASRP_set)
    mascons = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_mascons_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_mascons_set)
    spherharm = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_spherharm_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_spherharm_set)
    stateBatch = property(_smallBodyNavUKF10high.SmallBodyNavUKF10high_stateBatch_get, _smallBodyNavUKF10high.SmallBodyNavUKF10high_stateBatch_set)

# Register SmallBodyNavUKF10high in _smallBodyNavUKF10high:
_smallBodyNavUKF10high.SmallBodyNavUKF10high_swigregister(SmallBodyNavUKF10high)
class EphemerisMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BdyZero_N = property(_smallBodyNavUKF10high.EphemerisMsgPayload_r_BdyZero_N_get, _smallBodyNavUKF10high.EphemerisMsgPayload_r_BdyZero_N_set)
    v_BdyZero_N = property(_smallBodyNavUKF10high.EphemerisMsgPayload_v_BdyZero_N_get, _smallBodyNavUKF10high.EphemerisMsgPayload_v_BdyZero_N_set)
    sigma_BN = property(_smallBodyNavUKF10high.EphemerisMsgPayload_sigma_BN_get, _smallBodyNavUKF10high.EphemerisMsgPayload_sigma_BN_set)
    omega_BN_B = property(_smallBodyNavUKF10high.EphemerisMsgPayload_omega_BN_B_get, _smallBodyNavUKF10high.EphemerisMsgPayload_omega_BN_B_set)
    timeTag = property(_smallBodyNavUKF10high.EphemerisMsgPayload_timeTag_get, _smallBodyNavUKF10high.EphemerisMsgPayload_timeTag_set)

    def __init__(self):
        _smallBodyNavUKF10high.EphemerisMsgPayload_swiginit(self, _smallBodyNavUKF10high.new_EphemerisMsgPayload())
    __swig_destroy__ = _smallBodyNavUKF10high.delete_EphemerisMsgPayload

# Register EphemerisMsgPayload in _smallBodyNavUKF10high:
_smallBodyNavUKF10high.EphemerisMsgPayload_swigregister(EphemerisMsgPayload)
class CamNav3MsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BP_P = property(_smallBodyNavUKF10high.CamNav3MsgPayload_r_BP_P_get, _smallBodyNavUKF10high.CamNav3MsgPayload_r_BP_P_set)
    P = property(_smallBodyNavUKF10high.CamNav3MsgPayload_P_get, _smallBodyNavUKF10high.CamNav3MsgPayload_P_set)
    nLvisible = property(_smallBodyNavUKF10high.CamNav3MsgPayload_nLvisible_get, _smallBodyNavUKF10high.CamNav3MsgPayload_nLvisible_set)
    navSolution = property(_smallBodyNavUKF10high.CamNav3MsgPayload_navSolution_get, _smallBodyNavUKF10high.CamNav3MsgPayload_navSolution_set)
    tcpu = property(_smallBodyNavUKF10high.CamNav3MsgPayload_tcpu_get, _smallBodyNavUKF10high.CamNav3MsgPayload_tcpu_set)

    def __init__(self):
        _smallBodyNavUKF10high.CamNav3MsgPayload_swiginit(self, _smallBodyNavUKF10high.new_CamNav3MsgPayload())
    __swig_destroy__ = _smallBodyNavUKF10high.delete_CamNav3MsgPayload

# Register CamNav3MsgPayload in _smallBodyNavUKF10high:
_smallBodyNavUKF10high.CamNav3MsgPayload_swigregister(CamNav3MsgPayload)
class SmallBodyNav2MsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_smallBodyNavUKF10high.SmallBodyNav2MsgPayload_state_get, _smallBodyNavUKF10high.SmallBodyNav2MsgPayload_state_set)
    covar = property(_smallBodyNavUKF10high.SmallBodyNav2MsgPayload_covar_get, _smallBodyNavUKF10high.SmallBodyNav2MsgPayload_covar_set)
    skew = property(_smallBodyNavUKF10high.SmallBodyNav2MsgPayload_skew_get, _smallBodyNavUKF10high.SmallBodyNav2MsgPayload_skew_set)
    kurt = property(_smallBodyNavUKF10high.SmallBodyNav2MsgPayload_kurt_get, _smallBodyNavUKF10high.SmallBodyNav2MsgPayload_kurt_set)
    meas = property(_smallBodyNavUKF10high.SmallBodyNav2MsgPayload_meas_get, _smallBodyNavUKF10high.SmallBodyNav2MsgPayload_meas_set)
    tcpu = property(_smallBodyNavUKF10high.SmallBodyNav2MsgPayload_tcpu_get, _smallBodyNavUKF10high.SmallBodyNav2MsgPayload_tcpu_set)

    def __init__(self):
        _smallBodyNavUKF10high.SmallBodyNav2MsgPayload_swiginit(self, _smallBodyNavUKF10high.new_SmallBodyNav2MsgPayload())
    __swig_destroy__ = _smallBodyNavUKF10high.delete_SmallBodyNav2MsgPayload

# Register SmallBodyNav2MsgPayload in _smallBodyNavUKF10high:
_smallBodyNavUKF10high.SmallBodyNav2MsgPayload_swigregister(SmallBodyNav2MsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


