# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _interRangingMeas
else:
    import _interRangingMeas

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _interRangingMeas.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _interRangingMeas.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _interRangingMeas.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _interRangingMeas.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _interRangingMeas.new_longArray(nelements)

def delete_longArray(ary):
    return _interRangingMeas.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _interRangingMeas.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _interRangingMeas.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _interRangingMeas.new_intArray(nelements)

def delete_intArray(ary):
    return _interRangingMeas.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _interRangingMeas.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _interRangingMeas.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _interRangingMeas.new_shortArray(nelements)

def delete_shortArray(ary):
    return _interRangingMeas.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _interRangingMeas.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _interRangingMeas.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _interRangingMeas.delete_SwigPyIterator

    def value(self):
        return _interRangingMeas.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _interRangingMeas.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _interRangingMeas.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _interRangingMeas.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _interRangingMeas.SwigPyIterator_equal(self, x)

    def copy(self):
        return _interRangingMeas.SwigPyIterator_copy(self)

    def next(self):
        return _interRangingMeas.SwigPyIterator_next(self)

    def __next__(self):
        return _interRangingMeas.SwigPyIterator___next__(self)

    def previous(self):
        return _interRangingMeas.SwigPyIterator_previous(self)

    def advance(self, n):
        return _interRangingMeas.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _interRangingMeas.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _interRangingMeas.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _interRangingMeas.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _interRangingMeas.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _interRangingMeas.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _interRangingMeas.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _interRangingMeas:
_interRangingMeas.SwigPyIterator_swigregister(SwigPyIterator)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _interRangingMeas.SysModel_swiginit(self, _interRangingMeas.new_SysModel(*args))
    __swig_destroy__ = _interRangingMeas.delete_SysModel

    def SelfInit(self):
        return _interRangingMeas.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _interRangingMeas.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _interRangingMeas.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _interRangingMeas.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_interRangingMeas.SysModel_ModelTag_get, _interRangingMeas.SysModel_ModelTag_set)
    CallCounts = property(_interRangingMeas.SysModel_CallCounts_get, _interRangingMeas.SysModel_CallCounts_set)
    RNGSeed = property(_interRangingMeas.SysModel_RNGSeed_get, _interRangingMeas.SysModel_RNGSeed_set)
    moduleID = property(_interRangingMeas.SysModel_moduleID_get, _interRangingMeas.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _interRangingMeas:
_interRangingMeas.SysModel_swigregister(SysModel)
class interRangingMeas(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _interRangingMeas.interRangingMeas_swiginit(self, _interRangingMeas.new_interRangingMeas())
    __swig_destroy__ = _interRangingMeas.delete_interRangingMeas

    def SelfInit(self):
        return _interRangingMeas.interRangingMeas_SelfInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _interRangingMeas.interRangingMeas_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _interRangingMeas.interRangingMeas_Reset(self, CurrentSimNanos)

    def ReadMessages(self):
        return _interRangingMeas.interRangingMeas_ReadMessages(self)

    def WriteMessages(self, CurrentClock):
        return _interRangingMeas.interRangingMeas_WriteMessages(self, CurrentClock)

    def addSpacecraftToModel(self, tmpScMsg):
        return _interRangingMeas.interRangingMeas_addSpacecraftToModel(self, tmpScMsg)
    nSat = property(_interRangingMeas.interRangingMeas_nSat_get, _interRangingMeas.interRangingMeas_nSat_set)
    range = property(_interRangingMeas.interRangingMeas_range_get, _interRangingMeas.interRangingMeas_range_set)
    planetInMsg = property(_interRangingMeas.interRangingMeas_planetInMsg_get, _interRangingMeas.interRangingMeas_planetInMsg_set)
    scStateInMsgs = property(_interRangingMeas.interRangingMeas_scStateInMsgs_get, _interRangingMeas.interRangingMeas_scStateInMsgs_set)
    interRangeOutMsg = property(_interRangingMeas.interRangingMeas_interRangeOutMsg_get, _interRangingMeas.interRangingMeas_interRangeOutMsg_set)
    interRangeOutMsgC = property(_interRangingMeas.interRangingMeas_interRangeOutMsgC_get, _interRangingMeas.interRangingMeas_interRangeOutMsgC_set)
    scStatesBuffer = property(_interRangingMeas.interRangingMeas_scStatesBuffer_get, _interRangingMeas.interRangingMeas_scStatesBuffer_set)
    planetState = property(_interRangingMeas.interRangingMeas_planetState_get, _interRangingMeas.interRangingMeas_planetState_set)
    bskLogger = property(_interRangingMeas.interRangingMeas_bskLogger_get, _interRangingMeas.interRangingMeas_bskLogger_set)

# Register interRangingMeas in _interRangingMeas:
_interRangingMeas.interRangingMeas_swigregister(interRangingMeas)
MAX_BODY_NAME_LENGTH = _interRangingMeas.MAX_BODY_NAME_LENGTH
class SpicePlanetStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    J2000Current = property(_interRangingMeas.SpicePlanetStateMsgPayload_J2000Current_get, _interRangingMeas.SpicePlanetStateMsgPayload_J2000Current_set)
    PositionVector = property(_interRangingMeas.SpicePlanetStateMsgPayload_PositionVector_get, _interRangingMeas.SpicePlanetStateMsgPayload_PositionVector_set)
    VelocityVector = property(_interRangingMeas.SpicePlanetStateMsgPayload_VelocityVector_get, _interRangingMeas.SpicePlanetStateMsgPayload_VelocityVector_set)
    J20002Pfix = property(_interRangingMeas.SpicePlanetStateMsgPayload_J20002Pfix_get, _interRangingMeas.SpicePlanetStateMsgPayload_J20002Pfix_set)
    J20002Pfix_dot = property(_interRangingMeas.SpicePlanetStateMsgPayload_J20002Pfix_dot_get, _interRangingMeas.SpicePlanetStateMsgPayload_J20002Pfix_dot_set)
    computeOrient = property(_interRangingMeas.SpicePlanetStateMsgPayload_computeOrient_get, _interRangingMeas.SpicePlanetStateMsgPayload_computeOrient_set)
    PlanetName = property(_interRangingMeas.SpicePlanetStateMsgPayload_PlanetName_get, _interRangingMeas.SpicePlanetStateMsgPayload_PlanetName_set)

    def __init__(self):
        _interRangingMeas.SpicePlanetStateMsgPayload_swiginit(self, _interRangingMeas.new_SpicePlanetStateMsgPayload())
    __swig_destroy__ = _interRangingMeas.delete_SpicePlanetStateMsgPayload

# Register SpicePlanetStateMsgPayload in _interRangingMeas:
_interRangingMeas.SpicePlanetStateMsgPayload_swigregister(SpicePlanetStateMsgPayload)
class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_interRangingMeas.SCStatesMsgPayload_r_BN_N_get, _interRangingMeas.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_interRangingMeas.SCStatesMsgPayload_v_BN_N_get, _interRangingMeas.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_interRangingMeas.SCStatesMsgPayload_r_CN_N_get, _interRangingMeas.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_interRangingMeas.SCStatesMsgPayload_v_CN_N_get, _interRangingMeas.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_interRangingMeas.SCStatesMsgPayload_sigma_BN_get, _interRangingMeas.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_interRangingMeas.SCStatesMsgPayload_omega_BN_B_get, _interRangingMeas.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_interRangingMeas.SCStatesMsgPayload_omegaDot_BN_B_get, _interRangingMeas.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_interRangingMeas.SCStatesMsgPayload_TotalAccumDVBdy_get, _interRangingMeas.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_interRangingMeas.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _interRangingMeas.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    nonConservativeAccelpntB_B = property(_interRangingMeas.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _interRangingMeas.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_interRangingMeas.SCStatesMsgPayload_MRPSwitchCount_get, _interRangingMeas.SCStatesMsgPayload_MRPSwitchCount_set)

    def __init__(self):
        _interRangingMeas.SCStatesMsgPayload_swiginit(self, _interRangingMeas.new_SCStatesMsgPayload())
    __swig_destroy__ = _interRangingMeas.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _interRangingMeas:
_interRangingMeas.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)
MAX_SC_BUF = _interRangingMeas.MAX_SC_BUF
class InterRangeMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    range = property(_interRangingMeas.InterRangeMsgPayload_range_get, _interRangingMeas.InterRangeMsgPayload_range_set)

    def __init__(self):
        _interRangingMeas.InterRangeMsgPayload_swiginit(self, _interRangingMeas.new_InterRangeMsgPayload())
    __swig_destroy__ = _interRangingMeas.delete_InterRangeMsgPayload

# Register InterRangeMsgPayload in _interRangingMeas:
_interRangingMeas.InterRangeMsgPayload_swigregister(InterRangeMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


