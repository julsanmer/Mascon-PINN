# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SmallBodyNavUKF5MsgPayload
else:
    import _SmallBodyNavUKF5MsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SwigPyIterator

    def value(self):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SmallBodyNavUKF5MsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SmallBodyNavUKF5MsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SmallBodyNavUKF5MsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SmallBodyNavUKF5MsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SmallBodyNavUKF5MsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SmallBodyNavUKF5MsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SmallBodyNavUKF5MsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SmallBodyNavUKF5MsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SmallBodyNavUKF5MsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SmallBodyNavUKF5MsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SmallBodyNavUKF5MsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SmallBodyNavUKF5MsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SmallBodyNavUKF5MsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SmallBodyNavUKF5MsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SmallBodyNavUKF5MsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SmallBodyNavUKF5MsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_empty(self)

    def size(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_begin(self)

    def end(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.TimeVector_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_front(self)

    def back(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKF5MsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_TimeVector

# Register TimeVector in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.DoubleVector_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_front(self)

    def back(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKF5MsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_DoubleVector

# Register DoubleVector in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKF5MsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_empty(self)

    def size(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKF5MsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_begin(self)

    def end(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKF5MsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.StringVector_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKF5MsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_front(self)

    def back(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKF5MsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKF5MsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKF5MsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKF5MsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKF5MsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_StringVector

# Register StringVector in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SmallBodyNavUKF5MsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SmallBodyNavUKF5MsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SmallBodyNavUKF5MsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SmallBodyNavUKF5MsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SmallBodyNavUKF5MsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SmallBodyNavUKF5MsgPayload.NANO2SEC
SEC2NANO = _SmallBodyNavUKF5MsgPayload.SEC2NANO
SEC2HOUR = _SmallBodyNavUKF5MsgPayload.SEC2HOUR
BOOL_FALSE = _SmallBodyNavUKF5MsgPayload.BOOL_FALSE
BOOL_TRUE = _SmallBodyNavUKF5MsgPayload.BOOL_TRUE
AVAILABLE = _SmallBodyNavUKF5MsgPayload.AVAILABLE
UNAVAILABLE = _SmallBodyNavUKF5MsgPayload.UNAVAILABLE
BalancedWheels = _SmallBodyNavUKF5MsgPayload.BalancedWheels
JitterSimple = _SmallBodyNavUKF5MsgPayload.JitterSimple
JitterFullyCoupled = _SmallBodyNavUKF5MsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.SysModel_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SysModel

    def SelfInit(self):
        return _SmallBodyNavUKF5MsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavUKF5MsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavUKF5MsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavUKF5MsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SmallBodyNavUKF5MsgPayload.SysModel_ModelTag_get, _SmallBodyNavUKF5MsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SmallBodyNavUKF5MsgPayload.SysModel_CallCounts_get, _SmallBodyNavUKF5MsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SmallBodyNavUKF5MsgPayload.SysModel_RNGSeed_get, _SmallBodyNavUKF5MsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SmallBodyNavUKF5MsgPayload.SysModel_moduleID_get, _SmallBodyNavUKF5MsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SmallBodyNavUKF5MsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SmallBodyNavUKF5MsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SmallBodyNavUKF5MsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SmallBodyNavUKF5MsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SmallBodyNavUKF5MsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SmallBodyNavUKF5MsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SmallBodyNavUKF5MsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SmallBodyNavUKF5MsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SmallBodyNavUKF5MsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SmallBodyNavUKF5MsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SmallBodyNavUKF5MsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SmallBodyNavUKF5MsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SmallBodyNavUKF5MsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayload_state_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayload_state_set)
    covar = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayload_covar_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayload_covar_set)

    def __init__(self):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayload_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5MsgPayload())
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5MsgPayload

# Register SmallBodyNavUKF5MsgPayload in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayload_swigregister(SmallBodyNavUKF5MsgPayload)
class SmallBodyNavUKF5MsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_bskLogger_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_bskLogger_set)
    zeroMsgPayload = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_zeroMsgPayload_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5MsgReader(*args))

    def __call__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader___call__(self)

    def isLinked(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_isLinked(self)

    def isWritten(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_isWritten(self)

    def timeWritten(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_timeWritten(self)

    def moduleID(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SmallBodyNavUKF5Msg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SmallBodyNavUKF5MsgPayload import SmallBodyNavUKF5Msg_C
            if type(source) == SmallBodyNavUKF5Msg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SmallBodyNavUKF5MsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SmallBodyNavUKF5Msg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SmallBodyNavUKF5MsgPayload import SmallBodyNavUKF5Msg_C
        except ImportError:
            return 0

        if type(source) == SmallBodyNavUKF5Msg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5MsgReader

# Register SmallBodyNavUKF5MsgReader in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgReader_swigregister(SmallBodyNavUKF5MsgReader)
class SmallBodyNavUKF5MsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgWriter_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5MsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5MsgWriter

# Register SmallBodyNavUKF5MsgWriter in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgWriter_swigregister(SmallBodyNavUKF5MsgWriter)
class SmallBodyNavUKF5Msg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_write_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_write_set)

    def addSubscriber(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_addSubscriber(self)

    def addAuthor(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_zeroMsgPayload_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_zeroMsgPayload_set)

    def isLinked(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_isLinked(self)

    def getPayloadSize(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5Msg())
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5Msg

# Register SmallBodyNavUKF5Msg in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_swigregister(SmallBodyNavUKF5Msg)
class SmallBodyNavUKF5MsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5MsgRecorder(*args))
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5MsgRecorder

    def SelfInit(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_clear(self)
    bskLogger = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_bskLogger_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SmallBodyNavUKF5MsgRecorder in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgRecorder_swigregister(SmallBodyNavUKF5MsgRecorder)
class SmallBodyNavUKF5MsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_empty(self)

    def size(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_begin(self)

    def end(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5MsgPayloadVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_front(self)

    def back(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5MsgPayloadVector

# Register SmallBodyNavUKF5MsgPayloadVector in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgPayloadVector_swigregister(SmallBodyNavUKF5MsgPayloadVector)
class SmallBodyNavUKF5MsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5MsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5MsgOutMsgsVector

# Register SmallBodyNavUKF5MsgOutMsgsVector in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsVector_swigregister(SmallBodyNavUKF5MsgOutMsgsVector)
class SmallBodyNavUKF5MsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5MsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5MsgOutMsgsPtrVector

# Register SmallBodyNavUKF5MsgOutMsgsPtrVector in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgOutMsgsPtrVector_swigregister(SmallBodyNavUKF5MsgOutMsgsPtrVector)
class SmallBodyNavUKF5MsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5MsgInMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5MsgInMsgsVector

# Register SmallBodyNavUKF5MsgInMsgsVector in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5MsgInMsgsVector_swigregister(SmallBodyNavUKF5MsgInMsgsVector)
class SmallBodyNavUKF5Msg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_header_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_header_set)
    payload = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_payload_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_payload_set)
    payloadPointer = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_payloadPointer_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_payloadPointer_set)
    headerPointer = property(_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_headerPointer_get, _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavUKF5Msg
        if type(source) == type(self):
            SmallBodyNavUKF5Msg_C_subscribe(self, source)
        elif type(source) == SmallBodyNavUKF5Msg:
            SmallBodyNavUKF5Msg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SmallBodyNavUKF5Msg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavUKF5Msg
        if type(source) == type(self):
            return (SmallBodyNavUKF5Msg_C_isSubscribedTo(self, source))
        elif type(source) == SmallBodyNavUKF5Msg:
            return (SmallBodyNavUKF5Msg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import SmallBodyNavUKF5MsgRecorder
        self.header.isLinked = 1
        return SmallBodyNavUKF5MsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SmallBodyNavUKF5Msg_C_addAuthor(self, self)
        if data:
            SmallBodyNavUKF5Msg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SmallBodyNavUKF5Msg_C_addAuthor(self, self)
        SmallBodyNavUKF5Msg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SmallBodyNavUKF5Msg_C_read(self)


    def __init__(self):
        _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_SmallBodyNavUKF5Msg_C())
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_SmallBodyNavUKF5Msg_C

# Register SmallBodyNavUKF5Msg_C in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_swigregister(SmallBodyNavUKF5Msg_C)

def SmallBodyNavUKF5Msg_cpp_subscribe(subscriber, source):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_cpp_subscribe(subscriber, source)

def SmallBodyNavUKF5Msg_C_subscribe(subscriber, source):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_subscribe(subscriber, source)

def SmallBodyNavUKF5Msg_C_isSubscribedTo(subscriber, source):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_isSubscribedTo(subscriber, source)

def SmallBodyNavUKF5Msg_cpp_isSubscribedTo(subscriber, source):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_cpp_isSubscribedTo(subscriber, source)

def SmallBodyNavUKF5Msg_C_addAuthor(coowner, data):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_addAuthor(coowner, data)

def SmallBodyNavUKF5Msg_C_init(owner):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_init(owner)

def SmallBodyNavUKF5Msg_C_isLinked(data):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_isLinked(data)

def SmallBodyNavUKF5Msg_C_isWritten(data):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_isWritten(data)

def SmallBodyNavUKF5Msg_C_timeWritten(data):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_timeWritten(data)

def SmallBodyNavUKF5Msg_C_moduleID(data):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_moduleID(data)

def SmallBodyNavUKF5Msg_C_write(data, destination, moduleID, callTime):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_write(data, destination, moduleID, callTime)

def SmallBodyNavUKF5Msg_C_read(source):
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_read(source)

def SmallBodyNavUKF5Msg_C_zeroMsgPayload():
    return _SmallBodyNavUKF5MsgPayload.SmallBodyNavUKF5Msg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SmallBodyNavUKF5MsgPayload.MsgHeader_isLinked_get, _SmallBodyNavUKF5MsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SmallBodyNavUKF5MsgPayload.MsgHeader_isWritten_get, _SmallBodyNavUKF5MsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SmallBodyNavUKF5MsgPayload.MsgHeader_timeWritten_get, _SmallBodyNavUKF5MsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SmallBodyNavUKF5MsgPayload.MsgHeader_moduleID_get, _SmallBodyNavUKF5MsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SmallBodyNavUKF5MsgPayload.MsgHeader_swiginit(self, _SmallBodyNavUKF5MsgPayload.new_MsgHeader())
    __swig_destroy__ = _SmallBodyNavUKF5MsgPayload.delete_MsgHeader

# Register MsgHeader in _SmallBodyNavUKF5MsgPayload:
_SmallBodyNavUKF5MsgPayload.MsgHeader_swigregister(MsgHeader)

