# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PowerStorageStatusMsgPayload
else:
    import _PowerStorageStatusMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PowerStorageStatusMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PowerStorageStatusMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PowerStorageStatusMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PowerStorageStatusMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PowerStorageStatusMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PowerStorageStatusMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PowerStorageStatusMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PowerStorageStatusMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PowerStorageStatusMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PowerStorageStatusMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PowerStorageStatusMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PowerStorageStatusMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PowerStorageStatusMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PowerStorageStatusMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PowerStorageStatusMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PowerStorageStatusMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PowerStorageStatusMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PowerStorageStatusMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PowerStorageStatusMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PowerStorageStatusMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PowerStorageStatusMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PowerStorageStatusMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PowerStorageStatusMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PowerStorageStatusMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageStatusMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageStatusMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageStatusMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PowerStorageStatusMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageStatusMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageStatusMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageStatusMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageStatusMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageStatusMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PowerStorageStatusMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PowerStorageStatusMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PowerStorageStatusMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PowerStorageStatusMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PowerStorageStatusMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PowerStorageStatusMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PowerStorageStatusMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PowerStorageStatusMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PowerStorageStatusMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PowerStorageStatusMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageStatusMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageStatusMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.TimeVector_swiginit(self, _PowerStorageStatusMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PowerStorageStatusMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PowerStorageStatusMsgPayload.TimeVector_front(self)

    def back(self):
        return _PowerStorageStatusMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PowerStorageStatusMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageStatusMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageStatusMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageStatusMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageStatusMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_TimeVector

# Register TimeVector in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageStatusMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageStatusMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PowerStorageStatusMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageStatusMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageStatusMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageStatusMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageStatusMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PowerStorageStatusMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PowerStorageStatusMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageStatusMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.DoubleVector_swiginit(self, _PowerStorageStatusMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PowerStorageStatusMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PowerStorageStatusMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageStatusMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageStatusMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageStatusMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageStatusMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_DoubleVector

# Register DoubleVector in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageStatusMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageStatusMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageStatusMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PowerStorageStatusMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageStatusMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageStatusMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageStatusMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageStatusMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageStatusMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PowerStorageStatusMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PowerStorageStatusMsgPayload.StringVector_empty(self)

    def size(self):
        return _PowerStorageStatusMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PowerStorageStatusMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PowerStorageStatusMsgPayload.StringVector_begin(self)

    def end(self):
        return _PowerStorageStatusMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PowerStorageStatusMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PowerStorageStatusMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PowerStorageStatusMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PowerStorageStatusMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageStatusMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageStatusMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.StringVector_swiginit(self, _PowerStorageStatusMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PowerStorageStatusMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PowerStorageStatusMsgPayload.StringVector_front(self)

    def back(self):
        return _PowerStorageStatusMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PowerStorageStatusMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageStatusMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageStatusMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageStatusMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageStatusMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_StringVector

# Register StringVector in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PowerStorageStatusMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PowerStorageStatusMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PowerStorageStatusMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PowerStorageStatusMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PowerStorageStatusMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PowerStorageStatusMsgPayload.NANO2SEC
SEC2NANO = _PowerStorageStatusMsgPayload.SEC2NANO
SEC2HOUR = _PowerStorageStatusMsgPayload.SEC2HOUR
BOOL_FALSE = _PowerStorageStatusMsgPayload.BOOL_FALSE
BOOL_TRUE = _PowerStorageStatusMsgPayload.BOOL_TRUE
AVAILABLE = _PowerStorageStatusMsgPayload.AVAILABLE
UNAVAILABLE = _PowerStorageStatusMsgPayload.UNAVAILABLE
BalancedWheels = _PowerStorageStatusMsgPayload.BalancedWheels
JitterSimple = _PowerStorageStatusMsgPayload.JitterSimple
JitterFullyCoupled = _PowerStorageStatusMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.SysModel_swiginit(self, _PowerStorageStatusMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PowerStorageStatusMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PowerStorageStatusMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PowerStorageStatusMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PowerStorageStatusMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PowerStorageStatusMsgPayload.SysModel_ModelTag_get, _PowerStorageStatusMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PowerStorageStatusMsgPayload.SysModel_CallCounts_get, _PowerStorageStatusMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PowerStorageStatusMsgPayload.SysModel_RNGSeed_get, _PowerStorageStatusMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PowerStorageStatusMsgPayload.SysModel_moduleID_get, _PowerStorageStatusMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PowerStorageStatusMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PowerStorageStatusMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PowerStorageStatusMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PowerStorageStatusMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PowerStorageStatusMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PowerStorageStatusMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PowerStorageStatusMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PowerStorageStatusMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PowerStorageStatusMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PowerStorageStatusMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PowerStorageStatusMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PowerStorageStatusMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PowerStorageStatusMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    storageLevel = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayload_storageLevel_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayload_storageLevel_set)
    storageCapacity = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayload_storageCapacity_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayload_storageCapacity_set)
    currentNetPower = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayload_currentNetPower_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayload_currentNetPower_set)

    def __init__(self):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayload_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsgPayload())
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsgPayload

# Register PowerStorageStatusMsgPayload in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayload_swigregister(PowerStorageStatusMsgPayload)
class PowerStorageStatusMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_bskLogger_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_zeroMsgPayload_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsgReader(*args))

    def __call__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader___call__(self)

    def isLinked(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_isLinked(self)

    def isWritten(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_isWritten(self)

    def timeWritten(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_timeWritten(self)

    def moduleID(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PowerStorageStatusMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PowerStorageStatusMsgPayload import PowerStorageStatusMsg_C
            if type(source) == PowerStorageStatusMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PowerStorageStatusMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PowerStorageStatusMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PowerStorageStatusMsgPayload import PowerStorageStatusMsg_C
        except ImportError:
            return 0

        if type(source) == PowerStorageStatusMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsgReader

# Register PowerStorageStatusMsgReader in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsgReader_swigregister(PowerStorageStatusMsgReader)
class PowerStorageStatusMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsgWriter_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsgWriter

# Register PowerStorageStatusMsgWriter in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsgWriter_swigregister(PowerStorageStatusMsgWriter)
class PowerStorageStatusMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsg_write_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_write_set)

    def addSubscriber(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_addSubscriber(self)

    def addAuthor(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsg_zeroMsgPayload_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_isLinked(self)

    def getPayloadSize(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsg())
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsg

# Register PowerStorageStatusMsg in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsg_swigregister(PowerStorageStatusMsg)
class PowerStorageStatusMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsgRecorder(*args))
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsgRecorder

    def SelfInit(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_clear(self)
    bskLogger = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_bskLogger_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PowerStorageStatusMsgRecorder in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsgRecorder_swigregister(PowerStorageStatusMsgRecorder)
class PowerStorageStatusMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_pop(self)

    def append(self, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_append(self, x)

    def empty(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_empty(self)

    def size(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_size(self)

    def swap(self, v):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_begin(self)

    def end(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_end(self)

    def rbegin(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_rend(self)

    def clear(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsgPayloadVector(*args))

    def push_back(self, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_front(self)

    def back(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsgPayloadVector

# Register PowerStorageStatusMsgPayloadVector in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsgPayloadVector_swigregister(PowerStorageStatusMsgPayloadVector)
class PowerStorageStatusMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_empty(self)

    def size(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_begin(self)

    def end(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_front(self)

    def back(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsgOutMsgsVector

# Register PowerStorageStatusMsgOutMsgsVector in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsVector_swigregister(PowerStorageStatusMsgOutMsgsVector)
class PowerStorageStatusMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsgOutMsgsPtrVector

# Register PowerStorageStatusMsgOutMsgsPtrVector in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsgOutMsgsPtrVector_swigregister(PowerStorageStatusMsgOutMsgsPtrVector)
class PowerStorageStatusMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_empty(self)

    def size(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_begin(self)

    def end(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_rend(self)

    def clear(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_front(self)

    def back(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsgInMsgsVector

# Register PowerStorageStatusMsgInMsgsVector in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsgInMsgsVector_swigregister(PowerStorageStatusMsgInMsgsVector)
class PowerStorageStatusMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_header_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_header_set)
    payload = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_payload_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_payload_set)
    payloadPointer = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_payloadPointer_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_payloadPointer_set)
    headerPointer = property(_PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_headerPointer_get, _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PowerStorageStatusMsg
        if type(source) == type(self):
            PowerStorageStatusMsg_C_subscribe(self, source)
        elif type(source) == PowerStorageStatusMsg:
            PowerStorageStatusMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PowerStorageStatusMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PowerStorageStatusMsg
        if type(source) == type(self):
            return (PowerStorageStatusMsg_C_isSubscribedTo(self, source))
        elif type(source) == PowerStorageStatusMsg:
            return (PowerStorageStatusMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import PowerStorageStatusMsgRecorder
        self.header.isLinked = 1
        return PowerStorageStatusMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PowerStorageStatusMsg_C_addAuthor(self, self)
        if data:
            PowerStorageStatusMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PowerStorageStatusMsg_C_addAuthor(self, self)
        PowerStorageStatusMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PowerStorageStatusMsg_C_read(self)


    def __init__(self):
        _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_swiginit(self, _PowerStorageStatusMsgPayload.new_PowerStorageStatusMsg_C())
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_PowerStorageStatusMsg_C

# Register PowerStorageStatusMsg_C in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_swigregister(PowerStorageStatusMsg_C)

def PowerStorageStatusMsg_cpp_subscribe(subscriber, source):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_cpp_subscribe(subscriber, source)

def PowerStorageStatusMsg_C_subscribe(subscriber, source):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_subscribe(subscriber, source)

def PowerStorageStatusMsg_C_isSubscribedTo(subscriber, source):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_isSubscribedTo(subscriber, source)

def PowerStorageStatusMsg_cpp_isSubscribedTo(subscriber, source):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_cpp_isSubscribedTo(subscriber, source)

def PowerStorageStatusMsg_C_addAuthor(coowner, data):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_addAuthor(coowner, data)

def PowerStorageStatusMsg_C_init(owner):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_init(owner)

def PowerStorageStatusMsg_C_isLinked(data):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_isLinked(data)

def PowerStorageStatusMsg_C_isWritten(data):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_isWritten(data)

def PowerStorageStatusMsg_C_timeWritten(data):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_timeWritten(data)

def PowerStorageStatusMsg_C_moduleID(data):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_moduleID(data)

def PowerStorageStatusMsg_C_write(data, destination, moduleID, callTime):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_write(data, destination, moduleID, callTime)

def PowerStorageStatusMsg_C_read(source):
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_read(source)

def PowerStorageStatusMsg_C_zeroMsgPayload():
    return _PowerStorageStatusMsgPayload.PowerStorageStatusMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PowerStorageStatusMsgPayload.MsgHeader_isLinked_get, _PowerStorageStatusMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PowerStorageStatusMsgPayload.MsgHeader_isWritten_get, _PowerStorageStatusMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PowerStorageStatusMsgPayload.MsgHeader_timeWritten_get, _PowerStorageStatusMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PowerStorageStatusMsgPayload.MsgHeader_moduleID_get, _PowerStorageStatusMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PowerStorageStatusMsgPayload.MsgHeader_swiginit(self, _PowerStorageStatusMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PowerStorageStatusMsgPayload.delete_MsgHeader

# Register MsgHeader in _PowerStorageStatusMsgPayload:
_PowerStorageStatusMsgPayload.MsgHeader_swigregister(MsgHeader)

