# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SmallBodyNavHOUMsgPayload
else:
    import _SmallBodyNavHOUMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SmallBodyNavHOUMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SmallBodyNavHOUMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SmallBodyNavHOUMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SmallBodyNavHOUMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SmallBodyNavHOUMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SmallBodyNavHOUMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SmallBodyNavHOUMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SmallBodyNavHOUMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SmallBodyNavHOUMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SmallBodyNavHOUMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SmallBodyNavHOUMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SmallBodyNavHOUMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SmallBodyNavHOUMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SmallBodyNavHOUMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SmallBodyNavHOUMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SmallBodyNavHOUMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavHOUMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SmallBodyNavHOUMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SmallBodyNavHOUMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavHOUMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.TimeVector_swiginit(self, _SmallBodyNavHOUMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SmallBodyNavHOUMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_front(self)

    def back(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavHOUMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavHOUMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavHOUMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavHOUMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavHOUMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_TimeVector

# Register TimeVector in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.DoubleVector_swiginit(self, _SmallBodyNavHOUMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavHOUMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_DoubleVector

# Register DoubleVector in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavHOUMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavHOUMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavHOUMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavHOUMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SmallBodyNavHOUMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_empty(self)

    def size(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SmallBodyNavHOUMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_begin(self)

    def end(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavHOUMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.StringVector_swiginit(self, _SmallBodyNavHOUMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SmallBodyNavHOUMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_front(self)

    def back(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavHOUMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavHOUMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavHOUMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavHOUMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavHOUMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_StringVector

# Register StringVector in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SmallBodyNavHOUMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SmallBodyNavHOUMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SmallBodyNavHOUMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SmallBodyNavHOUMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SmallBodyNavHOUMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SmallBodyNavHOUMsgPayload.NANO2SEC
SEC2NANO = _SmallBodyNavHOUMsgPayload.SEC2NANO
SEC2HOUR = _SmallBodyNavHOUMsgPayload.SEC2HOUR
BOOL_FALSE = _SmallBodyNavHOUMsgPayload.BOOL_FALSE
BOOL_TRUE = _SmallBodyNavHOUMsgPayload.BOOL_TRUE
AVAILABLE = _SmallBodyNavHOUMsgPayload.AVAILABLE
UNAVAILABLE = _SmallBodyNavHOUMsgPayload.UNAVAILABLE
BalancedWheels = _SmallBodyNavHOUMsgPayload.BalancedWheels
JitterSimple = _SmallBodyNavHOUMsgPayload.JitterSimple
JitterFullyCoupled = _SmallBodyNavHOUMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.SysModel_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SmallBodyNavHOUMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavHOUMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavHOUMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavHOUMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SmallBodyNavHOUMsgPayload.SysModel_ModelTag_get, _SmallBodyNavHOUMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SmallBodyNavHOUMsgPayload.SysModel_CallCounts_get, _SmallBodyNavHOUMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SmallBodyNavHOUMsgPayload.SysModel_RNGSeed_get, _SmallBodyNavHOUMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SmallBodyNavHOUMsgPayload.SysModel_moduleID_get, _SmallBodyNavHOUMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SmallBodyNavHOUMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SmallBodyNavHOUMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SmallBodyNavHOUMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SmallBodyNavHOUMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SmallBodyNavHOUMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SmallBodyNavHOUMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SmallBodyNavHOUMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SmallBodyNavHOUMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SmallBodyNavHOUMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SmallBodyNavHOUMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SmallBodyNavHOUMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SmallBodyNavHOUMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SmallBodyNavHOUMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_state_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_state_set)
    covar = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_covar_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_covar_set)
    skew = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_skew_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_skew_set)
    kurt = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_kurt_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_kurt_set)

    def __init__(self):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsgPayload())
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsgPayload

# Register SmallBodyNavHOUMsgPayload in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayload_swigregister(SmallBodyNavHOUMsgPayload)
class SmallBodyNavHOUMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_bskLogger_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_zeroMsgPayload_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsgReader(*args))

    def __call__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader___call__(self)

    def isLinked(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_isLinked(self)

    def isWritten(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_isWritten(self)

    def timeWritten(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_timeWritten(self)

    def moduleID(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SmallBodyNavHOUMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SmallBodyNavHOUMsgPayload import SmallBodyNavHOUMsg_C
            if type(source) == SmallBodyNavHOUMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SmallBodyNavHOUMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SmallBodyNavHOUMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SmallBodyNavHOUMsgPayload import SmallBodyNavHOUMsg_C
        except ImportError:
            return 0

        if type(source) == SmallBodyNavHOUMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsgReader

# Register SmallBodyNavHOUMsgReader in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgReader_swigregister(SmallBodyNavHOUMsgReader)
class SmallBodyNavHOUMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgWriter_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsgWriter

# Register SmallBodyNavHOUMsgWriter in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgWriter_swigregister(SmallBodyNavHOUMsgWriter)
class SmallBodyNavHOUMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_write_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_write_set)

    def addSubscriber(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_addSubscriber(self)

    def addAuthor(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_zeroMsgPayload_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_isLinked(self)

    def getPayloadSize(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsg())
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsg

# Register SmallBodyNavHOUMsg in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_swigregister(SmallBodyNavHOUMsg)
class SmallBodyNavHOUMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsgRecorder(*args))
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsgRecorder

    def SelfInit(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_clear(self)
    bskLogger = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_bskLogger_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SmallBodyNavHOUMsgRecorder in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgRecorder_swigregister(SmallBodyNavHOUMsgRecorder)
class SmallBodyNavHOUMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_pop(self)

    def append(self, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_append(self, x)

    def empty(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_empty(self)

    def size(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_size(self)

    def swap(self, v):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_begin(self)

    def end(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_end(self)

    def rbegin(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_rend(self)

    def clear(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsgPayloadVector(*args))

    def push_back(self, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_front(self)

    def back(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsgPayloadVector

# Register SmallBodyNavHOUMsgPayloadVector in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgPayloadVector_swigregister(SmallBodyNavHOUMsgPayloadVector)
class SmallBodyNavHOUMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsgOutMsgsVector

# Register SmallBodyNavHOUMsgOutMsgsVector in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsVector_swigregister(SmallBodyNavHOUMsgOutMsgsVector)
class SmallBodyNavHOUMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsgOutMsgsPtrVector

# Register SmallBodyNavHOUMsgOutMsgsPtrVector in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgOutMsgsPtrVector_swigregister(SmallBodyNavHOUMsgOutMsgsPtrVector)
class SmallBodyNavHOUMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsgInMsgsVector

# Register SmallBodyNavHOUMsgInMsgsVector in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsgInMsgsVector_swigregister(SmallBodyNavHOUMsgInMsgsVector)
class SmallBodyNavHOUMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_header_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_header_set)
    payload = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_payload_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_payload_set)
    payloadPointer = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_payloadPointer_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_payloadPointer_set)
    headerPointer = property(_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_headerPointer_get, _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavHOUMsg
        if type(source) == type(self):
            SmallBodyNavHOUMsg_C_subscribe(self, source)
        elif type(source) == SmallBodyNavHOUMsg:
            SmallBodyNavHOUMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SmallBodyNavHOUMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavHOUMsg
        if type(source) == type(self):
            return (SmallBodyNavHOUMsg_C_isSubscribedTo(self, source))
        elif type(source) == SmallBodyNavHOUMsg:
            return (SmallBodyNavHOUMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import SmallBodyNavHOUMsgRecorder
        self.header.isLinked = 1
        return SmallBodyNavHOUMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SmallBodyNavHOUMsg_C_addAuthor(self, self)
        if data:
            SmallBodyNavHOUMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SmallBodyNavHOUMsg_C_addAuthor(self, self)
        SmallBodyNavHOUMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SmallBodyNavHOUMsg_C_read(self)


    def __init__(self):
        _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_swiginit(self, _SmallBodyNavHOUMsgPayload.new_SmallBodyNavHOUMsg_C())
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_SmallBodyNavHOUMsg_C

# Register SmallBodyNavHOUMsg_C in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_swigregister(SmallBodyNavHOUMsg_C)

def SmallBodyNavHOUMsg_cpp_subscribe(subscriber, source):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_cpp_subscribe(subscriber, source)

def SmallBodyNavHOUMsg_C_subscribe(subscriber, source):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_subscribe(subscriber, source)

def SmallBodyNavHOUMsg_C_isSubscribedTo(subscriber, source):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_isSubscribedTo(subscriber, source)

def SmallBodyNavHOUMsg_cpp_isSubscribedTo(subscriber, source):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_cpp_isSubscribedTo(subscriber, source)

def SmallBodyNavHOUMsg_C_addAuthor(coowner, data):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_addAuthor(coowner, data)

def SmallBodyNavHOUMsg_C_init(owner):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_init(owner)

def SmallBodyNavHOUMsg_C_isLinked(data):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_isLinked(data)

def SmallBodyNavHOUMsg_C_isWritten(data):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_isWritten(data)

def SmallBodyNavHOUMsg_C_timeWritten(data):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_timeWritten(data)

def SmallBodyNavHOUMsg_C_moduleID(data):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_moduleID(data)

def SmallBodyNavHOUMsg_C_write(data, destination, moduleID, callTime):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_write(data, destination, moduleID, callTime)

def SmallBodyNavHOUMsg_C_read(source):
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_read(source)

def SmallBodyNavHOUMsg_C_zeroMsgPayload():
    return _SmallBodyNavHOUMsgPayload.SmallBodyNavHOUMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SmallBodyNavHOUMsgPayload.MsgHeader_isLinked_get, _SmallBodyNavHOUMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SmallBodyNavHOUMsgPayload.MsgHeader_isWritten_get, _SmallBodyNavHOUMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SmallBodyNavHOUMsgPayload.MsgHeader_timeWritten_get, _SmallBodyNavHOUMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SmallBodyNavHOUMsgPayload.MsgHeader_moduleID_get, _SmallBodyNavHOUMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SmallBodyNavHOUMsgPayload.MsgHeader_swiginit(self, _SmallBodyNavHOUMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SmallBodyNavHOUMsgPayload.delete_MsgHeader

# Register MsgHeader in _SmallBodyNavHOUMsgPayload:
_SmallBodyNavHOUMsgPayload.MsgHeader_swigregister(MsgHeader)

