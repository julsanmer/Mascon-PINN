# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SmallBodyNavIntMsgPayload
else:
    import _SmallBodyNavIntMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SmallBodyNavIntMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SmallBodyNavIntMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SmallBodyNavIntMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SmallBodyNavIntMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SmallBodyNavIntMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SmallBodyNavIntMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SmallBodyNavIntMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SmallBodyNavIntMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SmallBodyNavIntMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SmallBodyNavIntMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SmallBodyNavIntMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SmallBodyNavIntMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SmallBodyNavIntMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SmallBodyNavIntMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SmallBodyNavIntMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SmallBodyNavIntMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SmallBodyNavIntMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavIntMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavIntMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavIntMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavIntMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SmallBodyNavIntMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SmallBodyNavIntMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavIntMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.TimeVector_swiginit(self, _SmallBodyNavIntMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SmallBodyNavIntMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_front(self)

    def back(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavIntMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavIntMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavIntMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavIntMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavIntMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_TimeVector

# Register TimeVector in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavIntMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SmallBodyNavIntMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SmallBodyNavIntMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavIntMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.DoubleVector_swiginit(self, _SmallBodyNavIntMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SmallBodyNavIntMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavIntMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavIntMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavIntMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavIntMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavIntMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_DoubleVector

# Register DoubleVector in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavIntMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavIntMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavIntMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavIntMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavIntMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavIntMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SmallBodyNavIntMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SmallBodyNavIntMsgPayload.StringVector_empty(self)

    def size(self):
        return _SmallBodyNavIntMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SmallBodyNavIntMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavIntMsgPayload.StringVector_begin(self)

    def end(self):
        return _SmallBodyNavIntMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SmallBodyNavIntMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavIntMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SmallBodyNavIntMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavIntMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavIntMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavIntMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.StringVector_swiginit(self, _SmallBodyNavIntMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SmallBodyNavIntMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavIntMsgPayload.StringVector_front(self)

    def back(self):
        return _SmallBodyNavIntMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavIntMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavIntMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavIntMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavIntMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavIntMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_StringVector

# Register StringVector in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SmallBodyNavIntMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SmallBodyNavIntMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SmallBodyNavIntMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SmallBodyNavIntMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SmallBodyNavIntMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SmallBodyNavIntMsgPayload.NANO2SEC
SEC2NANO = _SmallBodyNavIntMsgPayload.SEC2NANO
SEC2HOUR = _SmallBodyNavIntMsgPayload.SEC2HOUR
BOOL_FALSE = _SmallBodyNavIntMsgPayload.BOOL_FALSE
BOOL_TRUE = _SmallBodyNavIntMsgPayload.BOOL_TRUE
AVAILABLE = _SmallBodyNavIntMsgPayload.AVAILABLE
UNAVAILABLE = _SmallBodyNavIntMsgPayload.UNAVAILABLE
BalancedWheels = _SmallBodyNavIntMsgPayload.BalancedWheels
JitterSimple = _SmallBodyNavIntMsgPayload.JitterSimple
JitterFullyCoupled = _SmallBodyNavIntMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.SysModel_swiginit(self, _SmallBodyNavIntMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SmallBodyNavIntMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavIntMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavIntMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavIntMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SmallBodyNavIntMsgPayload.SysModel_ModelTag_get, _SmallBodyNavIntMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SmallBodyNavIntMsgPayload.SysModel_CallCounts_get, _SmallBodyNavIntMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SmallBodyNavIntMsgPayload.SysModel_RNGSeed_get, _SmallBodyNavIntMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SmallBodyNavIntMsgPayload.SysModel_moduleID_get, _SmallBodyNavIntMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SmallBodyNavIntMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SmallBodyNavIntMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SmallBodyNavIntMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SmallBodyNavIntMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SmallBodyNavIntMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SmallBodyNavIntMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SmallBodyNavIntMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SmallBodyNavIntMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SmallBodyNavIntMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SmallBodyNavIntMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SmallBodyNavIntMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SmallBodyNavIntMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SmallBodyNavIntMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_state_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_state_set)
    covar = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_covar_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_covar_set)
    skew = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_skew_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_skew_set)
    kurt = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_kurt_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_kurt_set)
    meas = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_meas_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_meas_set)
    tcpu = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_tcpu_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_tcpu_set)

    def __init__(self):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsgPayload())
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsgPayload

# Register SmallBodyNavIntMsgPayload in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayload_swigregister(SmallBodyNavIntMsgPayload)
class SmallBodyNavIntMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_bskLogger_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_zeroMsgPayload_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsgReader(*args))

    def __call__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader___call__(self)

    def isLinked(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_isLinked(self)

    def isWritten(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_isWritten(self)

    def timeWritten(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_timeWritten(self)

    def moduleID(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SmallBodyNavIntMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SmallBodyNavIntMsgPayload import SmallBodyNavIntMsg_C
            if type(source) == SmallBodyNavIntMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SmallBodyNavIntMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SmallBodyNavIntMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SmallBodyNavIntMsgPayload import SmallBodyNavIntMsg_C
        except ImportError:
            return 0

        if type(source) == SmallBodyNavIntMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsgReader

# Register SmallBodyNavIntMsgReader in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgReader_swigregister(SmallBodyNavIntMsgReader)
class SmallBodyNavIntMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgWriter_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsgWriter

# Register SmallBodyNavIntMsgWriter in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgWriter_swigregister(SmallBodyNavIntMsgWriter)
class SmallBodyNavIntMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_write_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_write_set)

    def addSubscriber(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_addSubscriber(self)

    def addAuthor(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_zeroMsgPayload_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_isLinked(self)

    def getPayloadSize(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsg())
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsg

# Register SmallBodyNavIntMsg in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_swigregister(SmallBodyNavIntMsg)
class SmallBodyNavIntMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsgRecorder(*args))
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsgRecorder

    def SelfInit(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_clear(self)
    bskLogger = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_bskLogger_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SmallBodyNavIntMsgRecorder in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgRecorder_swigregister(SmallBodyNavIntMsgRecorder)
class SmallBodyNavIntMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_pop(self)

    def append(self, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_append(self, x)

    def empty(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_empty(self)

    def size(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_size(self)

    def swap(self, v):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_begin(self)

    def end(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_end(self)

    def rbegin(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_rend(self)

    def clear(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsgPayloadVector(*args))

    def push_back(self, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_front(self)

    def back(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsgPayloadVector

# Register SmallBodyNavIntMsgPayloadVector in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgPayloadVector_swigregister(SmallBodyNavIntMsgPayloadVector)
class SmallBodyNavIntMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsgOutMsgsVector

# Register SmallBodyNavIntMsgOutMsgsVector in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsVector_swigregister(SmallBodyNavIntMsgOutMsgsVector)
class SmallBodyNavIntMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsgOutMsgsPtrVector

# Register SmallBodyNavIntMsgOutMsgsPtrVector in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgOutMsgsPtrVector_swigregister(SmallBodyNavIntMsgOutMsgsPtrVector)
class SmallBodyNavIntMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsgInMsgsVector

# Register SmallBodyNavIntMsgInMsgsVector in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsgInMsgsVector_swigregister(SmallBodyNavIntMsgInMsgsVector)
class SmallBodyNavIntMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_header_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_header_set)
    payload = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_payload_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_payload_set)
    payloadPointer = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_payloadPointer_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_payloadPointer_set)
    headerPointer = property(_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_headerPointer_get, _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavIntMsg
        if type(source) == type(self):
            SmallBodyNavIntMsg_C_subscribe(self, source)
        elif type(source) == SmallBodyNavIntMsg:
            SmallBodyNavIntMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SmallBodyNavIntMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavIntMsg
        if type(source) == type(self):
            return (SmallBodyNavIntMsg_C_isSubscribedTo(self, source))
        elif type(source) == SmallBodyNavIntMsg:
            return (SmallBodyNavIntMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import SmallBodyNavIntMsgRecorder
        self.header.isLinked = 1
        return SmallBodyNavIntMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SmallBodyNavIntMsg_C_addAuthor(self, self)
        if data:
            SmallBodyNavIntMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SmallBodyNavIntMsg_C_addAuthor(self, self)
        SmallBodyNavIntMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SmallBodyNavIntMsg_C_read(self)


    def __init__(self):
        _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_swiginit(self, _SmallBodyNavIntMsgPayload.new_SmallBodyNavIntMsg_C())
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_SmallBodyNavIntMsg_C

# Register SmallBodyNavIntMsg_C in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_swigregister(SmallBodyNavIntMsg_C)

def SmallBodyNavIntMsg_cpp_subscribe(subscriber, source):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_cpp_subscribe(subscriber, source)

def SmallBodyNavIntMsg_C_subscribe(subscriber, source):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_subscribe(subscriber, source)

def SmallBodyNavIntMsg_C_isSubscribedTo(subscriber, source):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_isSubscribedTo(subscriber, source)

def SmallBodyNavIntMsg_cpp_isSubscribedTo(subscriber, source):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_cpp_isSubscribedTo(subscriber, source)

def SmallBodyNavIntMsg_C_addAuthor(coowner, data):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_addAuthor(coowner, data)

def SmallBodyNavIntMsg_C_init(owner):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_init(owner)

def SmallBodyNavIntMsg_C_isLinked(data):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_isLinked(data)

def SmallBodyNavIntMsg_C_isWritten(data):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_isWritten(data)

def SmallBodyNavIntMsg_C_timeWritten(data):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_timeWritten(data)

def SmallBodyNavIntMsg_C_moduleID(data):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_moduleID(data)

def SmallBodyNavIntMsg_C_write(data, destination, moduleID, callTime):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_write(data, destination, moduleID, callTime)

def SmallBodyNavIntMsg_C_read(source):
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_read(source)

def SmallBodyNavIntMsg_C_zeroMsgPayload():
    return _SmallBodyNavIntMsgPayload.SmallBodyNavIntMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SmallBodyNavIntMsgPayload.MsgHeader_isLinked_get, _SmallBodyNavIntMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SmallBodyNavIntMsgPayload.MsgHeader_isWritten_get, _SmallBodyNavIntMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SmallBodyNavIntMsgPayload.MsgHeader_timeWritten_get, _SmallBodyNavIntMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SmallBodyNavIntMsgPayload.MsgHeader_moduleID_get, _SmallBodyNavIntMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SmallBodyNavIntMsgPayload.MsgHeader_swiginit(self, _SmallBodyNavIntMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SmallBodyNavIntMsgPayload.delete_MsgHeader

# Register MsgHeader in _SmallBodyNavIntMsgPayload:
_SmallBodyNavIntMsgPayload.MsgHeader_swigregister(MsgHeader)

