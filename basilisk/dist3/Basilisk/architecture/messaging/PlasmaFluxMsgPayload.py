# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PlasmaFluxMsgPayload
else:
    import _PlasmaFluxMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PlasmaFluxMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PlasmaFluxMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PlasmaFluxMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PlasmaFluxMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PlasmaFluxMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PlasmaFluxMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PlasmaFluxMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PlasmaFluxMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PlasmaFluxMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PlasmaFluxMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PlasmaFluxMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PlasmaFluxMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PlasmaFluxMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PlasmaFluxMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PlasmaFluxMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PlasmaFluxMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PlasmaFluxMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PlasmaFluxMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PlasmaFluxMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PlasmaFluxMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PlasmaFluxMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PlasmaFluxMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PlasmaFluxMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PlasmaFluxMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PlasmaFluxMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PlasmaFluxMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PlasmaFluxMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PlasmaFluxMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PlasmaFluxMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PlasmaFluxMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PlasmaFluxMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PlasmaFluxMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlasmaFluxMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlasmaFluxMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PlasmaFluxMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PlasmaFluxMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PlasmaFluxMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlasmaFluxMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlasmaFluxMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlasmaFluxMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlasmaFluxMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlasmaFluxMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PlasmaFluxMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PlasmaFluxMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PlasmaFluxMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PlasmaFluxMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PlasmaFluxMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PlasmaFluxMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PlasmaFluxMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PlasmaFluxMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PlasmaFluxMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PlasmaFluxMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PlasmaFluxMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PlasmaFluxMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PlasmaFluxMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.TimeVector_swiginit(self, _PlasmaFluxMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PlasmaFluxMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PlasmaFluxMsgPayload.TimeVector_front(self)

    def back(self):
        return _PlasmaFluxMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PlasmaFluxMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PlasmaFluxMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PlasmaFluxMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PlasmaFluxMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PlasmaFluxMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_TimeVector

# Register TimeVector in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlasmaFluxMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlasmaFluxMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PlasmaFluxMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PlasmaFluxMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PlasmaFluxMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlasmaFluxMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlasmaFluxMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlasmaFluxMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlasmaFluxMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlasmaFluxMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PlasmaFluxMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PlasmaFluxMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PlasmaFluxMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PlasmaFluxMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PlasmaFluxMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PlasmaFluxMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PlasmaFluxMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PlasmaFluxMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PlasmaFluxMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PlasmaFluxMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PlasmaFluxMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PlasmaFluxMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PlasmaFluxMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.DoubleVector_swiginit(self, _PlasmaFluxMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PlasmaFluxMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PlasmaFluxMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PlasmaFluxMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PlasmaFluxMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PlasmaFluxMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PlasmaFluxMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PlasmaFluxMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PlasmaFluxMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_DoubleVector

# Register DoubleVector in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlasmaFluxMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlasmaFluxMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PlasmaFluxMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PlasmaFluxMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PlasmaFluxMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlasmaFluxMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlasmaFluxMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlasmaFluxMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlasmaFluxMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlasmaFluxMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PlasmaFluxMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PlasmaFluxMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PlasmaFluxMsgPayload.StringVector_empty(self)

    def size(self):
        return _PlasmaFluxMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PlasmaFluxMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PlasmaFluxMsgPayload.StringVector_begin(self)

    def end(self):
        return _PlasmaFluxMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PlasmaFluxMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PlasmaFluxMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PlasmaFluxMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PlasmaFluxMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PlasmaFluxMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PlasmaFluxMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.StringVector_swiginit(self, _PlasmaFluxMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PlasmaFluxMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PlasmaFluxMsgPayload.StringVector_front(self)

    def back(self):
        return _PlasmaFluxMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PlasmaFluxMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PlasmaFluxMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PlasmaFluxMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PlasmaFluxMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PlasmaFluxMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_StringVector

# Register StringVector in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PlasmaFluxMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PlasmaFluxMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PlasmaFluxMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PlasmaFluxMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PlasmaFluxMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PlasmaFluxMsgPayload.NANO2SEC
SEC2NANO = _PlasmaFluxMsgPayload.SEC2NANO
SEC2HOUR = _PlasmaFluxMsgPayload.SEC2HOUR
BOOL_FALSE = _PlasmaFluxMsgPayload.BOOL_FALSE
BOOL_TRUE = _PlasmaFluxMsgPayload.BOOL_TRUE
AVAILABLE = _PlasmaFluxMsgPayload.AVAILABLE
UNAVAILABLE = _PlasmaFluxMsgPayload.UNAVAILABLE
BalancedWheels = _PlasmaFluxMsgPayload.BalancedWheels
JitterSimple = _PlasmaFluxMsgPayload.JitterSimple
JitterFullyCoupled = _PlasmaFluxMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.SysModel_swiginit(self, _PlasmaFluxMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PlasmaFluxMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PlasmaFluxMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PlasmaFluxMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PlasmaFluxMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PlasmaFluxMsgPayload.SysModel_ModelTag_get, _PlasmaFluxMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PlasmaFluxMsgPayload.SysModel_CallCounts_get, _PlasmaFluxMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PlasmaFluxMsgPayload.SysModel_RNGSeed_get, _PlasmaFluxMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PlasmaFluxMsgPayload.SysModel_moduleID_get, _PlasmaFluxMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PlasmaFluxMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PlasmaFluxMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PlasmaFluxMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PlasmaFluxMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PlasmaFluxMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PlasmaFluxMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PlasmaFluxMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PlasmaFluxMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PlasmaFluxMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PlasmaFluxMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PlasmaFluxMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PlasmaFluxMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

MAX_PLASMA_FLUX_SIZE = _PlasmaFluxMsgPayload.MAX_PLASMA_FLUX_SIZE
class PlasmaFluxMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    meanElectronFlux = property(_PlasmaFluxMsgPayload.PlasmaFluxMsgPayload_meanElectronFlux_get, _PlasmaFluxMsgPayload.PlasmaFluxMsgPayload_meanElectronFlux_set)
    meanIonFlux = property(_PlasmaFluxMsgPayload.PlasmaFluxMsgPayload_meanIonFlux_get, _PlasmaFluxMsgPayload.PlasmaFluxMsgPayload_meanIonFlux_set)
    energies = property(_PlasmaFluxMsgPayload.PlasmaFluxMsgPayload_energies_get, _PlasmaFluxMsgPayload.PlasmaFluxMsgPayload_energies_set)

    def __init__(self):
        _PlasmaFluxMsgPayload.PlasmaFluxMsgPayload_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsgPayload())
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsgPayload

# Register PlasmaFluxMsgPayload in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsgPayload_swigregister(PlasmaFluxMsgPayload)
class PlasmaFluxMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PlasmaFluxMsgPayload.PlasmaFluxMsgReader_bskLogger_get, _PlasmaFluxMsgPayload.PlasmaFluxMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PlasmaFluxMsgPayload.PlasmaFluxMsgReader_zeroMsgPayload_get, _PlasmaFluxMsgPayload.PlasmaFluxMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.PlasmaFluxMsgReader_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsgReader(*args))

    def __call__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader___call__(self)

    def isLinked(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader_isLinked(self)

    def isWritten(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader_isWritten(self)

    def timeWritten(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader_timeWritten(self)

    def moduleID(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PlasmaFluxMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PlasmaFluxMsgPayload import PlasmaFluxMsg_C
            if type(source) == PlasmaFluxMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PlasmaFluxMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PlasmaFluxMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PlasmaFluxMsgPayload import PlasmaFluxMsg_C
        except ImportError:
            return 0

        if type(source) == PlasmaFluxMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsgReader

# Register PlasmaFluxMsgReader in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsgReader_swigregister(PlasmaFluxMsgReader)
class PlasmaFluxMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.PlasmaFluxMsgWriter_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsgWriter

# Register PlasmaFluxMsgWriter in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsgWriter_swigregister(PlasmaFluxMsgWriter)
class PlasmaFluxMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PlasmaFluxMsgPayload.PlasmaFluxMsg_write_get, _PlasmaFluxMsgPayload.PlasmaFluxMsg_write_set)

    def addSubscriber(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsg_addSubscriber(self)

    def addAuthor(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PlasmaFluxMsgPayload.PlasmaFluxMsg_zeroMsgPayload_get, _PlasmaFluxMsgPayload.PlasmaFluxMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsg_isLinked(self)

    def getPayloadSize(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PlasmaFluxMsgPayload.PlasmaFluxMsg_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsg())
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsg

# Register PlasmaFluxMsg in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsg_swigregister(PlasmaFluxMsg)
class PlasmaFluxMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsgRecorder(*args))
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsgRecorder

    def SelfInit(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_clear(self)
    bskLogger = property(_PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_bskLogger_get, _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PlasmaFluxMsgRecorder in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsgRecorder_swigregister(PlasmaFluxMsgRecorder)
class PlasmaFluxMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_pop(self)

    def append(self, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_append(self, x)

    def empty(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_empty(self)

    def size(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_size(self)

    def swap(self, v):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_begin(self)

    def end(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_end(self)

    def rbegin(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_rend(self)

    def clear(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsgPayloadVector(*args))

    def push_back(self, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_front(self)

    def back(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsgPayloadVector

# Register PlasmaFluxMsgPayloadVector in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsgPayloadVector_swigregister(PlasmaFluxMsgPayloadVector)
class PlasmaFluxMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_empty(self)

    def size(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_begin(self)

    def end(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_front(self)

    def back(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsgOutMsgsVector

# Register PlasmaFluxMsgOutMsgsVector in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsVector_swigregister(PlasmaFluxMsgOutMsgsVector)
class PlasmaFluxMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsgOutMsgsPtrVector

# Register PlasmaFluxMsgOutMsgsPtrVector in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsgOutMsgsPtrVector_swigregister(PlasmaFluxMsgOutMsgsPtrVector)
class PlasmaFluxMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_empty(self)

    def size(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_begin(self)

    def end(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_rend(self)

    def clear(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_front(self)

    def back(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsgInMsgsVector

# Register PlasmaFluxMsgInMsgsVector in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsgInMsgsVector_swigregister(PlasmaFluxMsgInMsgsVector)
class PlasmaFluxMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PlasmaFluxMsgPayload.PlasmaFluxMsg_C_header_get, _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_header_set)
    payload = property(_PlasmaFluxMsgPayload.PlasmaFluxMsg_C_payload_get, _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_payload_set)
    payloadPointer = property(_PlasmaFluxMsgPayload.PlasmaFluxMsg_C_payloadPointer_get, _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_payloadPointer_set)
    headerPointer = property(_PlasmaFluxMsgPayload.PlasmaFluxMsg_C_headerPointer_get, _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PlasmaFluxMsg
        if type(source) == type(self):
            PlasmaFluxMsg_C_subscribe(self, source)
        elif type(source) == PlasmaFluxMsg:
            PlasmaFluxMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PlasmaFluxMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PlasmaFluxMsg
        if type(source) == type(self):
            return (PlasmaFluxMsg_C_isSubscribedTo(self, source))
        elif type(source) == PlasmaFluxMsg:
            return (PlasmaFluxMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import PlasmaFluxMsgRecorder
        self.header.isLinked = 1
        return PlasmaFluxMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PlasmaFluxMsg_C_addAuthor(self, self)
        if data:
            PlasmaFluxMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PlasmaFluxMsg_C_addAuthor(self, self)
        PlasmaFluxMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PlasmaFluxMsg_C_read(self)


    def __init__(self):
        _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_swiginit(self, _PlasmaFluxMsgPayload.new_PlasmaFluxMsg_C())
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_PlasmaFluxMsg_C

# Register PlasmaFluxMsg_C in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.PlasmaFluxMsg_C_swigregister(PlasmaFluxMsg_C)

def PlasmaFluxMsg_cpp_subscribe(subscriber, source):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_cpp_subscribe(subscriber, source)

def PlasmaFluxMsg_C_subscribe(subscriber, source):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_subscribe(subscriber, source)

def PlasmaFluxMsg_C_isSubscribedTo(subscriber, source):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_isSubscribedTo(subscriber, source)

def PlasmaFluxMsg_cpp_isSubscribedTo(subscriber, source):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_cpp_isSubscribedTo(subscriber, source)

def PlasmaFluxMsg_C_addAuthor(coowner, data):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_addAuthor(coowner, data)

def PlasmaFluxMsg_C_init(owner):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_init(owner)

def PlasmaFluxMsg_C_isLinked(data):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_isLinked(data)

def PlasmaFluxMsg_C_isWritten(data):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_isWritten(data)

def PlasmaFluxMsg_C_timeWritten(data):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_timeWritten(data)

def PlasmaFluxMsg_C_moduleID(data):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_moduleID(data)

def PlasmaFluxMsg_C_write(data, destination, moduleID, callTime):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_write(data, destination, moduleID, callTime)

def PlasmaFluxMsg_C_read(source):
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_read(source)

def PlasmaFluxMsg_C_zeroMsgPayload():
    return _PlasmaFluxMsgPayload.PlasmaFluxMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PlasmaFluxMsgPayload.MsgHeader_isLinked_get, _PlasmaFluxMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PlasmaFluxMsgPayload.MsgHeader_isWritten_get, _PlasmaFluxMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PlasmaFluxMsgPayload.MsgHeader_timeWritten_get, _PlasmaFluxMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PlasmaFluxMsgPayload.MsgHeader_moduleID_get, _PlasmaFluxMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PlasmaFluxMsgPayload.MsgHeader_swiginit(self, _PlasmaFluxMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PlasmaFluxMsgPayload.delete_MsgHeader

# Register MsgHeader in _PlasmaFluxMsgPayload:
_PlasmaFluxMsgPayload.MsgHeader_swigregister(MsgHeader)

