# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _THRArrayCmdForceMsgPayload
else:
    import _THRArrayCmdForceMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_SwigPyIterator

    def value(self):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _THRArrayCmdForceMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _THRArrayCmdForceMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _THRArrayCmdForceMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _THRArrayCmdForceMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _THRArrayCmdForceMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _THRArrayCmdForceMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _THRArrayCmdForceMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _THRArrayCmdForceMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _THRArrayCmdForceMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _THRArrayCmdForceMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _THRArrayCmdForceMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _THRArrayCmdForceMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _THRArrayCmdForceMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _THRArrayCmdForceMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _THRArrayCmdForceMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _THRArrayCmdForceMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _THRArrayCmdForceMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayCmdForceMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayCmdForceMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _THRArrayCmdForceMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayCmdForceMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _THRArrayCmdForceMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_empty(self)

    def size(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _THRArrayCmdForceMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_begin(self)

    def end(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayCmdForceMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.TimeVector_swiginit(self, _THRArrayCmdForceMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _THRArrayCmdForceMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_front(self)

    def back(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _THRArrayCmdForceMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayCmdForceMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayCmdForceMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayCmdForceMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _THRArrayCmdForceMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_TimeVector

# Register TimeVector in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayCmdForceMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _THRArrayCmdForceMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _THRArrayCmdForceMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayCmdForceMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.DoubleVector_swiginit(self, _THRArrayCmdForceMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _THRArrayCmdForceMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_front(self)

    def back(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _THRArrayCmdForceMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayCmdForceMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayCmdForceMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayCmdForceMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _THRArrayCmdForceMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_DoubleVector

# Register DoubleVector in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayCmdForceMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayCmdForceMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayCmdForceMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _THRArrayCmdForceMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayCmdForceMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayCmdForceMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _THRArrayCmdForceMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _THRArrayCmdForceMsgPayload.StringVector_empty(self)

    def size(self):
        return _THRArrayCmdForceMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _THRArrayCmdForceMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _THRArrayCmdForceMsgPayload.StringVector_begin(self)

    def end(self):
        return _THRArrayCmdForceMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _THRArrayCmdForceMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _THRArrayCmdForceMsgPayload.StringVector_rend(self)

    def clear(self):
        return _THRArrayCmdForceMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _THRArrayCmdForceMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayCmdForceMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayCmdForceMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.StringVector_swiginit(self, _THRArrayCmdForceMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _THRArrayCmdForceMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _THRArrayCmdForceMsgPayload.StringVector_front(self)

    def back(self):
        return _THRArrayCmdForceMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _THRArrayCmdForceMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayCmdForceMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayCmdForceMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayCmdForceMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _THRArrayCmdForceMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_StringVector

# Register StringVector in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _THRArrayCmdForceMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _THRArrayCmdForceMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _THRArrayCmdForceMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _THRArrayCmdForceMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _THRArrayCmdForceMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _THRArrayCmdForceMsgPayload.NANO2SEC
SEC2NANO = _THRArrayCmdForceMsgPayload.SEC2NANO
SEC2HOUR = _THRArrayCmdForceMsgPayload.SEC2HOUR
BOOL_FALSE = _THRArrayCmdForceMsgPayload.BOOL_FALSE
BOOL_TRUE = _THRArrayCmdForceMsgPayload.BOOL_TRUE
AVAILABLE = _THRArrayCmdForceMsgPayload.AVAILABLE
UNAVAILABLE = _THRArrayCmdForceMsgPayload.UNAVAILABLE
BalancedWheels = _THRArrayCmdForceMsgPayload.BalancedWheels
JitterSimple = _THRArrayCmdForceMsgPayload.JitterSimple
JitterFullyCoupled = _THRArrayCmdForceMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.SysModel_swiginit(self, _THRArrayCmdForceMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_SysModel

    def SelfInit(self):
        return _THRArrayCmdForceMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _THRArrayCmdForceMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _THRArrayCmdForceMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _THRArrayCmdForceMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_THRArrayCmdForceMsgPayload.SysModel_ModelTag_get, _THRArrayCmdForceMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_THRArrayCmdForceMsgPayload.SysModel_CallCounts_get, _THRArrayCmdForceMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_THRArrayCmdForceMsgPayload.SysModel_RNGSeed_get, _THRArrayCmdForceMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_THRArrayCmdForceMsgPayload.SysModel_moduleID_get, _THRArrayCmdForceMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _THRArrayCmdForceMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _THRArrayCmdForceMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _THRArrayCmdForceMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _THRArrayCmdForceMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _THRArrayCmdForceMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _THRArrayCmdForceMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _THRArrayCmdForceMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _THRArrayCmdForceMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _THRArrayCmdForceMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _THRArrayCmdForceMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _THRArrayCmdForceMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _THRArrayCmdForceMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class THRArrayCmdForceMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thrForce = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayload_thrForce_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayload_thrForce_set)

    def __init__(self):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayload_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsgPayload())
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsgPayload

# Register THRArrayCmdForceMsgPayload in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayload_swigregister(THRArrayCmdForceMsgPayload)
class THRArrayCmdForceMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_bskLogger_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_bskLogger_set)
    zeroMsgPayload = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_zeroMsgPayload_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsgReader(*args))

    def __call__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader___call__(self)

    def isLinked(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_isLinked(self)

    def isWritten(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_isWritten(self)

    def timeWritten(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_timeWritten(self)

    def moduleID(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == THRArrayCmdForceMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.THRArrayCmdForceMsgPayload import THRArrayCmdForceMsg_C
            if type(source) == THRArrayCmdForceMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<THRArrayCmdForceMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == THRArrayCmdForceMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.THRArrayCmdForceMsgPayload import THRArrayCmdForceMsg_C
        except ImportError:
            return 0

        if type(source) == THRArrayCmdForceMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsgReader

# Register THRArrayCmdForceMsgReader in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgReader_swigregister(THRArrayCmdForceMsgReader)
class THRArrayCmdForceMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgWriter_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsgWriter

# Register THRArrayCmdForceMsgWriter in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgWriter_swigregister(THRArrayCmdForceMsgWriter)
class THRArrayCmdForceMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_write_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_write_set)

    def addSubscriber(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_addSubscriber(self)

    def addAuthor(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_zeroMsgPayload_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_isLinked(self)

    def getPayloadSize(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsg())
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsg

# Register THRArrayCmdForceMsg in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_swigregister(THRArrayCmdForceMsg)
class THRArrayCmdForceMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsgRecorder(*args))
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsgRecorder

    def SelfInit(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_clear(self)
    bskLogger = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_bskLogger_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register THRArrayCmdForceMsgRecorder in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgRecorder_swigregister(THRArrayCmdForceMsgRecorder)
class THRArrayCmdForceMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___bool__(self)

    def __len__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_pop(self)

    def append(self, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_append(self, x)

    def empty(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_empty(self)

    def size(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_size(self)

    def swap(self, v):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_swap(self, v)

    def begin(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_begin(self)

    def end(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_end(self)

    def rbegin(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_rbegin(self)

    def rend(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_rend(self)

    def clear(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsgPayloadVector(*args))

    def push_back(self, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_push_back(self, x)

    def front(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_front(self)

    def back(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsgPayloadVector

# Register THRArrayCmdForceMsgPayloadVector in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgPayloadVector_swigregister(THRArrayCmdForceMsgPayloadVector)
class THRArrayCmdForceMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_empty(self)

    def size(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_begin(self)

    def end(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_rend(self)

    def clear(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_front(self)

    def back(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsgOutMsgsVector

# Register THRArrayCmdForceMsgOutMsgsVector in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsVector_swigregister(THRArrayCmdForceMsgOutMsgsVector)
class THRArrayCmdForceMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsgOutMsgsPtrVector

# Register THRArrayCmdForceMsgOutMsgsPtrVector in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgOutMsgsPtrVector_swigregister(THRArrayCmdForceMsgOutMsgsPtrVector)
class THRArrayCmdForceMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_pop(self)

    def append(self, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_append(self, x)

    def empty(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_empty(self)

    def size(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_size(self)

    def swap(self, v):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_begin(self)

    def end(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_end(self)

    def rbegin(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_rend(self)

    def clear(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsgInMsgsVector(*args))

    def push_back(self, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_front(self)

    def back(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsgInMsgsVector

# Register THRArrayCmdForceMsgInMsgsVector in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsgInMsgsVector_swigregister(THRArrayCmdForceMsgInMsgsVector)
class THRArrayCmdForceMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_header_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_header_set)
    payload = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_payload_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_payload_set)
    payloadPointer = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_payloadPointer_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_payloadPointer_set)
    headerPointer = property(_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_headerPointer_get, _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import THRArrayCmdForceMsg
        if type(source) == type(self):
            THRArrayCmdForceMsg_C_subscribe(self, source)
        elif type(source) == THRArrayCmdForceMsg:
            THRArrayCmdForceMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe THRArrayCmdForceMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import THRArrayCmdForceMsg
        if type(source) == type(self):
            return (THRArrayCmdForceMsg_C_isSubscribedTo(self, source))
        elif type(source) == THRArrayCmdForceMsg:
            return (THRArrayCmdForceMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import THRArrayCmdForceMsgRecorder
        self.header.isLinked = 1
        return THRArrayCmdForceMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        THRArrayCmdForceMsg_C_addAuthor(self, self)
        if data:
            THRArrayCmdForceMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        THRArrayCmdForceMsg_C_addAuthor(self, self)
        THRArrayCmdForceMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return THRArrayCmdForceMsg_C_read(self)


    def __init__(self):
        _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_swiginit(self, _THRArrayCmdForceMsgPayload.new_THRArrayCmdForceMsg_C())
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_THRArrayCmdForceMsg_C

# Register THRArrayCmdForceMsg_C in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_swigregister(THRArrayCmdForceMsg_C)

def THRArrayCmdForceMsg_cpp_subscribe(subscriber, source):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_cpp_subscribe(subscriber, source)

def THRArrayCmdForceMsg_C_subscribe(subscriber, source):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_subscribe(subscriber, source)

def THRArrayCmdForceMsg_C_isSubscribedTo(subscriber, source):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_isSubscribedTo(subscriber, source)

def THRArrayCmdForceMsg_cpp_isSubscribedTo(subscriber, source):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_cpp_isSubscribedTo(subscriber, source)

def THRArrayCmdForceMsg_C_addAuthor(coowner, data):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_addAuthor(coowner, data)

def THRArrayCmdForceMsg_C_init(owner):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_init(owner)

def THRArrayCmdForceMsg_C_isLinked(data):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_isLinked(data)

def THRArrayCmdForceMsg_C_isWritten(data):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_isWritten(data)

def THRArrayCmdForceMsg_C_timeWritten(data):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_timeWritten(data)

def THRArrayCmdForceMsg_C_moduleID(data):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_moduleID(data)

def THRArrayCmdForceMsg_C_write(data, destination, moduleID, callTime):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_write(data, destination, moduleID, callTime)

def THRArrayCmdForceMsg_C_read(source):
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_read(source)

def THRArrayCmdForceMsg_C_zeroMsgPayload():
    return _THRArrayCmdForceMsgPayload.THRArrayCmdForceMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_THRArrayCmdForceMsgPayload.MsgHeader_isLinked_get, _THRArrayCmdForceMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_THRArrayCmdForceMsgPayload.MsgHeader_isWritten_get, _THRArrayCmdForceMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_THRArrayCmdForceMsgPayload.MsgHeader_timeWritten_get, _THRArrayCmdForceMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_THRArrayCmdForceMsgPayload.MsgHeader_moduleID_get, _THRArrayCmdForceMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _THRArrayCmdForceMsgPayload.MsgHeader_swiginit(self, _THRArrayCmdForceMsgPayload.new_MsgHeader())
    __swig_destroy__ = _THRArrayCmdForceMsgPayload.delete_MsgHeader

# Register MsgHeader in _THRArrayCmdForceMsgPayload:
_THRArrayCmdForceMsgPayload.MsgHeader_swigregister(MsgHeader)

