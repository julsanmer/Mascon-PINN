# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SmallBodyNav1MsgPayload
else:
    import _SmallBodyNav1MsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SwigPyIterator

    def value(self):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SmallBodyNav1MsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SmallBodyNav1MsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SmallBodyNav1MsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SmallBodyNav1MsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SmallBodyNav1MsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SmallBodyNav1MsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SmallBodyNav1MsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SmallBodyNav1MsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SmallBodyNav1MsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SmallBodyNav1MsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SmallBodyNav1MsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SmallBodyNav1MsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SmallBodyNav1MsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SmallBodyNav1MsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SmallBodyNav1MsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SmallBodyNav1MsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SmallBodyNav1MsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SmallBodyNav1MsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SmallBodyNav1MsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SmallBodyNav1MsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SmallBodyNav1MsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SmallBodyNav1MsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SmallBodyNav1MsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SmallBodyNav1MsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNav1MsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNav1MsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNav1MsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SmallBodyNav1MsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNav1MsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNav1MsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNav1MsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNav1MsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNav1MsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SmallBodyNav1MsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SmallBodyNav1MsgPayload.TimeVector_empty(self)

    def size(self):
        return _SmallBodyNav1MsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SmallBodyNav1MsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SmallBodyNav1MsgPayload.TimeVector_begin(self)

    def end(self):
        return _SmallBodyNav1MsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SmallBodyNav1MsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SmallBodyNav1MsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SmallBodyNav1MsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNav1MsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNav1MsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNav1MsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.TimeVector_swiginit(self, _SmallBodyNav1MsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SmallBodyNav1MsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SmallBodyNav1MsgPayload.TimeVector_front(self)

    def back(self):
        return _SmallBodyNav1MsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNav1MsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNav1MsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNav1MsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNav1MsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNav1MsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_TimeVector

# Register TimeVector in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNav1MsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNav1MsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SmallBodyNav1MsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNav1MsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNav1MsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNav1MsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNav1MsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SmallBodyNav1MsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SmallBodyNav1MsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNav1MsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.DoubleVector_swiginit(self, _SmallBodyNav1MsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SmallBodyNav1MsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_front(self)

    def back(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNav1MsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNav1MsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNav1MsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNav1MsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNav1MsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_DoubleVector

# Register DoubleVector in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNav1MsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNav1MsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNav1MsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SmallBodyNav1MsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNav1MsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNav1MsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNav1MsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNav1MsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNav1MsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SmallBodyNav1MsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SmallBodyNav1MsgPayload.StringVector_empty(self)

    def size(self):
        return _SmallBodyNav1MsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SmallBodyNav1MsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SmallBodyNav1MsgPayload.StringVector_begin(self)

    def end(self):
        return _SmallBodyNav1MsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SmallBodyNav1MsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SmallBodyNav1MsgPayload.StringVector_rend(self)

    def clear(self):
        return _SmallBodyNav1MsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNav1MsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNav1MsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNav1MsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.StringVector_swiginit(self, _SmallBodyNav1MsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SmallBodyNav1MsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SmallBodyNav1MsgPayload.StringVector_front(self)

    def back(self):
        return _SmallBodyNav1MsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNav1MsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNav1MsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNav1MsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNav1MsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNav1MsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_StringVector

# Register StringVector in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SmallBodyNav1MsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SmallBodyNav1MsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SmallBodyNav1MsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SmallBodyNav1MsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SmallBodyNav1MsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SmallBodyNav1MsgPayload.NANO2SEC
SEC2NANO = _SmallBodyNav1MsgPayload.SEC2NANO
SEC2HOUR = _SmallBodyNav1MsgPayload.SEC2HOUR
BOOL_FALSE = _SmallBodyNav1MsgPayload.BOOL_FALSE
BOOL_TRUE = _SmallBodyNav1MsgPayload.BOOL_TRUE
AVAILABLE = _SmallBodyNav1MsgPayload.AVAILABLE
UNAVAILABLE = _SmallBodyNav1MsgPayload.UNAVAILABLE
BalancedWheels = _SmallBodyNav1MsgPayload.BalancedWheels
JitterSimple = _SmallBodyNav1MsgPayload.JitterSimple
JitterFullyCoupled = _SmallBodyNav1MsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.SysModel_swiginit(self, _SmallBodyNav1MsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SysModel

    def SelfInit(self):
        return _SmallBodyNav1MsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNav1MsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNav1MsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNav1MsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SmallBodyNav1MsgPayload.SysModel_ModelTag_get, _SmallBodyNav1MsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SmallBodyNav1MsgPayload.SysModel_CallCounts_get, _SmallBodyNav1MsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SmallBodyNav1MsgPayload.SysModel_RNGSeed_get, _SmallBodyNav1MsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SmallBodyNav1MsgPayload.SysModel_moduleID_get, _SmallBodyNav1MsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SmallBodyNav1MsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SmallBodyNav1MsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SmallBodyNav1MsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SmallBodyNav1MsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SmallBodyNav1MsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SmallBodyNav1MsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SmallBodyNav1MsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SmallBodyNav1MsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SmallBodyNav1MsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SmallBodyNav1MsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SmallBodyNav1MsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SmallBodyNav1MsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SmallBodyNav1MsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_state_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_state_set)
    covar = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_covar_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_covar_set)
    skew = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_skew_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_skew_set)
    kurt = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_kurt_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_kurt_set)
    meas = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_meas_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_meas_set)
    tcpu = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_tcpu_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_tcpu_set)

    def __init__(self):
        _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1MsgPayload())
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1MsgPayload

# Register SmallBodyNav1MsgPayload in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayload_swigregister(SmallBodyNav1MsgPayload)
class SmallBodyNav1MsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_bskLogger_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_bskLogger_set)
    zeroMsgPayload = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_zeroMsgPayload_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1MsgReader(*args))

    def __call__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader___call__(self)

    def isLinked(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_isLinked(self)

    def isWritten(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_isWritten(self)

    def timeWritten(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_timeWritten(self)

    def moduleID(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SmallBodyNav1Msg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SmallBodyNav1MsgPayload import SmallBodyNav1Msg_C
            if type(source) == SmallBodyNav1Msg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SmallBodyNav1MsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SmallBodyNav1Msg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SmallBodyNav1MsgPayload import SmallBodyNav1Msg_C
        except ImportError:
            return 0

        if type(source) == SmallBodyNav1Msg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1MsgReader

# Register SmallBodyNav1MsgReader in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1MsgReader_swigregister(SmallBodyNav1MsgReader)
class SmallBodyNav1MsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.SmallBodyNav1MsgWriter_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1MsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1MsgWriter

# Register SmallBodyNav1MsgWriter in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1MsgWriter_swigregister(SmallBodyNav1MsgWriter)
class SmallBodyNav1Msg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SmallBodyNav1MsgPayload.SmallBodyNav1Msg_write_get, _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_write_set)

    def addSubscriber(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_addSubscriber(self)

    def addAuthor(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SmallBodyNav1MsgPayload.SmallBodyNav1Msg_zeroMsgPayload_get, _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_zeroMsgPayload_set)

    def isLinked(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_isLinked(self)

    def getPayloadSize(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1Msg())
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1Msg

# Register SmallBodyNav1Msg in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1Msg_swigregister(SmallBodyNav1Msg)
class SmallBodyNav1MsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1MsgRecorder(*args))
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1MsgRecorder

    def SelfInit(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_clear(self)
    bskLogger = property(_SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_bskLogger_get, _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SmallBodyNav1MsgRecorder in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1MsgRecorder_swigregister(SmallBodyNav1MsgRecorder)
class SmallBodyNav1MsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___bool__(self)

    def __len__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_pop(self)

    def append(self, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_append(self, x)

    def empty(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_empty(self)

    def size(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_size(self)

    def swap(self, v):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_swap(self, v)

    def begin(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_begin(self)

    def end(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_end(self)

    def rbegin(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_rbegin(self)

    def rend(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_rend(self)

    def clear(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1MsgPayloadVector(*args))

    def push_back(self, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_push_back(self, x)

    def front(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_front(self)

    def back(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1MsgPayloadVector

# Register SmallBodyNav1MsgPayloadVector in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1MsgPayloadVector_swigregister(SmallBodyNav1MsgPayloadVector)
class SmallBodyNav1MsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1MsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_front(self)

    def back(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1MsgOutMsgsVector

# Register SmallBodyNav1MsgOutMsgsVector in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsVector_swigregister(SmallBodyNav1MsgOutMsgsVector)
class SmallBodyNav1MsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1MsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1MsgOutMsgsPtrVector

# Register SmallBodyNav1MsgOutMsgsPtrVector in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1MsgOutMsgsPtrVector_swigregister(SmallBodyNav1MsgOutMsgsPtrVector)
class SmallBodyNav1MsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1MsgInMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_front(self)

    def back(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1MsgInMsgsVector

# Register SmallBodyNav1MsgInMsgsVector in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1MsgInMsgsVector_swigregister(SmallBodyNav1MsgInMsgsVector)
class SmallBodyNav1Msg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_header_get, _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_header_set)
    payload = property(_SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_payload_get, _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_payload_set)
    payloadPointer = property(_SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_payloadPointer_get, _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_payloadPointer_set)
    headerPointer = property(_SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_headerPointer_get, _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNav1Msg
        if type(source) == type(self):
            SmallBodyNav1Msg_C_subscribe(self, source)
        elif type(source) == SmallBodyNav1Msg:
            SmallBodyNav1Msg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SmallBodyNav1Msg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNav1Msg
        if type(source) == type(self):
            return (SmallBodyNav1Msg_C_isSubscribedTo(self, source))
        elif type(source) == SmallBodyNav1Msg:
            return (SmallBodyNav1Msg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import SmallBodyNav1MsgRecorder
        self.header.isLinked = 1
        return SmallBodyNav1MsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SmallBodyNav1Msg_C_addAuthor(self, self)
        if data:
            SmallBodyNav1Msg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SmallBodyNav1Msg_C_addAuthor(self, self)
        SmallBodyNav1Msg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SmallBodyNav1Msg_C_read(self)


    def __init__(self):
        _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_swiginit(self, _SmallBodyNav1MsgPayload.new_SmallBodyNav1Msg_C())
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_SmallBodyNav1Msg_C

# Register SmallBodyNav1Msg_C in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_swigregister(SmallBodyNav1Msg_C)

def SmallBodyNav1Msg_cpp_subscribe(subscriber, source):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_cpp_subscribe(subscriber, source)

def SmallBodyNav1Msg_C_subscribe(subscriber, source):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_subscribe(subscriber, source)

def SmallBodyNav1Msg_C_isSubscribedTo(subscriber, source):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_isSubscribedTo(subscriber, source)

def SmallBodyNav1Msg_cpp_isSubscribedTo(subscriber, source):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_cpp_isSubscribedTo(subscriber, source)

def SmallBodyNav1Msg_C_addAuthor(coowner, data):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_addAuthor(coowner, data)

def SmallBodyNav1Msg_C_init(owner):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_init(owner)

def SmallBodyNav1Msg_C_isLinked(data):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_isLinked(data)

def SmallBodyNav1Msg_C_isWritten(data):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_isWritten(data)

def SmallBodyNav1Msg_C_timeWritten(data):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_timeWritten(data)

def SmallBodyNav1Msg_C_moduleID(data):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_moduleID(data)

def SmallBodyNav1Msg_C_write(data, destination, moduleID, callTime):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_write(data, destination, moduleID, callTime)

def SmallBodyNav1Msg_C_read(source):
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_read(source)

def SmallBodyNav1Msg_C_zeroMsgPayload():
    return _SmallBodyNav1MsgPayload.SmallBodyNav1Msg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SmallBodyNav1MsgPayload.MsgHeader_isLinked_get, _SmallBodyNav1MsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SmallBodyNav1MsgPayload.MsgHeader_isWritten_get, _SmallBodyNav1MsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SmallBodyNav1MsgPayload.MsgHeader_timeWritten_get, _SmallBodyNav1MsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SmallBodyNav1MsgPayload.MsgHeader_moduleID_get, _SmallBodyNav1MsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SmallBodyNav1MsgPayload.MsgHeader_swiginit(self, _SmallBodyNav1MsgPayload.new_MsgHeader())
    __swig_destroy__ = _SmallBodyNav1MsgPayload.delete_MsgHeader

# Register MsgHeader in _SmallBodyNav1MsgPayload:
_SmallBodyNav1MsgPayload.MsgHeader_swigregister(MsgHeader)

