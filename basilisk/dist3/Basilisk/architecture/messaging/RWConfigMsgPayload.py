# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWConfigMsgPayload
else:
    import _RWConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RWConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RWConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RWConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RWConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWConfigMsgPayload:
_RWConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RWConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RWConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RWConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RWConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RWConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RWConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RWConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RWConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RWConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RWConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RWConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RWConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RWConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RWConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RWConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RWConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RWConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RWConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RWConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RWConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RWConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RWConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RWConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RWConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RWConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RWConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RWConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigMsgPayload.TimeVector_swiginit(self, _RWConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RWConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RWConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _RWConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RWConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RWConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RWConfigMsgPayload.delete_TimeVector

# Register TimeVector in _RWConfigMsgPayload:
_RWConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RWConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RWConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RWConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RWConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RWConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RWConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RWConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RWConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RWConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RWConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RWConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigMsgPayload.DoubleVector_swiginit(self, _RWConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RWConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RWConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RWConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RWConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RWConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RWConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _RWConfigMsgPayload:
_RWConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RWConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RWConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RWConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _RWConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RWConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RWConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _RWConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RWConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RWConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RWConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RWConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigMsgPayload.StringVector_swiginit(self, _RWConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RWConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RWConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _RWConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RWConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RWConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RWConfigMsgPayload.delete_StringVector

# Register StringVector in _RWConfigMsgPayload:
_RWConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RWConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RWConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RWConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RWConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RWConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RWConfigMsgPayload.NANO2SEC
SEC2NANO = _RWConfigMsgPayload.SEC2NANO
SEC2HOUR = _RWConfigMsgPayload.SEC2HOUR
BOOL_FALSE = _RWConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _RWConfigMsgPayload.BOOL_TRUE
AVAILABLE = _RWConfigMsgPayload.AVAILABLE
UNAVAILABLE = _RWConfigMsgPayload.UNAVAILABLE
BalancedWheels = _RWConfigMsgPayload.BalancedWheels
JitterSimple = _RWConfigMsgPayload.JitterSimple
JitterFullyCoupled = _RWConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigMsgPayload.SysModel_swiginit(self, _RWConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RWConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RWConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RWConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RWConfigMsgPayload.SysModel_ModelTag_get, _RWConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RWConfigMsgPayload.SysModel_CallCounts_get, _RWConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RWConfigMsgPayload.SysModel_RNGSeed_get, _RWConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RWConfigMsgPayload.SysModel_moduleID_get, _RWConfigMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _RWConfigMsgPayload:
_RWConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RWConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RWConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RWConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RWConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RWConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RWConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RWConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RWConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RWConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RWConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RWConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RWConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RWConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rWB_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_rWB_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_rWB_B_set)
    gsHat_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_gsHat_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_gsHat_B_set)
    w2Hat0_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_w2Hat0_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_w2Hat0_B_set)
    w3Hat0_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_w3Hat0_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_w3Hat0_B_set)
    mass = property(_RWConfigMsgPayload.RWConfigMsgPayload_mass_get, _RWConfigMsgPayload.RWConfigMsgPayload_mass_set)
    theta = property(_RWConfigMsgPayload.RWConfigMsgPayload_theta_get, _RWConfigMsgPayload.RWConfigMsgPayload_theta_set)
    Omega = property(_RWConfigMsgPayload.RWConfigMsgPayload_Omega_get, _RWConfigMsgPayload.RWConfigMsgPayload_Omega_set)
    Js = property(_RWConfigMsgPayload.RWConfigMsgPayload_Js_get, _RWConfigMsgPayload.RWConfigMsgPayload_Js_set)
    Jt = property(_RWConfigMsgPayload.RWConfigMsgPayload_Jt_get, _RWConfigMsgPayload.RWConfigMsgPayload_Jt_set)
    Jg = property(_RWConfigMsgPayload.RWConfigMsgPayload_Jg_get, _RWConfigMsgPayload.RWConfigMsgPayload_Jg_set)
    U_s = property(_RWConfigMsgPayload.RWConfigMsgPayload_U_s_get, _RWConfigMsgPayload.RWConfigMsgPayload_U_s_set)
    U_d = property(_RWConfigMsgPayload.RWConfigMsgPayload_U_d_get, _RWConfigMsgPayload.RWConfigMsgPayload_U_d_set)
    d = property(_RWConfigMsgPayload.RWConfigMsgPayload_d_get, _RWConfigMsgPayload.RWConfigMsgPayload_d_set)
    J13 = property(_RWConfigMsgPayload.RWConfigMsgPayload_J13_get, _RWConfigMsgPayload.RWConfigMsgPayload_J13_set)
    u_current = property(_RWConfigMsgPayload.RWConfigMsgPayload_u_current_get, _RWConfigMsgPayload.RWConfigMsgPayload_u_current_set)
    u_max = property(_RWConfigMsgPayload.RWConfigMsgPayload_u_max_get, _RWConfigMsgPayload.RWConfigMsgPayload_u_max_set)
    u_min = property(_RWConfigMsgPayload.RWConfigMsgPayload_u_min_get, _RWConfigMsgPayload.RWConfigMsgPayload_u_min_set)
    fCoulomb = property(_RWConfigMsgPayload.RWConfigMsgPayload_fCoulomb_get, _RWConfigMsgPayload.RWConfigMsgPayload_fCoulomb_set)
    fStatic = property(_RWConfigMsgPayload.RWConfigMsgPayload_fStatic_get, _RWConfigMsgPayload.RWConfigMsgPayload_fStatic_set)
    betaStatic = property(_RWConfigMsgPayload.RWConfigMsgPayload_betaStatic_get, _RWConfigMsgPayload.RWConfigMsgPayload_betaStatic_set)
    cViscous = property(_RWConfigMsgPayload.RWConfigMsgPayload_cViscous_get, _RWConfigMsgPayload.RWConfigMsgPayload_cViscous_set)
    omegaLimitCycle = property(_RWConfigMsgPayload.RWConfigMsgPayload_omegaLimitCycle_get, _RWConfigMsgPayload.RWConfigMsgPayload_omegaLimitCycle_set)
    frictionTorque = property(_RWConfigMsgPayload.RWConfigMsgPayload_frictionTorque_get, _RWConfigMsgPayload.RWConfigMsgPayload_frictionTorque_set)
    omegaBefore = property(_RWConfigMsgPayload.RWConfigMsgPayload_omegaBefore_get, _RWConfigMsgPayload.RWConfigMsgPayload_omegaBefore_set)
    frictionStribeck = property(_RWConfigMsgPayload.RWConfigMsgPayload_frictionStribeck_get, _RWConfigMsgPayload.RWConfigMsgPayload_frictionStribeck_set)
    Omega_max = property(_RWConfigMsgPayload.RWConfigMsgPayload_Omega_max_get, _RWConfigMsgPayload.RWConfigMsgPayload_Omega_max_set)
    P_max = property(_RWConfigMsgPayload.RWConfigMsgPayload_P_max_get, _RWConfigMsgPayload.RWConfigMsgPayload_P_max_set)
    RWModel = property(_RWConfigMsgPayload.RWConfigMsgPayload_RWModel_get, _RWConfigMsgPayload.RWConfigMsgPayload_RWModel_set)
    aOmega = property(_RWConfigMsgPayload.RWConfigMsgPayload_aOmega_get, _RWConfigMsgPayload.RWConfigMsgPayload_aOmega_set)
    bOmega = property(_RWConfigMsgPayload.RWConfigMsgPayload_bOmega_get, _RWConfigMsgPayload.RWConfigMsgPayload_bOmega_set)
    cOmega = property(_RWConfigMsgPayload.RWConfigMsgPayload_cOmega_get, _RWConfigMsgPayload.RWConfigMsgPayload_cOmega_set)
    IRWPntWc_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_IRWPntWc_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_IRWPntWc_B_set)
    IPrimeRWPntWc_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_IPrimeRWPntWc_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_IPrimeRWPntWc_B_set)
    rWcB_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_rWcB_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_rWcB_B_set)
    rTildeWcB_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_rTildeWcB_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_rTildeWcB_B_set)
    rPrimeWcB_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_rPrimeWcB_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_rPrimeWcB_B_set)
    w2Hat_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_w2Hat_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_w2Hat_B_set)
    w3Hat_B = property(_RWConfigMsgPayload.RWConfigMsgPayload_w3Hat_B_get, _RWConfigMsgPayload.RWConfigMsgPayload_w3Hat_B_set)
    label = property(_RWConfigMsgPayload.RWConfigMsgPayload_label_get, _RWConfigMsgPayload.RWConfigMsgPayload_label_set)

    def __init__(self):
        _RWConfigMsgPayload.RWConfigMsgPayload_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsgPayload())
    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsgPayload

# Register RWConfigMsgPayload in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsgPayload_swigregister(RWConfigMsgPayload)
class RWConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RWConfigMsgPayload.RWConfigMsgReader_bskLogger_get, _RWConfigMsgPayload.RWConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RWConfigMsgPayload.RWConfigMsgReader_zeroMsgPayload_get, _RWConfigMsgPayload.RWConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RWConfigMsgPayload.RWConfigMsgReader_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsgReader(*args))

    def __call__(self):
        return _RWConfigMsgPayload.RWConfigMsgReader___call__(self)

    def isLinked(self):
        return _RWConfigMsgPayload.RWConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _RWConfigMsgPayload.RWConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _RWConfigMsgPayload.RWConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _RWConfigMsgPayload.RWConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RWConfigMsgPayload.RWConfigMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _RWConfigMsgPayload.RWConfigMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _RWConfigMsgPayload.RWConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RWConfigMsgPayload.RWConfigMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _RWConfigMsgPayload.RWConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RWConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RWConfigMsgPayload import RWConfigMsg_C
            if type(source) == RWConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RWConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RWConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RWConfigMsgPayload import RWConfigMsg_C
        except ImportError:
            return 0

        if type(source) == RWConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsgReader

# Register RWConfigMsgReader in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsgReader_swigregister(RWConfigMsgReader)
class RWConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigMsgPayload.RWConfigMsgWriter_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RWConfigMsgPayload.RWConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsgWriter

# Register RWConfigMsgWriter in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsgWriter_swigregister(RWConfigMsgWriter)
class RWConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RWConfigMsgPayload.RWConfigMsg_write_get, _RWConfigMsgPayload.RWConfigMsg_write_set)

    def addSubscriber(self):
        return _RWConfigMsgPayload.RWConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _RWConfigMsgPayload.RWConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RWConfigMsgPayload.RWConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RWConfigMsgPayload.RWConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RWConfigMsgPayload.RWConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RWConfigMsgPayload.RWConfigMsg_zeroMsgPayload_get, _RWConfigMsgPayload.RWConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RWConfigMsgPayload.RWConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _RWConfigMsgPayload.RWConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RWConfigMsgPayload.RWConfigMsg_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsg())
    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsg

# Register RWConfigMsg in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsg_swigregister(RWConfigMsg)
class RWConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigMsgPayload.RWConfigMsgRecorder_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsgRecorder(*args))
    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsgRecorder

    def SelfInit(self):
        return _RWConfigMsgPayload.RWConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RWConfigMsgPayload.RWConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWConfigMsgPayload.RWConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWConfigMsgPayload.RWConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RWConfigMsgPayload.RWConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RWConfigMsgPayload.RWConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RWConfigMsgPayload.RWConfigMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _RWConfigMsgPayload.RWConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RWConfigMsgPayload.RWConfigMsgRecorder_clear(self)
    bskLogger = property(_RWConfigMsgPayload.RWConfigMsgRecorder_bskLogger_get, _RWConfigMsgPayload.RWConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RWConfigMsgPayload.RWConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RWConfigMsgRecorder in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsgRecorder_swigregister(RWConfigMsgRecorder)
class RWConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_empty(self)

    def size(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_begin(self)

    def end(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigMsgPayload.RWConfigMsgPayloadVector_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_front(self)

    def back(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RWConfigMsgPayload.RWConfigMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsgPayloadVector

# Register RWConfigMsgPayloadVector in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsgPayloadVector_swigregister(RWConfigMsgPayloadVector)
class RWConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsgOutMsgsVector

# Register RWConfigMsgOutMsgsVector in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsgOutMsgsVector_swigregister(RWConfigMsgOutMsgsVector)
class RWConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsgOutMsgsPtrVector

# Register RWConfigMsgOutMsgsPtrVector in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsgOutMsgsPtrVector_swigregister(RWConfigMsgOutMsgsPtrVector)
class RWConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigMsgPayload.RWConfigMsgInMsgsVector_swiginit(self, _RWConfigMsgPayload.new_RWConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_front(self)

    def back(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWConfigMsgPayload.RWConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RWConfigMsgPayload.delete_RWConfigMsgInMsgsVector

# Register RWConfigMsgInMsgsVector in _RWConfigMsgPayload:
_RWConfigMsgPayload.RWConfigMsgInMsgsVector_swigregister(RWConfigMsgInMsgsVector)

