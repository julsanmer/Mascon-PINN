# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _InterRangeMsgPayload
else:
    import _InterRangeMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _InterRangeMsgPayload.delete_SwigPyIterator

    def value(self):
        return _InterRangeMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _InterRangeMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _InterRangeMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _InterRangeMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _InterRangeMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _InterRangeMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _InterRangeMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _InterRangeMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _InterRangeMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _InterRangeMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _InterRangeMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _InterRangeMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _InterRangeMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _InterRangeMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _InterRangeMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _InterRangeMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _InterRangeMsgPayload:
_InterRangeMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _InterRangeMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _InterRangeMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _InterRangeMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _InterRangeMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _InterRangeMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _InterRangeMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _InterRangeMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _InterRangeMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _InterRangeMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _InterRangeMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _InterRangeMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _InterRangeMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _InterRangeMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _InterRangeMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _InterRangeMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _InterRangeMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InterRangeMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InterRangeMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _InterRangeMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _InterRangeMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _InterRangeMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InterRangeMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InterRangeMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InterRangeMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InterRangeMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InterRangeMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _InterRangeMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _InterRangeMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _InterRangeMsgPayload.TimeVector_empty(self)

    def size(self):
        return _InterRangeMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _InterRangeMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _InterRangeMsgPayload.TimeVector_begin(self)

    def end(self):
        return _InterRangeMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _InterRangeMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _InterRangeMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _InterRangeMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _InterRangeMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _InterRangeMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _InterRangeMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _InterRangeMsgPayload.TimeVector_swiginit(self, _InterRangeMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _InterRangeMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _InterRangeMsgPayload.TimeVector_front(self)

    def back(self):
        return _InterRangeMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _InterRangeMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _InterRangeMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _InterRangeMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _InterRangeMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _InterRangeMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _InterRangeMsgPayload.delete_TimeVector

# Register TimeVector in _InterRangeMsgPayload:
_InterRangeMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InterRangeMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InterRangeMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _InterRangeMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _InterRangeMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _InterRangeMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InterRangeMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InterRangeMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InterRangeMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InterRangeMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InterRangeMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _InterRangeMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _InterRangeMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _InterRangeMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _InterRangeMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _InterRangeMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _InterRangeMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _InterRangeMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _InterRangeMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _InterRangeMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _InterRangeMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _InterRangeMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _InterRangeMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _InterRangeMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _InterRangeMsgPayload.DoubleVector_swiginit(self, _InterRangeMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _InterRangeMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _InterRangeMsgPayload.DoubleVector_front(self)

    def back(self):
        return _InterRangeMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _InterRangeMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _InterRangeMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _InterRangeMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _InterRangeMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _InterRangeMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _InterRangeMsgPayload.delete_DoubleVector

# Register DoubleVector in _InterRangeMsgPayload:
_InterRangeMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InterRangeMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InterRangeMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _InterRangeMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _InterRangeMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _InterRangeMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InterRangeMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InterRangeMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InterRangeMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InterRangeMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InterRangeMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _InterRangeMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _InterRangeMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _InterRangeMsgPayload.StringVector_empty(self)

    def size(self):
        return _InterRangeMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _InterRangeMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _InterRangeMsgPayload.StringVector_begin(self)

    def end(self):
        return _InterRangeMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _InterRangeMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _InterRangeMsgPayload.StringVector_rend(self)

    def clear(self):
        return _InterRangeMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _InterRangeMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _InterRangeMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _InterRangeMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _InterRangeMsgPayload.StringVector_swiginit(self, _InterRangeMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _InterRangeMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _InterRangeMsgPayload.StringVector_front(self)

    def back(self):
        return _InterRangeMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _InterRangeMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _InterRangeMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _InterRangeMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _InterRangeMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _InterRangeMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _InterRangeMsgPayload.delete_StringVector

# Register StringVector in _InterRangeMsgPayload:
_InterRangeMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _InterRangeMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _InterRangeMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _InterRangeMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _InterRangeMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _InterRangeMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _InterRangeMsgPayload.NANO2SEC
SEC2NANO = _InterRangeMsgPayload.SEC2NANO
SEC2HOUR = _InterRangeMsgPayload.SEC2HOUR
BOOL_FALSE = _InterRangeMsgPayload.BOOL_FALSE
BOOL_TRUE = _InterRangeMsgPayload.BOOL_TRUE
AVAILABLE = _InterRangeMsgPayload.AVAILABLE
UNAVAILABLE = _InterRangeMsgPayload.UNAVAILABLE
BalancedWheels = _InterRangeMsgPayload.BalancedWheels
JitterSimple = _InterRangeMsgPayload.JitterSimple
JitterFullyCoupled = _InterRangeMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InterRangeMsgPayload.SysModel_swiginit(self, _InterRangeMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _InterRangeMsgPayload.delete_SysModel

    def SelfInit(self):
        return _InterRangeMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _InterRangeMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _InterRangeMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _InterRangeMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_InterRangeMsgPayload.SysModel_ModelTag_get, _InterRangeMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_InterRangeMsgPayload.SysModel_CallCounts_get, _InterRangeMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_InterRangeMsgPayload.SysModel_RNGSeed_get, _InterRangeMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_InterRangeMsgPayload.SysModel_moduleID_get, _InterRangeMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _InterRangeMsgPayload:
_InterRangeMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _InterRangeMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _InterRangeMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _InterRangeMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _InterRangeMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _InterRangeMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _InterRangeMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _InterRangeMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _InterRangeMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _InterRangeMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _InterRangeMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _InterRangeMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _InterRangeMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

MAX_SC_BUF = _InterRangeMsgPayload.MAX_SC_BUF
class InterRangeMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    range = property(_InterRangeMsgPayload.InterRangeMsgPayload_range_get, _InterRangeMsgPayload.InterRangeMsgPayload_range_set)

    def __init__(self):
        _InterRangeMsgPayload.InterRangeMsgPayload_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsgPayload())
    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsgPayload

# Register InterRangeMsgPayload in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsgPayload_swigregister(InterRangeMsgPayload)
class InterRangeMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_InterRangeMsgPayload.InterRangeMsgReader_bskLogger_get, _InterRangeMsgPayload.InterRangeMsgReader_bskLogger_set)
    zeroMsgPayload = property(_InterRangeMsgPayload.InterRangeMsgReader_zeroMsgPayload_get, _InterRangeMsgPayload.InterRangeMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _InterRangeMsgPayload.InterRangeMsgReader_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsgReader(*args))

    def __call__(self):
        return _InterRangeMsgPayload.InterRangeMsgReader___call__(self)

    def isLinked(self):
        return _InterRangeMsgPayload.InterRangeMsgReader_isLinked(self)

    def isWritten(self):
        return _InterRangeMsgPayload.InterRangeMsgReader_isWritten(self)

    def timeWritten(self):
        return _InterRangeMsgPayload.InterRangeMsgReader_timeWritten(self)

    def moduleID(self):
        return _InterRangeMsgPayload.InterRangeMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _InterRangeMsgPayload.InterRangeMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _InterRangeMsgPayload.InterRangeMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _InterRangeMsgPayload.InterRangeMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _InterRangeMsgPayload.InterRangeMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _InterRangeMsgPayload.InterRangeMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == InterRangeMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.InterRangeMsgPayload import InterRangeMsg_C
            if type(source) == InterRangeMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<InterRangeMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == InterRangeMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.InterRangeMsgPayload import InterRangeMsg_C
        except ImportError:
            return 0

        if type(source) == InterRangeMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsgReader

# Register InterRangeMsgReader in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsgReader_swigregister(InterRangeMsgReader)
class InterRangeMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InterRangeMsgPayload.InterRangeMsgWriter_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _InterRangeMsgPayload.InterRangeMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsgWriter

# Register InterRangeMsgWriter in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsgWriter_swigregister(InterRangeMsgWriter)
class InterRangeMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_InterRangeMsgPayload.InterRangeMsg_write_get, _InterRangeMsgPayload.InterRangeMsg_write_set)

    def addSubscriber(self):
        return _InterRangeMsgPayload.InterRangeMsg_addSubscriber(self)

    def addAuthor(self):
        return _InterRangeMsgPayload.InterRangeMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _InterRangeMsgPayload.InterRangeMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _InterRangeMsgPayload.InterRangeMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _InterRangeMsgPayload.InterRangeMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_InterRangeMsgPayload.InterRangeMsg_zeroMsgPayload_get, _InterRangeMsgPayload.InterRangeMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _InterRangeMsgPayload.InterRangeMsg_isLinked(self)

    def getPayloadSize(self):
        return _InterRangeMsgPayload.InterRangeMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _InterRangeMsgPayload.InterRangeMsg_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsg())
    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsg

# Register InterRangeMsg in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsg_swigregister(InterRangeMsg)
class InterRangeMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InterRangeMsgPayload.InterRangeMsgRecorder_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsgRecorder(*args))
    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsgRecorder

    def SelfInit(self):
        return _InterRangeMsgPayload.InterRangeMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _InterRangeMsgPayload.InterRangeMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _InterRangeMsgPayload.InterRangeMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _InterRangeMsgPayload.InterRangeMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _InterRangeMsgPayload.InterRangeMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _InterRangeMsgPayload.InterRangeMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _InterRangeMsgPayload.InterRangeMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _InterRangeMsgPayload.InterRangeMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _InterRangeMsgPayload.InterRangeMsgRecorder_clear(self)
    bskLogger = property(_InterRangeMsgPayload.InterRangeMsgRecorder_bskLogger_get, _InterRangeMsgPayload.InterRangeMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _InterRangeMsgPayload.InterRangeMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register InterRangeMsgRecorder in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsgRecorder_swigregister(InterRangeMsgRecorder)
class InterRangeMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___bool__(self)

    def __len__(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_pop(self)

    def append(self, x):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_append(self, x)

    def empty(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_empty(self)

    def size(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_size(self)

    def swap(self, v):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_swap(self, v)

    def begin(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_begin(self)

    def end(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_end(self)

    def rbegin(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_rbegin(self)

    def rend(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_rend(self)

    def clear(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _InterRangeMsgPayload.InterRangeMsgPayloadVector_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsgPayloadVector(*args))

    def push_back(self, x):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_push_back(self, x)

    def front(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_front(self)

    def back(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _InterRangeMsgPayload.InterRangeMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsgPayloadVector

# Register InterRangeMsgPayloadVector in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsgPayloadVector_swigregister(InterRangeMsgPayloadVector)
class InterRangeMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_empty(self)

    def size(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_begin(self)

    def end(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_rend(self)

    def clear(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_front(self)

    def back(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsgOutMsgsVector

# Register InterRangeMsgOutMsgsVector in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsgOutMsgsVector_swigregister(InterRangeMsgOutMsgsVector)
class InterRangeMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsgOutMsgsPtrVector

# Register InterRangeMsgOutMsgsPtrVector in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsgOutMsgsPtrVector_swigregister(InterRangeMsgOutMsgsPtrVector)
class InterRangeMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_pop(self)

    def append(self, x):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_append(self, x)

    def empty(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_empty(self)

    def size(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_size(self)

    def swap(self, v):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_begin(self)

    def end(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_end(self)

    def rbegin(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_rend(self)

    def clear(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _InterRangeMsgPayload.InterRangeMsgInMsgsVector_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsgInMsgsVector(*args))

    def push_back(self, x):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_front(self)

    def back(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _InterRangeMsgPayload.InterRangeMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsgInMsgsVector

# Register InterRangeMsgInMsgsVector in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsgInMsgsVector_swigregister(InterRangeMsgInMsgsVector)
class InterRangeMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_InterRangeMsgPayload.InterRangeMsg_C_header_get, _InterRangeMsgPayload.InterRangeMsg_C_header_set)
    payload = property(_InterRangeMsgPayload.InterRangeMsg_C_payload_get, _InterRangeMsgPayload.InterRangeMsg_C_payload_set)
    payloadPointer = property(_InterRangeMsgPayload.InterRangeMsg_C_payloadPointer_get, _InterRangeMsgPayload.InterRangeMsg_C_payloadPointer_set)
    headerPointer = property(_InterRangeMsgPayload.InterRangeMsg_C_headerPointer_get, _InterRangeMsgPayload.InterRangeMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import InterRangeMsg
        if type(source) == type(self):
            InterRangeMsg_C_subscribe(self, source)
        elif type(source) == InterRangeMsg:
            InterRangeMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe InterRangeMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import InterRangeMsg
        if type(source) == type(self):
            return (InterRangeMsg_C_isSubscribedTo(self, source))
        elif type(source) == InterRangeMsg:
            return (InterRangeMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import InterRangeMsgRecorder
        self.header.isLinked = 1
        return InterRangeMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        InterRangeMsg_C_addAuthor(self, self)
        if data:
            InterRangeMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        InterRangeMsg_C_addAuthor(self, self)
        InterRangeMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return InterRangeMsg_C_read(self)


    def __init__(self):
        _InterRangeMsgPayload.InterRangeMsg_C_swiginit(self, _InterRangeMsgPayload.new_InterRangeMsg_C())
    __swig_destroy__ = _InterRangeMsgPayload.delete_InterRangeMsg_C

# Register InterRangeMsg_C in _InterRangeMsgPayload:
_InterRangeMsgPayload.InterRangeMsg_C_swigregister(InterRangeMsg_C)

def InterRangeMsg_cpp_subscribe(subscriber, source):
    return _InterRangeMsgPayload.InterRangeMsg_cpp_subscribe(subscriber, source)

def InterRangeMsg_C_subscribe(subscriber, source):
    return _InterRangeMsgPayload.InterRangeMsg_C_subscribe(subscriber, source)

def InterRangeMsg_C_isSubscribedTo(subscriber, source):
    return _InterRangeMsgPayload.InterRangeMsg_C_isSubscribedTo(subscriber, source)

def InterRangeMsg_cpp_isSubscribedTo(subscriber, source):
    return _InterRangeMsgPayload.InterRangeMsg_cpp_isSubscribedTo(subscriber, source)

def InterRangeMsg_C_addAuthor(coowner, data):
    return _InterRangeMsgPayload.InterRangeMsg_C_addAuthor(coowner, data)

def InterRangeMsg_C_init(owner):
    return _InterRangeMsgPayload.InterRangeMsg_C_init(owner)

def InterRangeMsg_C_isLinked(data):
    return _InterRangeMsgPayload.InterRangeMsg_C_isLinked(data)

def InterRangeMsg_C_isWritten(data):
    return _InterRangeMsgPayload.InterRangeMsg_C_isWritten(data)

def InterRangeMsg_C_timeWritten(data):
    return _InterRangeMsgPayload.InterRangeMsg_C_timeWritten(data)

def InterRangeMsg_C_moduleID(data):
    return _InterRangeMsgPayload.InterRangeMsg_C_moduleID(data)

def InterRangeMsg_C_write(data, destination, moduleID, callTime):
    return _InterRangeMsgPayload.InterRangeMsg_C_write(data, destination, moduleID, callTime)

def InterRangeMsg_C_read(source):
    return _InterRangeMsgPayload.InterRangeMsg_C_read(source)

def InterRangeMsg_C_zeroMsgPayload():
    return _InterRangeMsgPayload.InterRangeMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_InterRangeMsgPayload.MsgHeader_isLinked_get, _InterRangeMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_InterRangeMsgPayload.MsgHeader_isWritten_get, _InterRangeMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_InterRangeMsgPayload.MsgHeader_timeWritten_get, _InterRangeMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_InterRangeMsgPayload.MsgHeader_moduleID_get, _InterRangeMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _InterRangeMsgPayload.MsgHeader_swiginit(self, _InterRangeMsgPayload.new_MsgHeader())
    __swig_destroy__ = _InterRangeMsgPayload.delete_MsgHeader

# Register MsgHeader in _InterRangeMsgPayload:
_InterRangeMsgPayload.MsgHeader_swigregister(MsgHeader)

