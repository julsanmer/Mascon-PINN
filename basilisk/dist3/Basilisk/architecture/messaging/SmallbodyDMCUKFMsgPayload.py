# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SmallbodyDMCUKFMsgPayload
else:
    import _SmallbodyDMCUKFMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SmallbodyDMCUKFMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SmallbodyDMCUKFMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SmallbodyDMCUKFMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SmallbodyDMCUKFMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SmallbodyDMCUKFMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SmallbodyDMCUKFMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SmallbodyDMCUKFMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SmallbodyDMCUKFMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SmallbodyDMCUKFMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SmallbodyDMCUKFMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SmallbodyDMCUKFMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SmallbodyDMCUKFMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SmallbodyDMCUKFMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SmallbodyDMCUKFMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SmallbodyDMCUKFMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SmallbodyDMCUKFMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.TimeVector_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_front(self)

    def back(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SmallbodyDMCUKFMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_TimeVector

# Register TimeVector in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.DoubleVector_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SmallbodyDMCUKFMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_DoubleVector

# Register DoubleVector in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SmallbodyDMCUKFMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_empty(self)

    def size(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SmallbodyDMCUKFMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_begin(self)

    def end(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SmallbodyDMCUKFMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.StringVector_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SmallbodyDMCUKFMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_front(self)

    def back(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SmallbodyDMCUKFMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallbodyDMCUKFMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SmallbodyDMCUKFMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SmallbodyDMCUKFMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SmallbodyDMCUKFMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_StringVector

# Register StringVector in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SmallbodyDMCUKFMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SmallbodyDMCUKFMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SmallbodyDMCUKFMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SmallbodyDMCUKFMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SmallbodyDMCUKFMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SmallbodyDMCUKFMsgPayload.NANO2SEC
SEC2NANO = _SmallbodyDMCUKFMsgPayload.SEC2NANO
SEC2HOUR = _SmallbodyDMCUKFMsgPayload.SEC2HOUR
BOOL_FALSE = _SmallbodyDMCUKFMsgPayload.BOOL_FALSE
BOOL_TRUE = _SmallbodyDMCUKFMsgPayload.BOOL_TRUE
AVAILABLE = _SmallbodyDMCUKFMsgPayload.AVAILABLE
UNAVAILABLE = _SmallbodyDMCUKFMsgPayload.UNAVAILABLE
BalancedWheels = _SmallbodyDMCUKFMsgPayload.BalancedWheels
JitterSimple = _SmallbodyDMCUKFMsgPayload.JitterSimple
JitterFullyCoupled = _SmallbodyDMCUKFMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.SysModel_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SmallbodyDMCUKFMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SmallbodyDMCUKFMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallbodyDMCUKFMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallbodyDMCUKFMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SmallbodyDMCUKFMsgPayload.SysModel_ModelTag_get, _SmallbodyDMCUKFMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SmallbodyDMCUKFMsgPayload.SysModel_CallCounts_get, _SmallbodyDMCUKFMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SmallbodyDMCUKFMsgPayload.SysModel_RNGSeed_get, _SmallbodyDMCUKFMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SmallbodyDMCUKFMsgPayload.SysModel_moduleID_get, _SmallbodyDMCUKFMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SmallbodyDMCUKFMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SmallbodyDMCUKFMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SmallbodyDMCUKFMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SmallbodyDMCUKFMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SmallbodyDMCUKFMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SmallbodyDMCUKFMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SmallbodyDMCUKFMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SmallbodyDMCUKFMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SmallbodyDMCUKFMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SmallbodyDMCUKFMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SmallbodyDMCUKFMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SmallbodyDMCUKFMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SmallbodyDMCUKFMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_state_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_state_set)
    covar = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_covar_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_covar_set)
    meas = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_meas_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_meas_set)
    tcpu = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_tcpu_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_tcpu_set)

    def __init__(self):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsgPayload())
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsgPayload

# Register SmallbodyDMCUKFMsgPayload in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayload_swigregister(SmallbodyDMCUKFMsgPayload)
class SmallbodyDMCUKFMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_bskLogger_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_zeroMsgPayload_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsgReader(*args))

    def __call__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader___call__(self)

    def isLinked(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_isLinked(self)

    def isWritten(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_isWritten(self)

    def timeWritten(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_timeWritten(self)

    def moduleID(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SmallbodyDMCUKFMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SmallbodyDMCUKFMsgPayload import SmallbodyDMCUKFMsg_C
            if type(source) == SmallbodyDMCUKFMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SmallbodyDMCUKFMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SmallbodyDMCUKFMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SmallbodyDMCUKFMsgPayload import SmallbodyDMCUKFMsg_C
        except ImportError:
            return 0

        if type(source) == SmallbodyDMCUKFMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsgReader

# Register SmallbodyDMCUKFMsgReader in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgReader_swigregister(SmallbodyDMCUKFMsgReader)
class SmallbodyDMCUKFMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgWriter_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsgWriter

# Register SmallbodyDMCUKFMsgWriter in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgWriter_swigregister(SmallbodyDMCUKFMsgWriter)
class SmallbodyDMCUKFMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_write_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_write_set)

    def addSubscriber(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_addSubscriber(self)

    def addAuthor(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_zeroMsgPayload_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_isLinked(self)

    def getPayloadSize(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsg())
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsg

# Register SmallbodyDMCUKFMsg in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_swigregister(SmallbodyDMCUKFMsg)
class SmallbodyDMCUKFMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsgRecorder(*args))
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsgRecorder

    def SelfInit(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_clear(self)
    bskLogger = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_bskLogger_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SmallbodyDMCUKFMsgRecorder in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgRecorder_swigregister(SmallbodyDMCUKFMsgRecorder)
class SmallbodyDMCUKFMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_pop(self)

    def append(self, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_append(self, x)

    def empty(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_empty(self)

    def size(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_size(self)

    def swap(self, v):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_begin(self)

    def end(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_end(self)

    def rbegin(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_rend(self)

    def clear(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsgPayloadVector(*args))

    def push_back(self, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_front(self)

    def back(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsgPayloadVector

# Register SmallbodyDMCUKFMsgPayloadVector in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgPayloadVector_swigregister(SmallbodyDMCUKFMsgPayloadVector)
class SmallbodyDMCUKFMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_empty(self)

    def size(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_begin(self)

    def end(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_front(self)

    def back(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsgOutMsgsVector

# Register SmallbodyDMCUKFMsgOutMsgsVector in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsVector_swigregister(SmallbodyDMCUKFMsgOutMsgsVector)
class SmallbodyDMCUKFMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsgOutMsgsPtrVector

# Register SmallbodyDMCUKFMsgOutMsgsPtrVector in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgOutMsgsPtrVector_swigregister(SmallbodyDMCUKFMsgOutMsgsPtrVector)
class SmallbodyDMCUKFMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_empty(self)

    def size(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_begin(self)

    def end(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_rend(self)

    def clear(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_front(self)

    def back(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsgInMsgsVector

# Register SmallbodyDMCUKFMsgInMsgsVector in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsgInMsgsVector_swigregister(SmallbodyDMCUKFMsgInMsgsVector)
class SmallbodyDMCUKFMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_header_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_header_set)
    payload = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_payload_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_payload_set)
    payloadPointer = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_payloadPointer_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_payloadPointer_set)
    headerPointer = property(_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_headerPointer_get, _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SmallbodyDMCUKFMsg
        if type(source) == type(self):
            SmallbodyDMCUKFMsg_C_subscribe(self, source)
        elif type(source) == SmallbodyDMCUKFMsg:
            SmallbodyDMCUKFMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SmallbodyDMCUKFMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SmallbodyDMCUKFMsg
        if type(source) == type(self):
            return (SmallbodyDMCUKFMsg_C_isSubscribedTo(self, source))
        elif type(source) == SmallbodyDMCUKFMsg:
            return (SmallbodyDMCUKFMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import SmallbodyDMCUKFMsgRecorder
        self.header.isLinked = 1
        return SmallbodyDMCUKFMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SmallbodyDMCUKFMsg_C_addAuthor(self, self)
        if data:
            SmallbodyDMCUKFMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SmallbodyDMCUKFMsg_C_addAuthor(self, self)
        SmallbodyDMCUKFMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SmallbodyDMCUKFMsg_C_read(self)


    def __init__(self):
        _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_SmallbodyDMCUKFMsg_C())
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_SmallbodyDMCUKFMsg_C

# Register SmallbodyDMCUKFMsg_C in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_swigregister(SmallbodyDMCUKFMsg_C)

def SmallbodyDMCUKFMsg_cpp_subscribe(subscriber, source):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_cpp_subscribe(subscriber, source)

def SmallbodyDMCUKFMsg_C_subscribe(subscriber, source):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_subscribe(subscriber, source)

def SmallbodyDMCUKFMsg_C_isSubscribedTo(subscriber, source):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_isSubscribedTo(subscriber, source)

def SmallbodyDMCUKFMsg_cpp_isSubscribedTo(subscriber, source):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_cpp_isSubscribedTo(subscriber, source)

def SmallbodyDMCUKFMsg_C_addAuthor(coowner, data):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_addAuthor(coowner, data)

def SmallbodyDMCUKFMsg_C_init(owner):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_init(owner)

def SmallbodyDMCUKFMsg_C_isLinked(data):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_isLinked(data)

def SmallbodyDMCUKFMsg_C_isWritten(data):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_isWritten(data)

def SmallbodyDMCUKFMsg_C_timeWritten(data):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_timeWritten(data)

def SmallbodyDMCUKFMsg_C_moduleID(data):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_moduleID(data)

def SmallbodyDMCUKFMsg_C_write(data, destination, moduleID, callTime):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_write(data, destination, moduleID, callTime)

def SmallbodyDMCUKFMsg_C_read(source):
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_read(source)

def SmallbodyDMCUKFMsg_C_zeroMsgPayload():
    return _SmallbodyDMCUKFMsgPayload.SmallbodyDMCUKFMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SmallbodyDMCUKFMsgPayload.MsgHeader_isLinked_get, _SmallbodyDMCUKFMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SmallbodyDMCUKFMsgPayload.MsgHeader_isWritten_get, _SmallbodyDMCUKFMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SmallbodyDMCUKFMsgPayload.MsgHeader_timeWritten_get, _SmallbodyDMCUKFMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SmallbodyDMCUKFMsgPayload.MsgHeader_moduleID_get, _SmallbodyDMCUKFMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SmallbodyDMCUKFMsgPayload.MsgHeader_swiginit(self, _SmallbodyDMCUKFMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SmallbodyDMCUKFMsgPayload.delete_MsgHeader

# Register MsgHeader in _SmallbodyDMCUKFMsgPayload:
_SmallbodyDMCUKFMsgPayload.MsgHeader_swigregister(MsgHeader)

