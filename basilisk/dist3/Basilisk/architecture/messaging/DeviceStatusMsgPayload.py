# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DeviceStatusMsgPayload
else:
    import _DeviceStatusMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DeviceStatusMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DeviceStatusMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DeviceStatusMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DeviceStatusMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DeviceStatusMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DeviceStatusMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DeviceStatusMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DeviceStatusMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DeviceStatusMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DeviceStatusMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DeviceStatusMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DeviceStatusMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DeviceStatusMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DeviceStatusMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DeviceStatusMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DeviceStatusMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DeviceStatusMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DeviceStatusMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DeviceStatusMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DeviceStatusMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DeviceStatusMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DeviceStatusMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DeviceStatusMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DeviceStatusMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DeviceStatusMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DeviceStatusMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DeviceStatusMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DeviceStatusMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DeviceStatusMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DeviceStatusMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DeviceStatusMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DeviceStatusMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceStatusMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceStatusMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DeviceStatusMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DeviceStatusMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceStatusMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceStatusMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceStatusMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceStatusMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceStatusMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceStatusMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DeviceStatusMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DeviceStatusMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DeviceStatusMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DeviceStatusMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DeviceStatusMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DeviceStatusMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DeviceStatusMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DeviceStatusMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DeviceStatusMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DeviceStatusMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DeviceStatusMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DeviceStatusMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DeviceStatusMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceStatusMsgPayload.TimeVector_swiginit(self, _DeviceStatusMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DeviceStatusMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DeviceStatusMsgPayload.TimeVector_front(self)

    def back(self):
        return _DeviceStatusMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DeviceStatusMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceStatusMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceStatusMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceStatusMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DeviceStatusMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_TimeVector

# Register TimeVector in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceStatusMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceStatusMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DeviceStatusMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DeviceStatusMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceStatusMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceStatusMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceStatusMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceStatusMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceStatusMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceStatusMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DeviceStatusMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DeviceStatusMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DeviceStatusMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DeviceStatusMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DeviceStatusMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DeviceStatusMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DeviceStatusMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DeviceStatusMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DeviceStatusMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DeviceStatusMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DeviceStatusMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DeviceStatusMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DeviceStatusMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceStatusMsgPayload.DoubleVector_swiginit(self, _DeviceStatusMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DeviceStatusMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DeviceStatusMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DeviceStatusMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DeviceStatusMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceStatusMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceStatusMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceStatusMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DeviceStatusMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DoubleVector

# Register DoubleVector in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceStatusMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceStatusMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DeviceStatusMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DeviceStatusMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceStatusMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceStatusMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceStatusMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceStatusMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceStatusMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceStatusMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DeviceStatusMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DeviceStatusMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DeviceStatusMsgPayload.StringVector_empty(self)

    def size(self):
        return _DeviceStatusMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DeviceStatusMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DeviceStatusMsgPayload.StringVector_begin(self)

    def end(self):
        return _DeviceStatusMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DeviceStatusMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DeviceStatusMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DeviceStatusMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DeviceStatusMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DeviceStatusMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DeviceStatusMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceStatusMsgPayload.StringVector_swiginit(self, _DeviceStatusMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DeviceStatusMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DeviceStatusMsgPayload.StringVector_front(self)

    def back(self):
        return _DeviceStatusMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DeviceStatusMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceStatusMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceStatusMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceStatusMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DeviceStatusMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_StringVector

# Register StringVector in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DeviceStatusMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DeviceStatusMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DeviceStatusMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DeviceStatusMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DeviceStatusMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DeviceStatusMsgPayload.NANO2SEC
SEC2NANO = _DeviceStatusMsgPayload.SEC2NANO
SEC2HOUR = _DeviceStatusMsgPayload.SEC2HOUR
BOOL_FALSE = _DeviceStatusMsgPayload.BOOL_FALSE
BOOL_TRUE = _DeviceStatusMsgPayload.BOOL_TRUE
AVAILABLE = _DeviceStatusMsgPayload.AVAILABLE
UNAVAILABLE = _DeviceStatusMsgPayload.UNAVAILABLE
BalancedWheels = _DeviceStatusMsgPayload.BalancedWheels
JitterSimple = _DeviceStatusMsgPayload.JitterSimple
JitterFullyCoupled = _DeviceStatusMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DeviceStatusMsgPayload.SysModel_swiginit(self, _DeviceStatusMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DeviceStatusMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DeviceStatusMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DeviceStatusMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DeviceStatusMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DeviceStatusMsgPayload.SysModel_ModelTag_get, _DeviceStatusMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DeviceStatusMsgPayload.SysModel_CallCounts_get, _DeviceStatusMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DeviceStatusMsgPayload.SysModel_RNGSeed_get, _DeviceStatusMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DeviceStatusMsgPayload.SysModel_moduleID_get, _DeviceStatusMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DeviceStatusMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DeviceStatusMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DeviceStatusMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DeviceStatusMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DeviceStatusMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DeviceStatusMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DeviceStatusMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DeviceStatusMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DeviceStatusMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DeviceStatusMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DeviceStatusMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DeviceStatusMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

On = _DeviceStatusMsgPayload.On
Off = _DeviceStatusMsgPayload.Off
class DeviceStatusMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceStatus = property(_DeviceStatusMsgPayload.DeviceStatusMsgPayload_deviceStatus_get, _DeviceStatusMsgPayload.DeviceStatusMsgPayload_deviceStatus_set)

    def __init__(self):
        _DeviceStatusMsgPayload.DeviceStatusMsgPayload_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsgPayload())
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsgPayload

# Register DeviceStatusMsgPayload in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsgPayload_swigregister(DeviceStatusMsgPayload)
class DeviceStatusMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DeviceStatusMsgPayload.DeviceStatusMsgReader_bskLogger_get, _DeviceStatusMsgPayload.DeviceStatusMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DeviceStatusMsgPayload.DeviceStatusMsgReader_zeroMsgPayload_get, _DeviceStatusMsgPayload.DeviceStatusMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DeviceStatusMsgPayload.DeviceStatusMsgReader_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsgReader(*args))

    def __call__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader___call__(self)

    def isLinked(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader_isLinked(self)

    def isWritten(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader_isWritten(self)

    def timeWritten(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader_timeWritten(self)

    def moduleID(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _DeviceStatusMsgPayload.DeviceStatusMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DeviceStatusMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DeviceStatusMsgPayload import DeviceStatusMsg_C
            if type(source) == DeviceStatusMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DeviceStatusMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DeviceStatusMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DeviceStatusMsgPayload import DeviceStatusMsg_C
        except ImportError:
            return 0

        if type(source) == DeviceStatusMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsgReader

# Register DeviceStatusMsgReader in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsgReader_swigregister(DeviceStatusMsgReader)
class DeviceStatusMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DeviceStatusMsgPayload.DeviceStatusMsgWriter_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DeviceStatusMsgPayload.DeviceStatusMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsgWriter

# Register DeviceStatusMsgWriter in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsgWriter_swigregister(DeviceStatusMsgWriter)
class DeviceStatusMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DeviceStatusMsgPayload.DeviceStatusMsg_write_get, _DeviceStatusMsgPayload.DeviceStatusMsg_write_set)

    def addSubscriber(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsg_addSubscriber(self)

    def addAuthor(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DeviceStatusMsgPayload.DeviceStatusMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DeviceStatusMsgPayload.DeviceStatusMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DeviceStatusMsgPayload.DeviceStatusMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DeviceStatusMsgPayload.DeviceStatusMsg_zeroMsgPayload_get, _DeviceStatusMsgPayload.DeviceStatusMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsg_isLinked(self)

    def getPayloadSize(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DeviceStatusMsgPayload.DeviceStatusMsg_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsg())
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsg

# Register DeviceStatusMsg in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsg_swigregister(DeviceStatusMsg)
class DeviceStatusMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsgRecorder(*args))
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsgRecorder

    def SelfInit(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_clear(self)
    bskLogger = property(_DeviceStatusMsgPayload.DeviceStatusMsgRecorder_bskLogger_get, _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DeviceStatusMsgPayload.DeviceStatusMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DeviceStatusMsgRecorder in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsgRecorder_swigregister(DeviceStatusMsgRecorder)
class DeviceStatusMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_pop(self)

    def append(self, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_append(self, x)

    def empty(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_empty(self)

    def size(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_size(self)

    def swap(self, v):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_begin(self)

    def end(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_end(self)

    def rbegin(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_rend(self)

    def clear(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsgPayloadVector(*args))

    def push_back(self, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_front(self)

    def back(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsgPayloadVector

# Register DeviceStatusMsgPayloadVector in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsgPayloadVector_swigregister(DeviceStatusMsgPayloadVector)
class DeviceStatusMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_empty(self)

    def size(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_begin(self)

    def end(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_front(self)

    def back(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsgOutMsgsVector

# Register DeviceStatusMsgOutMsgsVector in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsVector_swigregister(DeviceStatusMsgOutMsgsVector)
class DeviceStatusMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsgOutMsgsPtrVector

# Register DeviceStatusMsgOutMsgsPtrVector in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsgOutMsgsPtrVector_swigregister(DeviceStatusMsgOutMsgsPtrVector)
class DeviceStatusMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_empty(self)

    def size(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_begin(self)

    def end(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_rend(self)

    def clear(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_front(self)

    def back(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsgInMsgsVector

# Register DeviceStatusMsgInMsgsVector in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsgInMsgsVector_swigregister(DeviceStatusMsgInMsgsVector)
class DeviceStatusMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_DeviceStatusMsgPayload.DeviceStatusMsg_C_header_get, _DeviceStatusMsgPayload.DeviceStatusMsg_C_header_set)
    payload = property(_DeviceStatusMsgPayload.DeviceStatusMsg_C_payload_get, _DeviceStatusMsgPayload.DeviceStatusMsg_C_payload_set)
    payloadPointer = property(_DeviceStatusMsgPayload.DeviceStatusMsg_C_payloadPointer_get, _DeviceStatusMsgPayload.DeviceStatusMsg_C_payloadPointer_set)
    headerPointer = property(_DeviceStatusMsgPayload.DeviceStatusMsg_C_headerPointer_get, _DeviceStatusMsgPayload.DeviceStatusMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import DeviceStatusMsg
        if type(source) == type(self):
            DeviceStatusMsg_C_subscribe(self, source)
        elif type(source) == DeviceStatusMsg:
            DeviceStatusMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe DeviceStatusMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import DeviceStatusMsg
        if type(source) == type(self):
            return (DeviceStatusMsg_C_isSubscribedTo(self, source))
        elif type(source) == DeviceStatusMsg:
            return (DeviceStatusMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import DeviceStatusMsgRecorder
        self.header.isLinked = 1
        return DeviceStatusMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        DeviceStatusMsg_C_addAuthor(self, self)
        if data:
            DeviceStatusMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        DeviceStatusMsg_C_addAuthor(self, self)
        DeviceStatusMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return DeviceStatusMsg_C_read(self)


    def __init__(self):
        _DeviceStatusMsgPayload.DeviceStatusMsg_C_swiginit(self, _DeviceStatusMsgPayload.new_DeviceStatusMsg_C())
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_DeviceStatusMsg_C

# Register DeviceStatusMsg_C in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.DeviceStatusMsg_C_swigregister(DeviceStatusMsg_C)

def DeviceStatusMsg_cpp_subscribe(subscriber, source):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_cpp_subscribe(subscriber, source)

def DeviceStatusMsg_C_subscribe(subscriber, source):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_subscribe(subscriber, source)

def DeviceStatusMsg_C_isSubscribedTo(subscriber, source):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_isSubscribedTo(subscriber, source)

def DeviceStatusMsg_cpp_isSubscribedTo(subscriber, source):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_cpp_isSubscribedTo(subscriber, source)

def DeviceStatusMsg_C_addAuthor(coowner, data):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_addAuthor(coowner, data)

def DeviceStatusMsg_C_init(owner):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_init(owner)

def DeviceStatusMsg_C_isLinked(data):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_isLinked(data)

def DeviceStatusMsg_C_isWritten(data):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_isWritten(data)

def DeviceStatusMsg_C_timeWritten(data):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_timeWritten(data)

def DeviceStatusMsg_C_moduleID(data):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_moduleID(data)

def DeviceStatusMsg_C_write(data, destination, moduleID, callTime):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_write(data, destination, moduleID, callTime)

def DeviceStatusMsg_C_read(source):
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_read(source)

def DeviceStatusMsg_C_zeroMsgPayload():
    return _DeviceStatusMsgPayload.DeviceStatusMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_DeviceStatusMsgPayload.MsgHeader_isLinked_get, _DeviceStatusMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_DeviceStatusMsgPayload.MsgHeader_isWritten_get, _DeviceStatusMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_DeviceStatusMsgPayload.MsgHeader_timeWritten_get, _DeviceStatusMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_DeviceStatusMsgPayload.MsgHeader_moduleID_get, _DeviceStatusMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _DeviceStatusMsgPayload.MsgHeader_swiginit(self, _DeviceStatusMsgPayload.new_MsgHeader())
    __swig_destroy__ = _DeviceStatusMsgPayload.delete_MsgHeader

# Register MsgHeader in _DeviceStatusMsgPayload:
_DeviceStatusMsgPayload.MsgHeader_swigregister(MsgHeader)

