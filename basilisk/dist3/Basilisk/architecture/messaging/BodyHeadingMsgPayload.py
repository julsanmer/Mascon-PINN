# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BodyHeadingMsgPayload
else:
    import _BodyHeadingMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_SwigPyIterator

    def value(self):
        return _BodyHeadingMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BodyHeadingMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BodyHeadingMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BodyHeadingMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BodyHeadingMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BodyHeadingMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _BodyHeadingMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _BodyHeadingMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _BodyHeadingMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BodyHeadingMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BodyHeadingMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BodyHeadingMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BodyHeadingMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BodyHeadingMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BodyHeadingMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BodyHeadingMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _BodyHeadingMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _BodyHeadingMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _BodyHeadingMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _BodyHeadingMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _BodyHeadingMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _BodyHeadingMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _BodyHeadingMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _BodyHeadingMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _BodyHeadingMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _BodyHeadingMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _BodyHeadingMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _BodyHeadingMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _BodyHeadingMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _BodyHeadingMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _BodyHeadingMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _BodyHeadingMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BodyHeadingMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BodyHeadingMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _BodyHeadingMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _BodyHeadingMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _BodyHeadingMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BodyHeadingMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BodyHeadingMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BodyHeadingMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BodyHeadingMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BodyHeadingMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _BodyHeadingMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _BodyHeadingMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _BodyHeadingMsgPayload.TimeVector_empty(self)

    def size(self):
        return _BodyHeadingMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _BodyHeadingMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _BodyHeadingMsgPayload.TimeVector_begin(self)

    def end(self):
        return _BodyHeadingMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _BodyHeadingMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _BodyHeadingMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _BodyHeadingMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _BodyHeadingMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _BodyHeadingMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _BodyHeadingMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _BodyHeadingMsgPayload.TimeVector_swiginit(self, _BodyHeadingMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _BodyHeadingMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _BodyHeadingMsgPayload.TimeVector_front(self)

    def back(self):
        return _BodyHeadingMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _BodyHeadingMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _BodyHeadingMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _BodyHeadingMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _BodyHeadingMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _BodyHeadingMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_TimeVector

# Register TimeVector in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BodyHeadingMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BodyHeadingMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _BodyHeadingMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _BodyHeadingMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _BodyHeadingMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BodyHeadingMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BodyHeadingMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BodyHeadingMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BodyHeadingMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BodyHeadingMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _BodyHeadingMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _BodyHeadingMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _BodyHeadingMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _BodyHeadingMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _BodyHeadingMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _BodyHeadingMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _BodyHeadingMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _BodyHeadingMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _BodyHeadingMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _BodyHeadingMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _BodyHeadingMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _BodyHeadingMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _BodyHeadingMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _BodyHeadingMsgPayload.DoubleVector_swiginit(self, _BodyHeadingMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _BodyHeadingMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _BodyHeadingMsgPayload.DoubleVector_front(self)

    def back(self):
        return _BodyHeadingMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _BodyHeadingMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _BodyHeadingMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _BodyHeadingMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _BodyHeadingMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _BodyHeadingMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_DoubleVector

# Register DoubleVector in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BodyHeadingMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BodyHeadingMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _BodyHeadingMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _BodyHeadingMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _BodyHeadingMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BodyHeadingMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BodyHeadingMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BodyHeadingMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BodyHeadingMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BodyHeadingMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _BodyHeadingMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _BodyHeadingMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _BodyHeadingMsgPayload.StringVector_empty(self)

    def size(self):
        return _BodyHeadingMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _BodyHeadingMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _BodyHeadingMsgPayload.StringVector_begin(self)

    def end(self):
        return _BodyHeadingMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _BodyHeadingMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _BodyHeadingMsgPayload.StringVector_rend(self)

    def clear(self):
        return _BodyHeadingMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _BodyHeadingMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _BodyHeadingMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _BodyHeadingMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _BodyHeadingMsgPayload.StringVector_swiginit(self, _BodyHeadingMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _BodyHeadingMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _BodyHeadingMsgPayload.StringVector_front(self)

    def back(self):
        return _BodyHeadingMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _BodyHeadingMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _BodyHeadingMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _BodyHeadingMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _BodyHeadingMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _BodyHeadingMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_StringVector

# Register StringVector in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _BodyHeadingMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _BodyHeadingMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _BodyHeadingMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _BodyHeadingMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _BodyHeadingMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _BodyHeadingMsgPayload.NANO2SEC
SEC2NANO = _BodyHeadingMsgPayload.SEC2NANO
SEC2HOUR = _BodyHeadingMsgPayload.SEC2HOUR
BOOL_FALSE = _BodyHeadingMsgPayload.BOOL_FALSE
BOOL_TRUE = _BodyHeadingMsgPayload.BOOL_TRUE
AVAILABLE = _BodyHeadingMsgPayload.AVAILABLE
UNAVAILABLE = _BodyHeadingMsgPayload.UNAVAILABLE
BalancedWheels = _BodyHeadingMsgPayload.BalancedWheels
JitterSimple = _BodyHeadingMsgPayload.JitterSimple
JitterFullyCoupled = _BodyHeadingMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BodyHeadingMsgPayload.SysModel_swiginit(self, _BodyHeadingMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_SysModel

    def SelfInit(self):
        return _BodyHeadingMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _BodyHeadingMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _BodyHeadingMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _BodyHeadingMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_BodyHeadingMsgPayload.SysModel_ModelTag_get, _BodyHeadingMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_BodyHeadingMsgPayload.SysModel_CallCounts_get, _BodyHeadingMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_BodyHeadingMsgPayload.SysModel_RNGSeed_get, _BodyHeadingMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_BodyHeadingMsgPayload.SysModel_moduleID_get, _BodyHeadingMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _BodyHeadingMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _BodyHeadingMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _BodyHeadingMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _BodyHeadingMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _BodyHeadingMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _BodyHeadingMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _BodyHeadingMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _BodyHeadingMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _BodyHeadingMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _BodyHeadingMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _BodyHeadingMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _BodyHeadingMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class BodyHeadingMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rHat_XB_B = property(_BodyHeadingMsgPayload.BodyHeadingMsgPayload_rHat_XB_B_get, _BodyHeadingMsgPayload.BodyHeadingMsgPayload_rHat_XB_B_set)

    def __init__(self):
        _BodyHeadingMsgPayload.BodyHeadingMsgPayload_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsgPayload())
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsgPayload

# Register BodyHeadingMsgPayload in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsgPayload_swigregister(BodyHeadingMsgPayload)
class BodyHeadingMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_BodyHeadingMsgPayload.BodyHeadingMsgReader_bskLogger_get, _BodyHeadingMsgPayload.BodyHeadingMsgReader_bskLogger_set)
    zeroMsgPayload = property(_BodyHeadingMsgPayload.BodyHeadingMsgReader_zeroMsgPayload_get, _BodyHeadingMsgPayload.BodyHeadingMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _BodyHeadingMsgPayload.BodyHeadingMsgReader_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsgReader(*args))

    def __call__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader___call__(self)

    def isLinked(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader_isLinked(self)

    def isWritten(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader_isWritten(self)

    def timeWritten(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader_timeWritten(self)

    def moduleID(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _BodyHeadingMsgPayload.BodyHeadingMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == BodyHeadingMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.BodyHeadingMsgPayload import BodyHeadingMsg_C
            if type(source) == BodyHeadingMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<BodyHeadingMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == BodyHeadingMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.BodyHeadingMsgPayload import BodyHeadingMsg_C
        except ImportError:
            return 0

        if type(source) == BodyHeadingMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsgReader

# Register BodyHeadingMsgReader in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsgReader_swigregister(BodyHeadingMsgReader)
class BodyHeadingMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BodyHeadingMsgPayload.BodyHeadingMsgWriter_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _BodyHeadingMsgPayload.BodyHeadingMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsgWriter

# Register BodyHeadingMsgWriter in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsgWriter_swigregister(BodyHeadingMsgWriter)
class BodyHeadingMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_BodyHeadingMsgPayload.BodyHeadingMsg_write_get, _BodyHeadingMsgPayload.BodyHeadingMsg_write_set)

    def addSubscriber(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsg_addSubscriber(self)

    def addAuthor(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _BodyHeadingMsgPayload.BodyHeadingMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _BodyHeadingMsgPayload.BodyHeadingMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _BodyHeadingMsgPayload.BodyHeadingMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_BodyHeadingMsgPayload.BodyHeadingMsg_zeroMsgPayload_get, _BodyHeadingMsgPayload.BodyHeadingMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsg_isLinked(self)

    def getPayloadSize(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _BodyHeadingMsgPayload.BodyHeadingMsg_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsg())
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsg

# Register BodyHeadingMsg in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsg_swigregister(BodyHeadingMsg)
class BodyHeadingMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsgRecorder(*args))
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsgRecorder

    def SelfInit(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_clear(self)
    bskLogger = property(_BodyHeadingMsgPayload.BodyHeadingMsgRecorder_bskLogger_get, _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _BodyHeadingMsgPayload.BodyHeadingMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register BodyHeadingMsgRecorder in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsgRecorder_swigregister(BodyHeadingMsgRecorder)
class BodyHeadingMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___bool__(self)

    def __len__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_pop(self)

    def append(self, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_append(self, x)

    def empty(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_empty(self)

    def size(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_size(self)

    def swap(self, v):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_swap(self, v)

    def begin(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_begin(self)

    def end(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_end(self)

    def rbegin(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_rbegin(self)

    def rend(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_rend(self)

    def clear(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsgPayloadVector(*args))

    def push_back(self, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_push_back(self, x)

    def front(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_front(self)

    def back(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsgPayloadVector

# Register BodyHeadingMsgPayloadVector in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsgPayloadVector_swigregister(BodyHeadingMsgPayloadVector)
class BodyHeadingMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_empty(self)

    def size(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_begin(self)

    def end(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_rend(self)

    def clear(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_front(self)

    def back(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsgOutMsgsVector

# Register BodyHeadingMsgOutMsgsVector in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsVector_swigregister(BodyHeadingMsgOutMsgsVector)
class BodyHeadingMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsgOutMsgsPtrVector

# Register BodyHeadingMsgOutMsgsPtrVector in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsgOutMsgsPtrVector_swigregister(BodyHeadingMsgOutMsgsPtrVector)
class BodyHeadingMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_pop(self)

    def append(self, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_append(self, x)

    def empty(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_empty(self)

    def size(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_size(self)

    def swap(self, v):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_begin(self)

    def end(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_end(self)

    def rbegin(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_rend(self)

    def clear(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsgInMsgsVector(*args))

    def push_back(self, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_front(self)

    def back(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsgInMsgsVector

# Register BodyHeadingMsgInMsgsVector in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsgInMsgsVector_swigregister(BodyHeadingMsgInMsgsVector)
class BodyHeadingMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_BodyHeadingMsgPayload.BodyHeadingMsg_C_header_get, _BodyHeadingMsgPayload.BodyHeadingMsg_C_header_set)
    payload = property(_BodyHeadingMsgPayload.BodyHeadingMsg_C_payload_get, _BodyHeadingMsgPayload.BodyHeadingMsg_C_payload_set)
    payloadPointer = property(_BodyHeadingMsgPayload.BodyHeadingMsg_C_payloadPointer_get, _BodyHeadingMsgPayload.BodyHeadingMsg_C_payloadPointer_set)
    headerPointer = property(_BodyHeadingMsgPayload.BodyHeadingMsg_C_headerPointer_get, _BodyHeadingMsgPayload.BodyHeadingMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import BodyHeadingMsg
        if type(source) == type(self):
            BodyHeadingMsg_C_subscribe(self, source)
        elif type(source) == BodyHeadingMsg:
            BodyHeadingMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe BodyHeadingMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import BodyHeadingMsg
        if type(source) == type(self):
            return (BodyHeadingMsg_C_isSubscribedTo(self, source))
        elif type(source) == BodyHeadingMsg:
            return (BodyHeadingMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import BodyHeadingMsgRecorder
        self.header.isLinked = 1
        return BodyHeadingMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        BodyHeadingMsg_C_addAuthor(self, self)
        if data:
            BodyHeadingMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        BodyHeadingMsg_C_addAuthor(self, self)
        BodyHeadingMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return BodyHeadingMsg_C_read(self)


    def __init__(self):
        _BodyHeadingMsgPayload.BodyHeadingMsg_C_swiginit(self, _BodyHeadingMsgPayload.new_BodyHeadingMsg_C())
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_BodyHeadingMsg_C

# Register BodyHeadingMsg_C in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.BodyHeadingMsg_C_swigregister(BodyHeadingMsg_C)

def BodyHeadingMsg_cpp_subscribe(subscriber, source):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_cpp_subscribe(subscriber, source)

def BodyHeadingMsg_C_subscribe(subscriber, source):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_subscribe(subscriber, source)

def BodyHeadingMsg_C_isSubscribedTo(subscriber, source):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_isSubscribedTo(subscriber, source)

def BodyHeadingMsg_cpp_isSubscribedTo(subscriber, source):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_cpp_isSubscribedTo(subscriber, source)

def BodyHeadingMsg_C_addAuthor(coowner, data):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_addAuthor(coowner, data)

def BodyHeadingMsg_C_init(owner):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_init(owner)

def BodyHeadingMsg_C_isLinked(data):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_isLinked(data)

def BodyHeadingMsg_C_isWritten(data):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_isWritten(data)

def BodyHeadingMsg_C_timeWritten(data):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_timeWritten(data)

def BodyHeadingMsg_C_moduleID(data):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_moduleID(data)

def BodyHeadingMsg_C_write(data, destination, moduleID, callTime):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_write(data, destination, moduleID, callTime)

def BodyHeadingMsg_C_read(source):
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_read(source)

def BodyHeadingMsg_C_zeroMsgPayload():
    return _BodyHeadingMsgPayload.BodyHeadingMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_BodyHeadingMsgPayload.MsgHeader_isLinked_get, _BodyHeadingMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_BodyHeadingMsgPayload.MsgHeader_isWritten_get, _BodyHeadingMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_BodyHeadingMsgPayload.MsgHeader_timeWritten_get, _BodyHeadingMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_BodyHeadingMsgPayload.MsgHeader_moduleID_get, _BodyHeadingMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _BodyHeadingMsgPayload.MsgHeader_swiginit(self, _BodyHeadingMsgPayload.new_MsgHeader())
    __swig_destroy__ = _BodyHeadingMsgPayload.delete_MsgHeader

# Register MsgHeader in _BodyHeadingMsgPayload:
_BodyHeadingMsgPayload.MsgHeader_swigregister(MsgHeader)

