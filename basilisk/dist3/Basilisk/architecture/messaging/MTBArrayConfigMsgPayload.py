# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MTBArrayConfigMsgPayload
else:
    import _MTBArrayConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _MTBArrayConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MTBArrayConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MTBArrayConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MTBArrayConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MTBArrayConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MTBArrayConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MTBArrayConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MTBArrayConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _MTBArrayConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _MTBArrayConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _MTBArrayConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _MTBArrayConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _MTBArrayConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _MTBArrayConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _MTBArrayConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _MTBArrayConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _MTBArrayConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _MTBArrayConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _MTBArrayConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _MTBArrayConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _MTBArrayConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _MTBArrayConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _MTBArrayConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _MTBArrayConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBArrayConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBArrayConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _MTBArrayConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _MTBArrayConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBArrayConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBArrayConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBArrayConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBArrayConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _MTBArrayConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _MTBArrayConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _MTBArrayConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _MTBArrayConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _MTBArrayConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _MTBArrayConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _MTBArrayConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _MTBArrayConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _MTBArrayConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _MTBArrayConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _MTBArrayConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _MTBArrayConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _MTBArrayConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.TimeVector_swiginit(self, _MTBArrayConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _MTBArrayConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _MTBArrayConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _MTBArrayConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _MTBArrayConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBArrayConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _MTBArrayConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _MTBArrayConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _MTBArrayConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_TimeVector

# Register TimeVector in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBArrayConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _MTBArrayConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _MTBArrayConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBArrayConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBArrayConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBArrayConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBArrayConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _MTBArrayConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _MTBArrayConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _MTBArrayConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.DoubleVector_swiginit(self, _MTBArrayConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _MTBArrayConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _MTBArrayConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBArrayConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _MTBArrayConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _MTBArrayConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _MTBArrayConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBArrayConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBArrayConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _MTBArrayConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _MTBArrayConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBArrayConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBArrayConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBArrayConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBArrayConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _MTBArrayConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _MTBArrayConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _MTBArrayConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _MTBArrayConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _MTBArrayConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _MTBArrayConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _MTBArrayConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _MTBArrayConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _MTBArrayConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _MTBArrayConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _MTBArrayConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _MTBArrayConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _MTBArrayConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.StringVector_swiginit(self, _MTBArrayConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _MTBArrayConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _MTBArrayConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _MTBArrayConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _MTBArrayConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBArrayConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _MTBArrayConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _MTBArrayConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _MTBArrayConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_StringVector

# Register StringVector in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _MTBArrayConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _MTBArrayConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _MTBArrayConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _MTBArrayConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _MTBArrayConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _MTBArrayConfigMsgPayload.NANO2SEC
SEC2NANO = _MTBArrayConfigMsgPayload.SEC2NANO
SEC2HOUR = _MTBArrayConfigMsgPayload.SEC2HOUR
BOOL_FALSE = _MTBArrayConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _MTBArrayConfigMsgPayload.BOOL_TRUE
AVAILABLE = _MTBArrayConfigMsgPayload.AVAILABLE
UNAVAILABLE = _MTBArrayConfigMsgPayload.UNAVAILABLE
BalancedWheels = _MTBArrayConfigMsgPayload.BalancedWheels
JitterSimple = _MTBArrayConfigMsgPayload.JitterSimple
JitterFullyCoupled = _MTBArrayConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.SysModel_swiginit(self, _MTBArrayConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _MTBArrayConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _MTBArrayConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MTBArrayConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MTBArrayConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_MTBArrayConfigMsgPayload.SysModel_ModelTag_get, _MTBArrayConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_MTBArrayConfigMsgPayload.SysModel_CallCounts_get, _MTBArrayConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_MTBArrayConfigMsgPayload.SysModel_RNGSeed_get, _MTBArrayConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_MTBArrayConfigMsgPayload.SysModel_moduleID_get, _MTBArrayConfigMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _MTBArrayConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _MTBArrayConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _MTBArrayConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _MTBArrayConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _MTBArrayConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _MTBArrayConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _MTBArrayConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _MTBArrayConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _MTBArrayConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _MTBArrayConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _MTBArrayConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _MTBArrayConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class MTBArrayConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numMTB = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayload_numMTB_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayload_numMTB_set)
    GtMatrix_B = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayload_GtMatrix_B_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayload_GtMatrix_B_set)
    maxMtbDipoles = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayload_maxMtbDipoles_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayload_maxMtbDipoles_set)

    def __init__(self):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayload_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsgPayload())
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsgPayload

# Register MTBArrayConfigMsgPayload in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayload_swigregister(MTBArrayConfigMsgPayload)
class MTBArrayConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_bskLogger_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_zeroMsgPayload_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsgReader(*args))

    def __call__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader___call__(self)

    def isLinked(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == MTBArrayConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.MTBArrayConfigMsgPayload import MTBArrayConfigMsg_C
            if type(source) == MTBArrayConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<MTBArrayConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == MTBArrayConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.MTBArrayConfigMsgPayload import MTBArrayConfigMsg_C
        except ImportError:
            return 0

        if type(source) == MTBArrayConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsgReader

# Register MTBArrayConfigMsgReader in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsgReader_swigregister(MTBArrayConfigMsgReader)
class MTBArrayConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsgWriter_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsgWriter

# Register MTBArrayConfigMsgWriter in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsgWriter_swigregister(MTBArrayConfigMsgWriter)
class MTBArrayConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsg_write_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_write_set)

    def addSubscriber(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsg_zeroMsgPayload_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsg())
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsg

# Register MTBArrayConfigMsg in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsg_swigregister(MTBArrayConfigMsg)
class MTBArrayConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsgRecorder(*args))
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsgRecorder

    def SelfInit(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_clear(self)
    bskLogger = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_bskLogger_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register MTBArrayConfigMsgRecorder in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsgRecorder_swigregister(MTBArrayConfigMsgRecorder)
class MTBArrayConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_empty(self)

    def size(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_begin(self)

    def end(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_front(self)

    def back(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsgPayloadVector

# Register MTBArrayConfigMsgPayloadVector in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsgPayloadVector_swigregister(MTBArrayConfigMsgPayloadVector)
class MTBArrayConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsgOutMsgsVector

# Register MTBArrayConfigMsgOutMsgsVector in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsVector_swigregister(MTBArrayConfigMsgOutMsgsVector)
class MTBArrayConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsgOutMsgsPtrVector

# Register MTBArrayConfigMsgOutMsgsPtrVector in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsgOutMsgsPtrVector_swigregister(MTBArrayConfigMsgOutMsgsPtrVector)
class MTBArrayConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_front(self)

    def back(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsgInMsgsVector

# Register MTBArrayConfigMsgInMsgsVector in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsgInMsgsVector_swigregister(MTBArrayConfigMsgInMsgsVector)
class MTBArrayConfigMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_header_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_header_set)
    payload = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_payload_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_payload_set)
    payloadPointer = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_payloadPointer_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_payloadPointer_set)
    headerPointer = property(_MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_headerPointer_get, _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import MTBArrayConfigMsg
        if type(source) == type(self):
            MTBArrayConfigMsg_C_subscribe(self, source)
        elif type(source) == MTBArrayConfigMsg:
            MTBArrayConfigMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe MTBArrayConfigMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import MTBArrayConfigMsg
        if type(source) == type(self):
            return (MTBArrayConfigMsg_C_isSubscribedTo(self, source))
        elif type(source) == MTBArrayConfigMsg:
            return (MTBArrayConfigMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import MTBArrayConfigMsgRecorder
        self.header.isLinked = 1
        return MTBArrayConfigMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        MTBArrayConfigMsg_C_addAuthor(self, self)
        if data:
            MTBArrayConfigMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        MTBArrayConfigMsg_C_addAuthor(self, self)
        MTBArrayConfigMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return MTBArrayConfigMsg_C_read(self)


    def __init__(self):
        _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_swiginit(self, _MTBArrayConfigMsgPayload.new_MTBArrayConfigMsg_C())
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MTBArrayConfigMsg_C

# Register MTBArrayConfigMsg_C in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_swigregister(MTBArrayConfigMsg_C)

def MTBArrayConfigMsg_cpp_subscribe(subscriber, source):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_cpp_subscribe(subscriber, source)

def MTBArrayConfigMsg_C_subscribe(subscriber, source):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_subscribe(subscriber, source)

def MTBArrayConfigMsg_C_isSubscribedTo(subscriber, source):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_isSubscribedTo(subscriber, source)

def MTBArrayConfigMsg_cpp_isSubscribedTo(subscriber, source):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_cpp_isSubscribedTo(subscriber, source)

def MTBArrayConfigMsg_C_addAuthor(coowner, data):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_addAuthor(coowner, data)

def MTBArrayConfigMsg_C_init(owner):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_init(owner)

def MTBArrayConfigMsg_C_isLinked(data):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_isLinked(data)

def MTBArrayConfigMsg_C_isWritten(data):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_isWritten(data)

def MTBArrayConfigMsg_C_timeWritten(data):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_timeWritten(data)

def MTBArrayConfigMsg_C_moduleID(data):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_moduleID(data)

def MTBArrayConfigMsg_C_write(data, destination, moduleID, callTime):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_write(data, destination, moduleID, callTime)

def MTBArrayConfigMsg_C_read(source):
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_read(source)

def MTBArrayConfigMsg_C_zeroMsgPayload():
    return _MTBArrayConfigMsgPayload.MTBArrayConfigMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_MTBArrayConfigMsgPayload.MsgHeader_isLinked_get, _MTBArrayConfigMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_MTBArrayConfigMsgPayload.MsgHeader_isWritten_get, _MTBArrayConfigMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_MTBArrayConfigMsgPayload.MsgHeader_timeWritten_get, _MTBArrayConfigMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_MTBArrayConfigMsgPayload.MsgHeader_moduleID_get, _MTBArrayConfigMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _MTBArrayConfigMsgPayload.MsgHeader_swiginit(self, _MTBArrayConfigMsgPayload.new_MsgHeader())
    __swig_destroy__ = _MTBArrayConfigMsgPayload.delete_MsgHeader

# Register MsgHeader in _MTBArrayConfigMsgPayload:
_MTBArrayConfigMsgPayload.MsgHeader_swigregister(MsgHeader)

