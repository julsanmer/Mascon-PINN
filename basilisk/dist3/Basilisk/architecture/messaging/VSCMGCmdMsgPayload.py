# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VSCMGCmdMsgPayload
else:
    import _VSCMGCmdMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VSCMGCmdMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VSCMGCmdMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VSCMGCmdMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VSCMGCmdMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VSCMGCmdMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VSCMGCmdMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VSCMGCmdMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VSCMGCmdMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VSCMGCmdMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VSCMGCmdMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VSCMGCmdMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VSCMGCmdMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VSCMGCmdMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VSCMGCmdMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VSCMGCmdMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VSCMGCmdMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VSCMGCmdMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VSCMGCmdMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VSCMGCmdMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VSCMGCmdMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VSCMGCmdMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VSCMGCmdMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VSCMGCmdMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VSCMGCmdMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VSCMGCmdMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VSCMGCmdMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VSCMGCmdMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VSCMGCmdMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VSCMGCmdMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VSCMGCmdMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VSCMGCmdMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VSCMGCmdMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGCmdMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGCmdMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGCmdMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VSCMGCmdMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGCmdMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGCmdMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGCmdMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGCmdMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGCmdMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGCmdMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGCmdMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VSCMGCmdMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VSCMGCmdMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VSCMGCmdMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VSCMGCmdMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VSCMGCmdMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VSCMGCmdMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VSCMGCmdMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VSCMGCmdMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VSCMGCmdMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VSCMGCmdMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGCmdMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGCmdMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.TimeVector_swiginit(self, _VSCMGCmdMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VSCMGCmdMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VSCMGCmdMsgPayload.TimeVector_front(self)

    def back(self):
        return _VSCMGCmdMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VSCMGCmdMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGCmdMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGCmdMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGCmdMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VSCMGCmdMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_TimeVector

# Register TimeVector in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGCmdMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGCmdMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGCmdMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VSCMGCmdMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGCmdMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGCmdMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGCmdMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGCmdMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGCmdMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGCmdMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGCmdMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VSCMGCmdMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VSCMGCmdMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VSCMGCmdMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VSCMGCmdMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VSCMGCmdMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VSCMGCmdMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VSCMGCmdMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VSCMGCmdMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VSCMGCmdMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VSCMGCmdMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGCmdMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGCmdMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.DoubleVector_swiginit(self, _VSCMGCmdMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VSCMGCmdMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VSCMGCmdMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VSCMGCmdMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VSCMGCmdMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGCmdMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGCmdMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGCmdMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VSCMGCmdMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_DoubleVector

# Register DoubleVector in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGCmdMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGCmdMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGCmdMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VSCMGCmdMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGCmdMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGCmdMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGCmdMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGCmdMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGCmdMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGCmdMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGCmdMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VSCMGCmdMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VSCMGCmdMsgPayload.StringVector_empty(self)

    def size(self):
        return _VSCMGCmdMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VSCMGCmdMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VSCMGCmdMsgPayload.StringVector_begin(self)

    def end(self):
        return _VSCMGCmdMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VSCMGCmdMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VSCMGCmdMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VSCMGCmdMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VSCMGCmdMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGCmdMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGCmdMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.StringVector_swiginit(self, _VSCMGCmdMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VSCMGCmdMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VSCMGCmdMsgPayload.StringVector_front(self)

    def back(self):
        return _VSCMGCmdMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VSCMGCmdMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGCmdMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGCmdMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGCmdMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VSCMGCmdMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_StringVector

# Register StringVector in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VSCMGCmdMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VSCMGCmdMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VSCMGCmdMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VSCMGCmdMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VSCMGCmdMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VSCMGCmdMsgPayload.NANO2SEC
SEC2NANO = _VSCMGCmdMsgPayload.SEC2NANO
SEC2HOUR = _VSCMGCmdMsgPayload.SEC2HOUR
BOOL_FALSE = _VSCMGCmdMsgPayload.BOOL_FALSE
BOOL_TRUE = _VSCMGCmdMsgPayload.BOOL_TRUE
AVAILABLE = _VSCMGCmdMsgPayload.AVAILABLE
UNAVAILABLE = _VSCMGCmdMsgPayload.UNAVAILABLE
BalancedWheels = _VSCMGCmdMsgPayload.BalancedWheels
JitterSimple = _VSCMGCmdMsgPayload.JitterSimple
JitterFullyCoupled = _VSCMGCmdMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.SysModel_swiginit(self, _VSCMGCmdMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VSCMGCmdMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGCmdMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGCmdMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGCmdMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VSCMGCmdMsgPayload.SysModel_ModelTag_get, _VSCMGCmdMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VSCMGCmdMsgPayload.SysModel_CallCounts_get, _VSCMGCmdMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VSCMGCmdMsgPayload.SysModel_RNGSeed_get, _VSCMGCmdMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VSCMGCmdMsgPayload.SysModel_moduleID_get, _VSCMGCmdMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VSCMGCmdMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VSCMGCmdMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VSCMGCmdMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VSCMGCmdMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VSCMGCmdMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VSCMGCmdMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VSCMGCmdMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VSCMGCmdMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VSCMGCmdMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VSCMGCmdMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VSCMGCmdMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VSCMGCmdMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VSCMGCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u_s_cmd = property(_VSCMGCmdMsgPayload.VSCMGCmdMsgPayload_u_s_cmd_get, _VSCMGCmdMsgPayload.VSCMGCmdMsgPayload_u_s_cmd_set)
    u_g_cmd = property(_VSCMGCmdMsgPayload.VSCMGCmdMsgPayload_u_g_cmd_get, _VSCMGCmdMsgPayload.VSCMGCmdMsgPayload_u_g_cmd_set)

    def __init__(self):
        _VSCMGCmdMsgPayload.VSCMGCmdMsgPayload_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsgPayload())
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsgPayload

# Register VSCMGCmdMsgPayload in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsgPayload_swigregister(VSCMGCmdMsgPayload)
class VSCMGCmdMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VSCMGCmdMsgPayload.VSCMGCmdMsgReader_bskLogger_get, _VSCMGCmdMsgPayload.VSCMGCmdMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VSCMGCmdMsgPayload.VSCMGCmdMsgReader_zeroMsgPayload_get, _VSCMGCmdMsgPayload.VSCMGCmdMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.VSCMGCmdMsgReader_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsgReader(*args))

    def __call__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader___call__(self)

    def isLinked(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader_isLinked(self)

    def isWritten(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader_isWritten(self)

    def timeWritten(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader_timeWritten(self)

    def moduleID(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VSCMGCmdMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VSCMGCmdMsgPayload import VSCMGCmdMsg_C
            if type(source) == VSCMGCmdMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VSCMGCmdMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VSCMGCmdMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VSCMGCmdMsgPayload import VSCMGCmdMsg_C
        except ImportError:
            return 0

        if type(source) == VSCMGCmdMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsgReader

# Register VSCMGCmdMsgReader in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsgReader_swigregister(VSCMGCmdMsgReader)
class VSCMGCmdMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.VSCMGCmdMsgWriter_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsgWriter

# Register VSCMGCmdMsgWriter in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsgWriter_swigregister(VSCMGCmdMsgWriter)
class VSCMGCmdMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VSCMGCmdMsgPayload.VSCMGCmdMsg_write_get, _VSCMGCmdMsgPayload.VSCMGCmdMsg_write_set)

    def addSubscriber(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsg_addSubscriber(self)

    def addAuthor(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VSCMGCmdMsgPayload.VSCMGCmdMsg_zeroMsgPayload_get, _VSCMGCmdMsgPayload.VSCMGCmdMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsg_isLinked(self)

    def getPayloadSize(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VSCMGCmdMsgPayload.VSCMGCmdMsg_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsg())
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsg

# Register VSCMGCmdMsg in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsg_swigregister(VSCMGCmdMsg)
class VSCMGCmdMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsgRecorder(*args))
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsgRecorder

    def SelfInit(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_clear(self)
    bskLogger = property(_VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_bskLogger_get, _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VSCMGCmdMsgRecorder in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsgRecorder_swigregister(VSCMGCmdMsgRecorder)
class VSCMGCmdMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_pop(self)

    def append(self, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_append(self, x)

    def empty(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_empty(self)

    def size(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_size(self)

    def swap(self, v):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_begin(self)

    def end(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_end(self)

    def rbegin(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_rend(self)

    def clear(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsgPayloadVector(*args))

    def push_back(self, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_front(self)

    def back(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsgPayloadVector

# Register VSCMGCmdMsgPayloadVector in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsgPayloadVector_swigregister(VSCMGCmdMsgPayloadVector)
class VSCMGCmdMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_empty(self)

    def size(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_begin(self)

    def end(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_front(self)

    def back(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsgOutMsgsVector

# Register VSCMGCmdMsgOutMsgsVector in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsVector_swigregister(VSCMGCmdMsgOutMsgsVector)
class VSCMGCmdMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsgOutMsgsPtrVector

# Register VSCMGCmdMsgOutMsgsPtrVector in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsgOutMsgsPtrVector_swigregister(VSCMGCmdMsgOutMsgsPtrVector)
class VSCMGCmdMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_empty(self)

    def size(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_begin(self)

    def end(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_rend(self)

    def clear(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_front(self)

    def back(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsgInMsgsVector

# Register VSCMGCmdMsgInMsgsVector in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsgInMsgsVector_swigregister(VSCMGCmdMsgInMsgsVector)
class VSCMGCmdMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_VSCMGCmdMsgPayload.VSCMGCmdMsg_C_header_get, _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_header_set)
    payload = property(_VSCMGCmdMsgPayload.VSCMGCmdMsg_C_payload_get, _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_payload_set)
    payloadPointer = property(_VSCMGCmdMsgPayload.VSCMGCmdMsg_C_payloadPointer_get, _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_payloadPointer_set)
    headerPointer = property(_VSCMGCmdMsgPayload.VSCMGCmdMsg_C_headerPointer_get, _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import VSCMGCmdMsg
        if type(source) == type(self):
            VSCMGCmdMsg_C_subscribe(self, source)
        elif type(source) == VSCMGCmdMsg:
            VSCMGCmdMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe VSCMGCmdMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import VSCMGCmdMsg
        if type(source) == type(self):
            return (VSCMGCmdMsg_C_isSubscribedTo(self, source))
        elif type(source) == VSCMGCmdMsg:
            return (VSCMGCmdMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import VSCMGCmdMsgRecorder
        self.header.isLinked = 1
        return VSCMGCmdMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        VSCMGCmdMsg_C_addAuthor(self, self)
        if data:
            VSCMGCmdMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        VSCMGCmdMsg_C_addAuthor(self, self)
        VSCMGCmdMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return VSCMGCmdMsg_C_read(self)


    def __init__(self):
        _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_swiginit(self, _VSCMGCmdMsgPayload.new_VSCMGCmdMsg_C())
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_VSCMGCmdMsg_C

# Register VSCMGCmdMsg_C in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.VSCMGCmdMsg_C_swigregister(VSCMGCmdMsg_C)

def VSCMGCmdMsg_cpp_subscribe(subscriber, source):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_cpp_subscribe(subscriber, source)

def VSCMGCmdMsg_C_subscribe(subscriber, source):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_subscribe(subscriber, source)

def VSCMGCmdMsg_C_isSubscribedTo(subscriber, source):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_isSubscribedTo(subscriber, source)

def VSCMGCmdMsg_cpp_isSubscribedTo(subscriber, source):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_cpp_isSubscribedTo(subscriber, source)

def VSCMGCmdMsg_C_addAuthor(coowner, data):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_addAuthor(coowner, data)

def VSCMGCmdMsg_C_init(owner):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_init(owner)

def VSCMGCmdMsg_C_isLinked(data):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_isLinked(data)

def VSCMGCmdMsg_C_isWritten(data):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_isWritten(data)

def VSCMGCmdMsg_C_timeWritten(data):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_timeWritten(data)

def VSCMGCmdMsg_C_moduleID(data):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_moduleID(data)

def VSCMGCmdMsg_C_write(data, destination, moduleID, callTime):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_write(data, destination, moduleID, callTime)

def VSCMGCmdMsg_C_read(source):
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_read(source)

def VSCMGCmdMsg_C_zeroMsgPayload():
    return _VSCMGCmdMsgPayload.VSCMGCmdMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_VSCMGCmdMsgPayload.MsgHeader_isLinked_get, _VSCMGCmdMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_VSCMGCmdMsgPayload.MsgHeader_isWritten_get, _VSCMGCmdMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_VSCMGCmdMsgPayload.MsgHeader_timeWritten_get, _VSCMGCmdMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_VSCMGCmdMsgPayload.MsgHeader_moduleID_get, _VSCMGCmdMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _VSCMGCmdMsgPayload.MsgHeader_swiginit(self, _VSCMGCmdMsgPayload.new_MsgHeader())
    __swig_destroy__ = _VSCMGCmdMsgPayload.delete_MsgHeader

# Register MsgHeader in _VSCMGCmdMsgPayload:
_VSCMGCmdMsgPayload.MsgHeader_swigregister(MsgHeader)

