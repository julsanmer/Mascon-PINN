# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CustomModuleCppMsgPayload
else:
    import _CustomModuleCppMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CustomModuleCppMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CustomModuleCppMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CustomModuleCppMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CustomModuleCppMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CustomModuleCppMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CustomModuleCppMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CustomModuleCppMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CustomModuleCppMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CustomModuleCppMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CustomModuleCppMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CustomModuleCppMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CustomModuleCppMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CustomModuleCppMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CustomModuleCppMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CustomModuleCppMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CustomModuleCppMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CustomModuleCppMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CustomModuleCppMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CustomModuleCppMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CustomModuleCppMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CustomModuleCppMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CustomModuleCppMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CustomModuleCppMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CustomModuleCppMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CustomModuleCppMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CustomModuleCppMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CustomModuleCppMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CustomModuleCppMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CustomModuleCppMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CustomModuleCppMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CustomModuleCppMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CustomModuleCppMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleCppMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleCppMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleCppMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CustomModuleCppMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleCppMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleCppMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleCppMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleCppMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleCppMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleCppMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleCppMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CustomModuleCppMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CustomModuleCppMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CustomModuleCppMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CustomModuleCppMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CustomModuleCppMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CustomModuleCppMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CustomModuleCppMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CustomModuleCppMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CustomModuleCppMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CustomModuleCppMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleCppMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleCppMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.TimeVector_swiginit(self, _CustomModuleCppMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CustomModuleCppMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CustomModuleCppMsgPayload.TimeVector_front(self)

    def back(self):
        return _CustomModuleCppMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CustomModuleCppMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleCppMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleCppMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleCppMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleCppMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_TimeVector

# Register TimeVector in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleCppMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleCppMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleCppMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CustomModuleCppMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleCppMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleCppMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleCppMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleCppMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleCppMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleCppMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleCppMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CustomModuleCppMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CustomModuleCppMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CustomModuleCppMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CustomModuleCppMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CustomModuleCppMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CustomModuleCppMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CustomModuleCppMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CustomModuleCppMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CustomModuleCppMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CustomModuleCppMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleCppMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleCppMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.DoubleVector_swiginit(self, _CustomModuleCppMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CustomModuleCppMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CustomModuleCppMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CustomModuleCppMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CustomModuleCppMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleCppMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleCppMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleCppMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleCppMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_DoubleVector

# Register DoubleVector in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleCppMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleCppMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleCppMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CustomModuleCppMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleCppMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleCppMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleCppMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleCppMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleCppMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleCppMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleCppMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CustomModuleCppMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CustomModuleCppMsgPayload.StringVector_empty(self)

    def size(self):
        return _CustomModuleCppMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CustomModuleCppMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CustomModuleCppMsgPayload.StringVector_begin(self)

    def end(self):
        return _CustomModuleCppMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CustomModuleCppMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CustomModuleCppMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CustomModuleCppMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CustomModuleCppMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleCppMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleCppMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.StringVector_swiginit(self, _CustomModuleCppMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CustomModuleCppMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CustomModuleCppMsgPayload.StringVector_front(self)

    def back(self):
        return _CustomModuleCppMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CustomModuleCppMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleCppMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleCppMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleCppMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleCppMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_StringVector

# Register StringVector in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CustomModuleCppMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CustomModuleCppMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CustomModuleCppMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CustomModuleCppMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CustomModuleCppMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CustomModuleCppMsgPayload.NANO2SEC
SEC2NANO = _CustomModuleCppMsgPayload.SEC2NANO
SEC2HOUR = _CustomModuleCppMsgPayload.SEC2HOUR
BOOL_FALSE = _CustomModuleCppMsgPayload.BOOL_FALSE
BOOL_TRUE = _CustomModuleCppMsgPayload.BOOL_TRUE
AVAILABLE = _CustomModuleCppMsgPayload.AVAILABLE
UNAVAILABLE = _CustomModuleCppMsgPayload.UNAVAILABLE
BalancedWheels = _CustomModuleCppMsgPayload.BalancedWheels
JitterSimple = _CustomModuleCppMsgPayload.JitterSimple
JitterFullyCoupled = _CustomModuleCppMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.SysModel_swiginit(self, _CustomModuleCppMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CustomModuleCppMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CustomModuleCppMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CustomModuleCppMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CustomModuleCppMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CustomModuleCppMsgPayload.SysModel_ModelTag_get, _CustomModuleCppMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CustomModuleCppMsgPayload.SysModel_CallCounts_get, _CustomModuleCppMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CustomModuleCppMsgPayload.SysModel_RNGSeed_get, _CustomModuleCppMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CustomModuleCppMsgPayload.SysModel_moduleID_get, _CustomModuleCppMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CustomModuleCppMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CustomModuleCppMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CustomModuleCppMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CustomModuleCppMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CustomModuleCppMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CustomModuleCppMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CustomModuleCppMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CustomModuleCppMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CustomModuleCppMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CustomModuleCppMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CustomModuleCppMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CustomModuleCppMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CustomModuleCppMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataVector = property(_CustomModuleCppMsgPayload.CustomModuleCppMsgPayload_dataVector_get, _CustomModuleCppMsgPayload.CustomModuleCppMsgPayload_dataVector_set)

    def __init__(self):
        _CustomModuleCppMsgPayload.CustomModuleCppMsgPayload_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsgPayload())
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsgPayload

# Register CustomModuleCppMsgPayload in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsgPayload_swigregister(CustomModuleCppMsgPayload)
class CustomModuleCppMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CustomModuleCppMsgPayload.CustomModuleCppMsgReader_bskLogger_get, _CustomModuleCppMsgPayload.CustomModuleCppMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CustomModuleCppMsgPayload.CustomModuleCppMsgReader_zeroMsgPayload_get, _CustomModuleCppMsgPayload.CustomModuleCppMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.CustomModuleCppMsgReader_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsgReader(*args))

    def __call__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader___call__(self)

    def isLinked(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader_isLinked(self)

    def isWritten(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader_isWritten(self)

    def timeWritten(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader_timeWritten(self)

    def moduleID(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CustomModuleCppMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CustomModuleCppMsgPayload import CustomModuleCppMsg_C
            if type(source) == CustomModuleCppMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CustomModuleCppMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CustomModuleCppMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CustomModuleCppMsgPayload import CustomModuleCppMsg_C
        except ImportError:
            return 0

        if type(source) == CustomModuleCppMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsgReader

# Register CustomModuleCppMsgReader in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsgReader_swigregister(CustomModuleCppMsgReader)
class CustomModuleCppMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.CustomModuleCppMsgWriter_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsgWriter

# Register CustomModuleCppMsgWriter in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsgWriter_swigregister(CustomModuleCppMsgWriter)
class CustomModuleCppMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CustomModuleCppMsgPayload.CustomModuleCppMsg_write_get, _CustomModuleCppMsgPayload.CustomModuleCppMsg_write_set)

    def addSubscriber(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsg_addSubscriber(self)

    def addAuthor(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CustomModuleCppMsgPayload.CustomModuleCppMsg_zeroMsgPayload_get, _CustomModuleCppMsgPayload.CustomModuleCppMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsg_isLinked(self)

    def getPayloadSize(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CustomModuleCppMsgPayload.CustomModuleCppMsg_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsg())
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsg

# Register CustomModuleCppMsg in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsg_swigregister(CustomModuleCppMsg)
class CustomModuleCppMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsgRecorder(*args))
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsgRecorder

    def SelfInit(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_clear(self)
    bskLogger = property(_CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_bskLogger_get, _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CustomModuleCppMsgRecorder in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsgRecorder_swigregister(CustomModuleCppMsgRecorder)
class CustomModuleCppMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_pop(self)

    def append(self, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_append(self, x)

    def empty(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_empty(self)

    def size(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_size(self)

    def swap(self, v):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_begin(self)

    def end(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_end(self)

    def rbegin(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_rend(self)

    def clear(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsgPayloadVector(*args))

    def push_back(self, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_front(self)

    def back(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsgPayloadVector

# Register CustomModuleCppMsgPayloadVector in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsgPayloadVector_swigregister(CustomModuleCppMsgPayloadVector)
class CustomModuleCppMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_empty(self)

    def size(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_begin(self)

    def end(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_front(self)

    def back(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsgOutMsgsVector

# Register CustomModuleCppMsgOutMsgsVector in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsVector_swigregister(CustomModuleCppMsgOutMsgsVector)
class CustomModuleCppMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsgOutMsgsPtrVector

# Register CustomModuleCppMsgOutMsgsPtrVector in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsgOutMsgsPtrVector_swigregister(CustomModuleCppMsgOutMsgsPtrVector)
class CustomModuleCppMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_empty(self)

    def size(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_begin(self)

    def end(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_rend(self)

    def clear(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_swiginit(self, _CustomModuleCppMsgPayload.new_CustomModuleCppMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_front(self)

    def back(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CustomModuleCppMsgPayload.delete_CustomModuleCppMsgInMsgsVector

# Register CustomModuleCppMsgInMsgsVector in _CustomModuleCppMsgPayload:
_CustomModuleCppMsgPayload.CustomModuleCppMsgInMsgsVector_swigregister(CustomModuleCppMsgInMsgsVector)

