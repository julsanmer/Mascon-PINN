# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWConfigLogMsgPayload
else:
    import _RWConfigLogMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RWConfigLogMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWConfigLogMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWConfigLogMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWConfigLogMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWConfigLogMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWConfigLogMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RWConfigLogMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RWConfigLogMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RWConfigLogMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWConfigLogMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWConfigLogMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWConfigLogMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWConfigLogMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWConfigLogMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWConfigLogMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWConfigLogMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RWConfigLogMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RWConfigLogMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RWConfigLogMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RWConfigLogMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RWConfigLogMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RWConfigLogMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RWConfigLogMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RWConfigLogMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RWConfigLogMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RWConfigLogMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RWConfigLogMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RWConfigLogMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RWConfigLogMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RWConfigLogMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RWConfigLogMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RWConfigLogMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigLogMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigLogMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigLogMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RWConfigLogMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigLogMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigLogMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigLogMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigLogMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigLogMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigLogMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigLogMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RWConfigLogMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RWConfigLogMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RWConfigLogMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RWConfigLogMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RWConfigLogMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RWConfigLogMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RWConfigLogMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RWConfigLogMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RWConfigLogMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RWConfigLogMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigLogMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigLogMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigLogMsgPayload.TimeVector_swiginit(self, _RWConfigLogMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RWConfigLogMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RWConfigLogMsgPayload.TimeVector_front(self)

    def back(self):
        return _RWConfigLogMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RWConfigLogMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigLogMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigLogMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigLogMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RWConfigLogMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_TimeVector

# Register TimeVector in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigLogMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigLogMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigLogMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RWConfigLogMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigLogMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigLogMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigLogMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigLogMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigLogMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigLogMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigLogMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RWConfigLogMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RWConfigLogMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RWConfigLogMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RWConfigLogMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RWConfigLogMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RWConfigLogMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RWConfigLogMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RWConfigLogMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RWConfigLogMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RWConfigLogMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigLogMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigLogMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigLogMsgPayload.DoubleVector_swiginit(self, _RWConfigLogMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RWConfigLogMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RWConfigLogMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RWConfigLogMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RWConfigLogMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigLogMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigLogMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigLogMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RWConfigLogMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_DoubleVector

# Register DoubleVector in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigLogMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigLogMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigLogMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RWConfigLogMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigLogMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigLogMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigLogMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigLogMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigLogMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigLogMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigLogMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RWConfigLogMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RWConfigLogMsgPayload.StringVector_empty(self)

    def size(self):
        return _RWConfigLogMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RWConfigLogMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RWConfigLogMsgPayload.StringVector_begin(self)

    def end(self):
        return _RWConfigLogMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RWConfigLogMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RWConfigLogMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RWConfigLogMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RWConfigLogMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigLogMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigLogMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigLogMsgPayload.StringVector_swiginit(self, _RWConfigLogMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RWConfigLogMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RWConfigLogMsgPayload.StringVector_front(self)

    def back(self):
        return _RWConfigLogMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RWConfigLogMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigLogMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigLogMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigLogMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RWConfigLogMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_StringVector

# Register StringVector in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RWConfigLogMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RWConfigLogMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RWConfigLogMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RWConfigLogMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RWConfigLogMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RWConfigLogMsgPayload.NANO2SEC
SEC2NANO = _RWConfigLogMsgPayload.SEC2NANO
SEC2HOUR = _RWConfigLogMsgPayload.SEC2HOUR
BOOL_FALSE = _RWConfigLogMsgPayload.BOOL_FALSE
BOOL_TRUE = _RWConfigLogMsgPayload.BOOL_TRUE
AVAILABLE = _RWConfigLogMsgPayload.AVAILABLE
UNAVAILABLE = _RWConfigLogMsgPayload.UNAVAILABLE
BalancedWheels = _RWConfigLogMsgPayload.BalancedWheels
JitterSimple = _RWConfigLogMsgPayload.JitterSimple
JitterFullyCoupled = _RWConfigLogMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigLogMsgPayload.SysModel_swiginit(self, _RWConfigLogMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RWConfigLogMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RWConfigLogMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWConfigLogMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWConfigLogMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RWConfigLogMsgPayload.SysModel_ModelTag_get, _RWConfigLogMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RWConfigLogMsgPayload.SysModel_CallCounts_get, _RWConfigLogMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RWConfigLogMsgPayload.SysModel_RNGSeed_get, _RWConfigLogMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RWConfigLogMsgPayload.SysModel_moduleID_get, _RWConfigLogMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RWConfigLogMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RWConfigLogMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RWConfigLogMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RWConfigLogMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RWConfigLogMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RWConfigLogMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RWConfigLogMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RWConfigLogMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RWConfigLogMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RWConfigLogMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RWConfigLogMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RWConfigLogMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RWConfigLogMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rWB_B = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_rWB_B_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_rWB_B_set)
    gsHat_B = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_gsHat_B_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_gsHat_B_set)
    w2Hat0_B = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_w2Hat0_B_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_w2Hat0_B_set)
    w3Hat0_B = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_w3Hat0_B_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_w3Hat0_B_set)
    mass = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_mass_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_mass_set)
    theta = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_theta_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_theta_set)
    Omega = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_Omega_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_Omega_set)
    Js = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_Js_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_Js_set)
    Jt = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_Jt_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_Jt_set)
    Jg = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_Jg_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_Jg_set)
    U_s = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_U_s_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_U_s_set)
    U_d = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_U_d_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_U_d_set)
    d = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_d_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_d_set)
    J13 = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_J13_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_J13_set)
    u_current = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_u_current_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_u_current_set)
    frictionTorque = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_frictionTorque_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_frictionTorque_set)
    u_max = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_u_max_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_u_max_set)
    u_min = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_u_min_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_u_min_set)
    u_f = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_u_f_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_u_f_set)
    Omega_max = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_Omega_max_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_Omega_max_set)
    P_max = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_P_max_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_P_max_set)
    linearFrictionRatio = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_linearFrictionRatio_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_linearFrictionRatio_set)
    RWModel = property(_RWConfigLogMsgPayload.RWConfigLogMsgPayload_RWModel_get, _RWConfigLogMsgPayload.RWConfigLogMsgPayload_RWModel_set)

    def __init__(self):
        _RWConfigLogMsgPayload.RWConfigLogMsgPayload_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsgPayload())
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsgPayload

# Register RWConfigLogMsgPayload in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsgPayload_swigregister(RWConfigLogMsgPayload)
class RWConfigLogMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RWConfigLogMsgPayload.RWConfigLogMsgReader_bskLogger_get, _RWConfigLogMsgPayload.RWConfigLogMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RWConfigLogMsgPayload.RWConfigLogMsgReader_zeroMsgPayload_get, _RWConfigLogMsgPayload.RWConfigLogMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RWConfigLogMsgPayload.RWConfigLogMsgReader_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsgReader(*args))

    def __call__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader___call__(self)

    def isLinked(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader_isLinked(self)

    def isWritten(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader_isWritten(self)

    def timeWritten(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader_timeWritten(self)

    def moduleID(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _RWConfigLogMsgPayload.RWConfigLogMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RWConfigLogMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RWConfigLogMsgPayload import RWConfigLogMsg_C
            if type(source) == RWConfigLogMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RWConfigLogMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RWConfigLogMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RWConfigLogMsgPayload import RWConfigLogMsg_C
        except ImportError:
            return 0

        if type(source) == RWConfigLogMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsgReader

# Register RWConfigLogMsgReader in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsgReader_swigregister(RWConfigLogMsgReader)
class RWConfigLogMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigLogMsgPayload.RWConfigLogMsgWriter_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RWConfigLogMsgPayload.RWConfigLogMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsgWriter

# Register RWConfigLogMsgWriter in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsgWriter_swigregister(RWConfigLogMsgWriter)
class RWConfigLogMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RWConfigLogMsgPayload.RWConfigLogMsg_write_get, _RWConfigLogMsgPayload.RWConfigLogMsg_write_set)

    def addSubscriber(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsg_addSubscriber(self)

    def addAuthor(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RWConfigLogMsgPayload.RWConfigLogMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RWConfigLogMsgPayload.RWConfigLogMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RWConfigLogMsgPayload.RWConfigLogMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RWConfigLogMsgPayload.RWConfigLogMsg_zeroMsgPayload_get, _RWConfigLogMsgPayload.RWConfigLogMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsg_isLinked(self)

    def getPayloadSize(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RWConfigLogMsgPayload.RWConfigLogMsg_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsg())
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsg

# Register RWConfigLogMsg in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsg_swigregister(RWConfigLogMsg)
class RWConfigLogMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsgRecorder(*args))
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsgRecorder

    def SelfInit(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_clear(self)
    bskLogger = property(_RWConfigLogMsgPayload.RWConfigLogMsgRecorder_bskLogger_get, _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RWConfigLogMsgPayload.RWConfigLogMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RWConfigLogMsgRecorder in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsgRecorder_swigregister(RWConfigLogMsgRecorder)
class RWConfigLogMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_pop(self)

    def append(self, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_append(self, x)

    def empty(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_empty(self)

    def size(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_size(self)

    def swap(self, v):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_begin(self)

    def end(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_end(self)

    def rbegin(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_rend(self)

    def clear(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsgPayloadVector(*args))

    def push_back(self, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_front(self)

    def back(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsgPayloadVector

# Register RWConfigLogMsgPayloadVector in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsgPayloadVector_swigregister(RWConfigLogMsgPayloadVector)
class RWConfigLogMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_empty(self)

    def size(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_begin(self)

    def end(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_front(self)

    def back(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsgOutMsgsVector

# Register RWConfigLogMsgOutMsgsVector in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsVector_swigregister(RWConfigLogMsgOutMsgsVector)
class RWConfigLogMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsgOutMsgsPtrVector

# Register RWConfigLogMsgOutMsgsPtrVector in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsgOutMsgsPtrVector_swigregister(RWConfigLogMsgOutMsgsPtrVector)
class RWConfigLogMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_empty(self)

    def size(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_begin(self)

    def end(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_rend(self)

    def clear(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_front(self)

    def back(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsgInMsgsVector

# Register RWConfigLogMsgInMsgsVector in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsgInMsgsVector_swigregister(RWConfigLogMsgInMsgsVector)
class RWConfigLogMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_RWConfigLogMsgPayload.RWConfigLogMsg_C_header_get, _RWConfigLogMsgPayload.RWConfigLogMsg_C_header_set)
    payload = property(_RWConfigLogMsgPayload.RWConfigLogMsg_C_payload_get, _RWConfigLogMsgPayload.RWConfigLogMsg_C_payload_set)
    payloadPointer = property(_RWConfigLogMsgPayload.RWConfigLogMsg_C_payloadPointer_get, _RWConfigLogMsgPayload.RWConfigLogMsg_C_payloadPointer_set)
    headerPointer = property(_RWConfigLogMsgPayload.RWConfigLogMsg_C_headerPointer_get, _RWConfigLogMsgPayload.RWConfigLogMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import RWConfigLogMsg
        if type(source) == type(self):
            RWConfigLogMsg_C_subscribe(self, source)
        elif type(source) == RWConfigLogMsg:
            RWConfigLogMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe RWConfigLogMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import RWConfigLogMsg
        if type(source) == type(self):
            return (RWConfigLogMsg_C_isSubscribedTo(self, source))
        elif type(source) == RWConfigLogMsg:
            return (RWConfigLogMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import RWConfigLogMsgRecorder
        self.header.isLinked = 1
        return RWConfigLogMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        RWConfigLogMsg_C_addAuthor(self, self)
        if data:
            RWConfigLogMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        RWConfigLogMsg_C_addAuthor(self, self)
        RWConfigLogMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return RWConfigLogMsg_C_read(self)


    def __init__(self):
        _RWConfigLogMsgPayload.RWConfigLogMsg_C_swiginit(self, _RWConfigLogMsgPayload.new_RWConfigLogMsg_C())
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_RWConfigLogMsg_C

# Register RWConfigLogMsg_C in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.RWConfigLogMsg_C_swigregister(RWConfigLogMsg_C)

def RWConfigLogMsg_cpp_subscribe(subscriber, source):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_cpp_subscribe(subscriber, source)

def RWConfigLogMsg_C_subscribe(subscriber, source):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_subscribe(subscriber, source)

def RWConfigLogMsg_C_isSubscribedTo(subscriber, source):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_isSubscribedTo(subscriber, source)

def RWConfigLogMsg_cpp_isSubscribedTo(subscriber, source):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_cpp_isSubscribedTo(subscriber, source)

def RWConfigLogMsg_C_addAuthor(coowner, data):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_addAuthor(coowner, data)

def RWConfigLogMsg_C_init(owner):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_init(owner)

def RWConfigLogMsg_C_isLinked(data):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_isLinked(data)

def RWConfigLogMsg_C_isWritten(data):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_isWritten(data)

def RWConfigLogMsg_C_timeWritten(data):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_timeWritten(data)

def RWConfigLogMsg_C_moduleID(data):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_moduleID(data)

def RWConfigLogMsg_C_write(data, destination, moduleID, callTime):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_write(data, destination, moduleID, callTime)

def RWConfigLogMsg_C_read(source):
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_read(source)

def RWConfigLogMsg_C_zeroMsgPayload():
    return _RWConfigLogMsgPayload.RWConfigLogMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_RWConfigLogMsgPayload.MsgHeader_isLinked_get, _RWConfigLogMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_RWConfigLogMsgPayload.MsgHeader_isWritten_get, _RWConfigLogMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_RWConfigLogMsgPayload.MsgHeader_timeWritten_get, _RWConfigLogMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_RWConfigLogMsgPayload.MsgHeader_moduleID_get, _RWConfigLogMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _RWConfigLogMsgPayload.MsgHeader_swiginit(self, _RWConfigLogMsgPayload.new_MsgHeader())
    __swig_destroy__ = _RWConfigLogMsgPayload.delete_MsgHeader

# Register MsgHeader in _RWConfigLogMsgPayload:
_RWConfigLogMsgPayload.MsgHeader_swigregister(MsgHeader)

