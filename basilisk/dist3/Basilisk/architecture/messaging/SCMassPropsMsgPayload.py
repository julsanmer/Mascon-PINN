# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SCMassPropsMsgPayload
else:
    import _SCMassPropsMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SCMassPropsMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SCMassPropsMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SCMassPropsMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SCMassPropsMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SCMassPropsMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SCMassPropsMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SCMassPropsMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SCMassPropsMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SCMassPropsMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SCMassPropsMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SCMassPropsMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SCMassPropsMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SCMassPropsMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SCMassPropsMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SCMassPropsMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SCMassPropsMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SCMassPropsMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SCMassPropsMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SCMassPropsMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SCMassPropsMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SCMassPropsMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SCMassPropsMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SCMassPropsMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SCMassPropsMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SCMassPropsMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SCMassPropsMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SCMassPropsMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SCMassPropsMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SCMassPropsMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SCMassPropsMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SCMassPropsMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SCMassPropsMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCMassPropsMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCMassPropsMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SCMassPropsMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SCMassPropsMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SCMassPropsMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCMassPropsMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCMassPropsMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCMassPropsMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCMassPropsMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCMassPropsMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SCMassPropsMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SCMassPropsMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SCMassPropsMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SCMassPropsMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SCMassPropsMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SCMassPropsMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SCMassPropsMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SCMassPropsMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SCMassPropsMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SCMassPropsMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SCMassPropsMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SCMassPropsMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SCMassPropsMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SCMassPropsMsgPayload.TimeVector_swiginit(self, _SCMassPropsMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SCMassPropsMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SCMassPropsMsgPayload.TimeVector_front(self)

    def back(self):
        return _SCMassPropsMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SCMassPropsMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SCMassPropsMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SCMassPropsMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SCMassPropsMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SCMassPropsMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_TimeVector

# Register TimeVector in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCMassPropsMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCMassPropsMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SCMassPropsMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SCMassPropsMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SCMassPropsMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCMassPropsMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCMassPropsMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCMassPropsMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCMassPropsMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCMassPropsMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SCMassPropsMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SCMassPropsMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SCMassPropsMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SCMassPropsMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SCMassPropsMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SCMassPropsMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SCMassPropsMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SCMassPropsMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SCMassPropsMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SCMassPropsMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SCMassPropsMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SCMassPropsMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SCMassPropsMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SCMassPropsMsgPayload.DoubleVector_swiginit(self, _SCMassPropsMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SCMassPropsMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SCMassPropsMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SCMassPropsMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SCMassPropsMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SCMassPropsMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SCMassPropsMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SCMassPropsMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SCMassPropsMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_DoubleVector

# Register DoubleVector in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCMassPropsMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCMassPropsMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SCMassPropsMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SCMassPropsMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SCMassPropsMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCMassPropsMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCMassPropsMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCMassPropsMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCMassPropsMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCMassPropsMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SCMassPropsMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SCMassPropsMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SCMassPropsMsgPayload.StringVector_empty(self)

    def size(self):
        return _SCMassPropsMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SCMassPropsMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SCMassPropsMsgPayload.StringVector_begin(self)

    def end(self):
        return _SCMassPropsMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SCMassPropsMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SCMassPropsMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SCMassPropsMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SCMassPropsMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SCMassPropsMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SCMassPropsMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SCMassPropsMsgPayload.StringVector_swiginit(self, _SCMassPropsMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SCMassPropsMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SCMassPropsMsgPayload.StringVector_front(self)

    def back(self):
        return _SCMassPropsMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SCMassPropsMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SCMassPropsMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SCMassPropsMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SCMassPropsMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SCMassPropsMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_StringVector

# Register StringVector in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SCMassPropsMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SCMassPropsMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SCMassPropsMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SCMassPropsMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SCMassPropsMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SCMassPropsMsgPayload.NANO2SEC
SEC2NANO = _SCMassPropsMsgPayload.SEC2NANO
SEC2HOUR = _SCMassPropsMsgPayload.SEC2HOUR
BOOL_FALSE = _SCMassPropsMsgPayload.BOOL_FALSE
BOOL_TRUE = _SCMassPropsMsgPayload.BOOL_TRUE
AVAILABLE = _SCMassPropsMsgPayload.AVAILABLE
UNAVAILABLE = _SCMassPropsMsgPayload.UNAVAILABLE
BalancedWheels = _SCMassPropsMsgPayload.BalancedWheels
JitterSimple = _SCMassPropsMsgPayload.JitterSimple
JitterFullyCoupled = _SCMassPropsMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCMassPropsMsgPayload.SysModel_swiginit(self, _SCMassPropsMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SCMassPropsMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SCMassPropsMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SCMassPropsMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SCMassPropsMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SCMassPropsMsgPayload.SysModel_ModelTag_get, _SCMassPropsMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SCMassPropsMsgPayload.SysModel_CallCounts_get, _SCMassPropsMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SCMassPropsMsgPayload.SysModel_RNGSeed_get, _SCMassPropsMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SCMassPropsMsgPayload.SysModel_moduleID_get, _SCMassPropsMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SCMassPropsMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SCMassPropsMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SCMassPropsMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SCMassPropsMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SCMassPropsMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SCMassPropsMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SCMassPropsMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SCMassPropsMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SCMassPropsMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SCMassPropsMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SCMassPropsMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SCMassPropsMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SCMassPropsMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    massSC = property(_SCMassPropsMsgPayload.SCMassPropsMsgPayload_massSC_get, _SCMassPropsMsgPayload.SCMassPropsMsgPayload_massSC_set)
    c_B = property(_SCMassPropsMsgPayload.SCMassPropsMsgPayload_c_B_get, _SCMassPropsMsgPayload.SCMassPropsMsgPayload_c_B_set)
    ISC_PntB_B = property(_SCMassPropsMsgPayload.SCMassPropsMsgPayload_ISC_PntB_B_get, _SCMassPropsMsgPayload.SCMassPropsMsgPayload_ISC_PntB_B_set)

    def __init__(self):
        _SCMassPropsMsgPayload.SCMassPropsMsgPayload_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsgPayload())
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsgPayload

# Register SCMassPropsMsgPayload in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsgPayload_swigregister(SCMassPropsMsgPayload)
class SCMassPropsMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SCMassPropsMsgPayload.SCMassPropsMsgReader_bskLogger_get, _SCMassPropsMsgPayload.SCMassPropsMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SCMassPropsMsgPayload.SCMassPropsMsgReader_zeroMsgPayload_get, _SCMassPropsMsgPayload.SCMassPropsMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SCMassPropsMsgPayload.SCMassPropsMsgReader_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsgReader(*args))

    def __call__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader___call__(self)

    def isLinked(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader_isLinked(self)

    def isWritten(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader_isWritten(self)

    def timeWritten(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader_timeWritten(self)

    def moduleID(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _SCMassPropsMsgPayload.SCMassPropsMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SCMassPropsMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SCMassPropsMsgPayload import SCMassPropsMsg_C
            if type(source) == SCMassPropsMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SCMassPropsMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SCMassPropsMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SCMassPropsMsgPayload import SCMassPropsMsg_C
        except ImportError:
            return 0

        if type(source) == SCMassPropsMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsgReader

# Register SCMassPropsMsgReader in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsgReader_swigregister(SCMassPropsMsgReader)
class SCMassPropsMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCMassPropsMsgPayload.SCMassPropsMsgWriter_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SCMassPropsMsgPayload.SCMassPropsMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsgWriter

# Register SCMassPropsMsgWriter in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsgWriter_swigregister(SCMassPropsMsgWriter)
class SCMassPropsMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SCMassPropsMsgPayload.SCMassPropsMsg_write_get, _SCMassPropsMsgPayload.SCMassPropsMsg_write_set)

    def addSubscriber(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsg_addSubscriber(self)

    def addAuthor(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SCMassPropsMsgPayload.SCMassPropsMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SCMassPropsMsgPayload.SCMassPropsMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SCMassPropsMsgPayload.SCMassPropsMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SCMassPropsMsgPayload.SCMassPropsMsg_zeroMsgPayload_get, _SCMassPropsMsgPayload.SCMassPropsMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsg_isLinked(self)

    def getPayloadSize(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SCMassPropsMsgPayload.SCMassPropsMsg_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsg())
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsg

# Register SCMassPropsMsg in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsg_swigregister(SCMassPropsMsg)
class SCMassPropsMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsgRecorder(*args))
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsgRecorder

    def SelfInit(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_clear(self)
    bskLogger = property(_SCMassPropsMsgPayload.SCMassPropsMsgRecorder_bskLogger_get, _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SCMassPropsMsgPayload.SCMassPropsMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SCMassPropsMsgRecorder in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsgRecorder_swigregister(SCMassPropsMsgRecorder)
class SCMassPropsMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_pop(self)

    def append(self, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_append(self, x)

    def empty(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_empty(self)

    def size(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_size(self)

    def swap(self, v):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_begin(self)

    def end(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_end(self)

    def rbegin(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_rend(self)

    def clear(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsgPayloadVector(*args))

    def push_back(self, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_front(self)

    def back(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsgPayloadVector

# Register SCMassPropsMsgPayloadVector in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsgPayloadVector_swigregister(SCMassPropsMsgPayloadVector)
class SCMassPropsMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_empty(self)

    def size(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_begin(self)

    def end(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_front(self)

    def back(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsgOutMsgsVector

# Register SCMassPropsMsgOutMsgsVector in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsVector_swigregister(SCMassPropsMsgOutMsgsVector)
class SCMassPropsMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsgOutMsgsPtrVector

# Register SCMassPropsMsgOutMsgsPtrVector in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsgOutMsgsPtrVector_swigregister(SCMassPropsMsgOutMsgsPtrVector)
class SCMassPropsMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_empty(self)

    def size(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_begin(self)

    def end(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_rend(self)

    def clear(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_front(self)

    def back(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsgInMsgsVector

# Register SCMassPropsMsgInMsgsVector in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsgInMsgsVector_swigregister(SCMassPropsMsgInMsgsVector)
class SCMassPropsMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SCMassPropsMsgPayload.SCMassPropsMsg_C_header_get, _SCMassPropsMsgPayload.SCMassPropsMsg_C_header_set)
    payload = property(_SCMassPropsMsgPayload.SCMassPropsMsg_C_payload_get, _SCMassPropsMsgPayload.SCMassPropsMsg_C_payload_set)
    payloadPointer = property(_SCMassPropsMsgPayload.SCMassPropsMsg_C_payloadPointer_get, _SCMassPropsMsgPayload.SCMassPropsMsg_C_payloadPointer_set)
    headerPointer = property(_SCMassPropsMsgPayload.SCMassPropsMsg_C_headerPointer_get, _SCMassPropsMsgPayload.SCMassPropsMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SCMassPropsMsg
        if type(source) == type(self):
            SCMassPropsMsg_C_subscribe(self, source)
        elif type(source) == SCMassPropsMsg:
            SCMassPropsMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SCMassPropsMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SCMassPropsMsg
        if type(source) == type(self):
            return (SCMassPropsMsg_C_isSubscribedTo(self, source))
        elif type(source) == SCMassPropsMsg:
            return (SCMassPropsMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import SCMassPropsMsgRecorder
        self.header.isLinked = 1
        return SCMassPropsMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SCMassPropsMsg_C_addAuthor(self, self)
        if data:
            SCMassPropsMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SCMassPropsMsg_C_addAuthor(self, self)
        SCMassPropsMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SCMassPropsMsg_C_read(self)


    def __init__(self):
        _SCMassPropsMsgPayload.SCMassPropsMsg_C_swiginit(self, _SCMassPropsMsgPayload.new_SCMassPropsMsg_C())
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_SCMassPropsMsg_C

# Register SCMassPropsMsg_C in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.SCMassPropsMsg_C_swigregister(SCMassPropsMsg_C)

def SCMassPropsMsg_cpp_subscribe(subscriber, source):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_cpp_subscribe(subscriber, source)

def SCMassPropsMsg_C_subscribe(subscriber, source):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_subscribe(subscriber, source)

def SCMassPropsMsg_C_isSubscribedTo(subscriber, source):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_isSubscribedTo(subscriber, source)

def SCMassPropsMsg_cpp_isSubscribedTo(subscriber, source):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_cpp_isSubscribedTo(subscriber, source)

def SCMassPropsMsg_C_addAuthor(coowner, data):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_addAuthor(coowner, data)

def SCMassPropsMsg_C_init(owner):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_init(owner)

def SCMassPropsMsg_C_isLinked(data):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_isLinked(data)

def SCMassPropsMsg_C_isWritten(data):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_isWritten(data)

def SCMassPropsMsg_C_timeWritten(data):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_timeWritten(data)

def SCMassPropsMsg_C_moduleID(data):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_moduleID(data)

def SCMassPropsMsg_C_write(data, destination, moduleID, callTime):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_write(data, destination, moduleID, callTime)

def SCMassPropsMsg_C_read(source):
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_read(source)

def SCMassPropsMsg_C_zeroMsgPayload():
    return _SCMassPropsMsgPayload.SCMassPropsMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SCMassPropsMsgPayload.MsgHeader_isLinked_get, _SCMassPropsMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SCMassPropsMsgPayload.MsgHeader_isWritten_get, _SCMassPropsMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SCMassPropsMsgPayload.MsgHeader_timeWritten_get, _SCMassPropsMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SCMassPropsMsgPayload.MsgHeader_moduleID_get, _SCMassPropsMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SCMassPropsMsgPayload.MsgHeader_swiginit(self, _SCMassPropsMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SCMassPropsMsgPayload.delete_MsgHeader

# Register MsgHeader in _SCMassPropsMsgPayload:
_SCMassPropsMsgPayload.MsgHeader_swigregister(MsgHeader)

