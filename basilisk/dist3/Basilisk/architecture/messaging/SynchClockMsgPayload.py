# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SynchClockMsgPayload
else:
    import _SynchClockMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SynchClockMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SynchClockMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SynchClockMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SynchClockMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SynchClockMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SynchClockMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SynchClockMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SynchClockMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SynchClockMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SynchClockMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SynchClockMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SynchClockMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SynchClockMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SynchClockMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SynchClockMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SynchClockMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SynchClockMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SynchClockMsgPayload:
_SynchClockMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SynchClockMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SynchClockMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SynchClockMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SynchClockMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SynchClockMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SynchClockMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SynchClockMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SynchClockMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SynchClockMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SynchClockMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SynchClockMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SynchClockMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SynchClockMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SynchClockMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SynchClockMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SynchClockMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SynchClockMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SynchClockMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SynchClockMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SynchClockMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SynchClockMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SynchClockMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SynchClockMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SynchClockMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SynchClockMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SynchClockMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SynchClockMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SynchClockMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SynchClockMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SynchClockMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SynchClockMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SynchClockMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SynchClockMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SynchClockMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SynchClockMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SynchClockMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SynchClockMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SynchClockMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SynchClockMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SynchClockMsgPayload.TimeVector_swiginit(self, _SynchClockMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SynchClockMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SynchClockMsgPayload.TimeVector_front(self)

    def back(self):
        return _SynchClockMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SynchClockMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SynchClockMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SynchClockMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SynchClockMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SynchClockMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SynchClockMsgPayload.delete_TimeVector

# Register TimeVector in _SynchClockMsgPayload:
_SynchClockMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SynchClockMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SynchClockMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SynchClockMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SynchClockMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SynchClockMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SynchClockMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SynchClockMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SynchClockMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SynchClockMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SynchClockMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SynchClockMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SynchClockMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SynchClockMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SynchClockMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SynchClockMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SynchClockMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SynchClockMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SynchClockMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SynchClockMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SynchClockMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SynchClockMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SynchClockMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SynchClockMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SynchClockMsgPayload.DoubleVector_swiginit(self, _SynchClockMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SynchClockMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SynchClockMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SynchClockMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SynchClockMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SynchClockMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SynchClockMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SynchClockMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SynchClockMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SynchClockMsgPayload.delete_DoubleVector

# Register DoubleVector in _SynchClockMsgPayload:
_SynchClockMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SynchClockMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SynchClockMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SynchClockMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SynchClockMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SynchClockMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SynchClockMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SynchClockMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SynchClockMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SynchClockMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SynchClockMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SynchClockMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SynchClockMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SynchClockMsgPayload.StringVector_empty(self)

    def size(self):
        return _SynchClockMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SynchClockMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SynchClockMsgPayload.StringVector_begin(self)

    def end(self):
        return _SynchClockMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SynchClockMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SynchClockMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SynchClockMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SynchClockMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SynchClockMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SynchClockMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SynchClockMsgPayload.StringVector_swiginit(self, _SynchClockMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SynchClockMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SynchClockMsgPayload.StringVector_front(self)

    def back(self):
        return _SynchClockMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SynchClockMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SynchClockMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SynchClockMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SynchClockMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SynchClockMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SynchClockMsgPayload.delete_StringVector

# Register StringVector in _SynchClockMsgPayload:
_SynchClockMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SynchClockMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SynchClockMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SynchClockMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SynchClockMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SynchClockMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SynchClockMsgPayload.NANO2SEC
SEC2NANO = _SynchClockMsgPayload.SEC2NANO
SEC2HOUR = _SynchClockMsgPayload.SEC2HOUR
BOOL_FALSE = _SynchClockMsgPayload.BOOL_FALSE
BOOL_TRUE = _SynchClockMsgPayload.BOOL_TRUE
AVAILABLE = _SynchClockMsgPayload.AVAILABLE
UNAVAILABLE = _SynchClockMsgPayload.UNAVAILABLE
BalancedWheels = _SynchClockMsgPayload.BalancedWheels
JitterSimple = _SynchClockMsgPayload.JitterSimple
JitterFullyCoupled = _SynchClockMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SynchClockMsgPayload.SysModel_swiginit(self, _SynchClockMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SynchClockMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SynchClockMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SynchClockMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SynchClockMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SynchClockMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SynchClockMsgPayload.SysModel_ModelTag_get, _SynchClockMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SynchClockMsgPayload.SysModel_CallCounts_get, _SynchClockMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SynchClockMsgPayload.SysModel_RNGSeed_get, _SynchClockMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SynchClockMsgPayload.SysModel_moduleID_get, _SynchClockMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _SynchClockMsgPayload:
_SynchClockMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SynchClockMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SynchClockMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SynchClockMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SynchClockMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SynchClockMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SynchClockMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SynchClockMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SynchClockMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SynchClockMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SynchClockMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SynchClockMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SynchClockMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SynchClockMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    initTimeDelta = property(_SynchClockMsgPayload.SynchClockMsgPayload_initTimeDelta_get, _SynchClockMsgPayload.SynchClockMsgPayload_initTimeDelta_set)
    finalTimeDelta = property(_SynchClockMsgPayload.SynchClockMsgPayload_finalTimeDelta_get, _SynchClockMsgPayload.SynchClockMsgPayload_finalTimeDelta_set)
    overrunCounter = property(_SynchClockMsgPayload.SynchClockMsgPayload_overrunCounter_get, _SynchClockMsgPayload.SynchClockMsgPayload_overrunCounter_set)

    def __init__(self):
        _SynchClockMsgPayload.SynchClockMsgPayload_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsgPayload())
    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsgPayload

# Register SynchClockMsgPayload in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsgPayload_swigregister(SynchClockMsgPayload)
class SynchClockMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SynchClockMsgPayload.SynchClockMsgReader_bskLogger_get, _SynchClockMsgPayload.SynchClockMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SynchClockMsgPayload.SynchClockMsgReader_zeroMsgPayload_get, _SynchClockMsgPayload.SynchClockMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SynchClockMsgPayload.SynchClockMsgReader_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsgReader(*args))

    def __call__(self):
        return _SynchClockMsgPayload.SynchClockMsgReader___call__(self)

    def isLinked(self):
        return _SynchClockMsgPayload.SynchClockMsgReader_isLinked(self)

    def isWritten(self):
        return _SynchClockMsgPayload.SynchClockMsgReader_isWritten(self)

    def timeWritten(self):
        return _SynchClockMsgPayload.SynchClockMsgReader_timeWritten(self)

    def moduleID(self):
        return _SynchClockMsgPayload.SynchClockMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SynchClockMsgPayload.SynchClockMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _SynchClockMsgPayload.SynchClockMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _SynchClockMsgPayload.SynchClockMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SynchClockMsgPayload.SynchClockMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _SynchClockMsgPayload.SynchClockMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SynchClockMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SynchClockMsgPayload import SynchClockMsg_C
            if type(source) == SynchClockMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SynchClockMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SynchClockMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SynchClockMsgPayload import SynchClockMsg_C
        except ImportError:
            return 0

        if type(source) == SynchClockMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsgReader

# Register SynchClockMsgReader in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsgReader_swigregister(SynchClockMsgReader)
class SynchClockMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SynchClockMsgPayload.SynchClockMsgWriter_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SynchClockMsgPayload.SynchClockMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsgWriter

# Register SynchClockMsgWriter in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsgWriter_swigregister(SynchClockMsgWriter)
class SynchClockMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SynchClockMsgPayload.SynchClockMsg_write_get, _SynchClockMsgPayload.SynchClockMsg_write_set)

    def addSubscriber(self):
        return _SynchClockMsgPayload.SynchClockMsg_addSubscriber(self)

    def addAuthor(self):
        return _SynchClockMsgPayload.SynchClockMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SynchClockMsgPayload.SynchClockMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SynchClockMsgPayload.SynchClockMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SynchClockMsgPayload.SynchClockMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SynchClockMsgPayload.SynchClockMsg_zeroMsgPayload_get, _SynchClockMsgPayload.SynchClockMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SynchClockMsgPayload.SynchClockMsg_isLinked(self)

    def getPayloadSize(self):
        return _SynchClockMsgPayload.SynchClockMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SynchClockMsgPayload.SynchClockMsg_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsg())
    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsg

# Register SynchClockMsg in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsg_swigregister(SynchClockMsg)
class SynchClockMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SynchClockMsgPayload.SynchClockMsgRecorder_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsgRecorder(*args))
    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsgRecorder

    def SelfInit(self):
        return _SynchClockMsgPayload.SynchClockMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SynchClockMsgPayload.SynchClockMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SynchClockMsgPayload.SynchClockMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SynchClockMsgPayload.SynchClockMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SynchClockMsgPayload.SynchClockMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SynchClockMsgPayload.SynchClockMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SynchClockMsgPayload.SynchClockMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _SynchClockMsgPayload.SynchClockMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SynchClockMsgPayload.SynchClockMsgRecorder_clear(self)
    bskLogger = property(_SynchClockMsgPayload.SynchClockMsgRecorder_bskLogger_get, _SynchClockMsgPayload.SynchClockMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SynchClockMsgPayload.SynchClockMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SynchClockMsgRecorder in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsgRecorder_swigregister(SynchClockMsgRecorder)
class SynchClockMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_pop(self)

    def append(self, x):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_append(self, x)

    def empty(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_empty(self)

    def size(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_size(self)

    def swap(self, v):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_begin(self)

    def end(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_end(self)

    def rbegin(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_rend(self)

    def clear(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SynchClockMsgPayload.SynchClockMsgPayloadVector_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsgPayloadVector(*args))

    def push_back(self, x):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_front(self)

    def back(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SynchClockMsgPayload.SynchClockMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsgPayloadVector

# Register SynchClockMsgPayloadVector in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsgPayloadVector_swigregister(SynchClockMsgPayloadVector)
class SynchClockMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_empty(self)

    def size(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_begin(self)

    def end(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_front(self)

    def back(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsgOutMsgsVector

# Register SynchClockMsgOutMsgsVector in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsgOutMsgsVector_swigregister(SynchClockMsgOutMsgsVector)
class SynchClockMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsgOutMsgsPtrVector

# Register SynchClockMsgOutMsgsPtrVector in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsgOutMsgsPtrVector_swigregister(SynchClockMsgOutMsgsPtrVector)
class SynchClockMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_empty(self)

    def size(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_begin(self)

    def end(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_rend(self)

    def clear(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SynchClockMsgPayload.SynchClockMsgInMsgsVector_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_front(self)

    def back(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SynchClockMsgPayload.SynchClockMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsgInMsgsVector

# Register SynchClockMsgInMsgsVector in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsgInMsgsVector_swigregister(SynchClockMsgInMsgsVector)
class SynchClockMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SynchClockMsgPayload.SynchClockMsg_C_header_get, _SynchClockMsgPayload.SynchClockMsg_C_header_set)
    payload = property(_SynchClockMsgPayload.SynchClockMsg_C_payload_get, _SynchClockMsgPayload.SynchClockMsg_C_payload_set)
    payloadPointer = property(_SynchClockMsgPayload.SynchClockMsg_C_payloadPointer_get, _SynchClockMsgPayload.SynchClockMsg_C_payloadPointer_set)
    headerPointer = property(_SynchClockMsgPayload.SynchClockMsg_C_headerPointer_get, _SynchClockMsgPayload.SynchClockMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SynchClockMsg
        if type(source) == type(self):
            SynchClockMsg_C_subscribe(self, source)
        elif type(source) == SynchClockMsg:
            SynchClockMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SynchClockMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SynchClockMsg
        if type(source) == type(self):
            return (SynchClockMsg_C_isSubscribedTo(self, source))
        elif type(source) == SynchClockMsg:
            return (SynchClockMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import SynchClockMsgRecorder
        self.header.isLinked = 1
        return SynchClockMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SynchClockMsg_C_addAuthor(self, self)
        if data:
            SynchClockMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SynchClockMsg_C_addAuthor(self, self)
        SynchClockMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SynchClockMsg_C_read(self)


    def __init__(self):
        _SynchClockMsgPayload.SynchClockMsg_C_swiginit(self, _SynchClockMsgPayload.new_SynchClockMsg_C())
    __swig_destroy__ = _SynchClockMsgPayload.delete_SynchClockMsg_C

# Register SynchClockMsg_C in _SynchClockMsgPayload:
_SynchClockMsgPayload.SynchClockMsg_C_swigregister(SynchClockMsg_C)

def SynchClockMsg_cpp_subscribe(subscriber, source):
    return _SynchClockMsgPayload.SynchClockMsg_cpp_subscribe(subscriber, source)

def SynchClockMsg_C_subscribe(subscriber, source):
    return _SynchClockMsgPayload.SynchClockMsg_C_subscribe(subscriber, source)

def SynchClockMsg_C_isSubscribedTo(subscriber, source):
    return _SynchClockMsgPayload.SynchClockMsg_C_isSubscribedTo(subscriber, source)

def SynchClockMsg_cpp_isSubscribedTo(subscriber, source):
    return _SynchClockMsgPayload.SynchClockMsg_cpp_isSubscribedTo(subscriber, source)

def SynchClockMsg_C_addAuthor(coowner, data):
    return _SynchClockMsgPayload.SynchClockMsg_C_addAuthor(coowner, data)

def SynchClockMsg_C_init(owner):
    return _SynchClockMsgPayload.SynchClockMsg_C_init(owner)

def SynchClockMsg_C_isLinked(data):
    return _SynchClockMsgPayload.SynchClockMsg_C_isLinked(data)

def SynchClockMsg_C_isWritten(data):
    return _SynchClockMsgPayload.SynchClockMsg_C_isWritten(data)

def SynchClockMsg_C_timeWritten(data):
    return _SynchClockMsgPayload.SynchClockMsg_C_timeWritten(data)

def SynchClockMsg_C_moduleID(data):
    return _SynchClockMsgPayload.SynchClockMsg_C_moduleID(data)

def SynchClockMsg_C_write(data, destination, moduleID, callTime):
    return _SynchClockMsgPayload.SynchClockMsg_C_write(data, destination, moduleID, callTime)

def SynchClockMsg_C_read(source):
    return _SynchClockMsgPayload.SynchClockMsg_C_read(source)

def SynchClockMsg_C_zeroMsgPayload():
    return _SynchClockMsgPayload.SynchClockMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SynchClockMsgPayload.MsgHeader_isLinked_get, _SynchClockMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SynchClockMsgPayload.MsgHeader_isWritten_get, _SynchClockMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SynchClockMsgPayload.MsgHeader_timeWritten_get, _SynchClockMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SynchClockMsgPayload.MsgHeader_moduleID_get, _SynchClockMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SynchClockMsgPayload.MsgHeader_swiginit(self, _SynchClockMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SynchClockMsgPayload.delete_MsgHeader

# Register MsgHeader in _SynchClockMsgPayload:
_SynchClockMsgPayload.MsgHeader_swigregister(MsgHeader)

