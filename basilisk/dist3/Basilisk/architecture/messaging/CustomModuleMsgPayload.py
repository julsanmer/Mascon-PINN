# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CustomModuleMsgPayload
else:
    import _CustomModuleMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CustomModuleMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CustomModuleMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CustomModuleMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CustomModuleMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CustomModuleMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CustomModuleMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CustomModuleMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CustomModuleMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CustomModuleMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CustomModuleMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CustomModuleMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CustomModuleMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CustomModuleMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CustomModuleMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CustomModuleMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CustomModuleMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CustomModuleMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CustomModuleMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CustomModuleMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CustomModuleMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CustomModuleMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CustomModuleMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CustomModuleMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CustomModuleMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CustomModuleMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CustomModuleMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CustomModuleMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CustomModuleMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CustomModuleMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CustomModuleMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CustomModuleMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CustomModuleMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CustomModuleMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CustomModuleMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CustomModuleMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CustomModuleMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CustomModuleMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CustomModuleMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CustomModuleMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CustomModuleMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CustomModuleMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CustomModuleMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CustomModuleMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CustomModuleMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleMsgPayload.TimeVector_swiginit(self, _CustomModuleMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CustomModuleMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CustomModuleMsgPayload.TimeVector_front(self)

    def back(self):
        return _CustomModuleMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CustomModuleMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CustomModuleMsgPayload.delete_TimeVector

# Register TimeVector in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CustomModuleMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CustomModuleMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CustomModuleMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CustomModuleMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CustomModuleMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CustomModuleMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CustomModuleMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CustomModuleMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CustomModuleMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CustomModuleMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CustomModuleMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleMsgPayload.DoubleVector_swiginit(self, _CustomModuleMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CustomModuleMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CustomModuleMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CustomModuleMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CustomModuleMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CustomModuleMsgPayload.delete_DoubleVector

# Register DoubleVector in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CustomModuleMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CustomModuleMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CustomModuleMsgPayload.StringVector_empty(self)

    def size(self):
        return _CustomModuleMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CustomModuleMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CustomModuleMsgPayload.StringVector_begin(self)

    def end(self):
        return _CustomModuleMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CustomModuleMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CustomModuleMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CustomModuleMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CustomModuleMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleMsgPayload.StringVector_swiginit(self, _CustomModuleMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CustomModuleMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CustomModuleMsgPayload.StringVector_front(self)

    def back(self):
        return _CustomModuleMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CustomModuleMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CustomModuleMsgPayload.delete_StringVector

# Register StringVector in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CustomModuleMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CustomModuleMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CustomModuleMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CustomModuleMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CustomModuleMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CustomModuleMsgPayload.NANO2SEC
SEC2NANO = _CustomModuleMsgPayload.SEC2NANO
SEC2HOUR = _CustomModuleMsgPayload.SEC2HOUR
BOOL_FALSE = _CustomModuleMsgPayload.BOOL_FALSE
BOOL_TRUE = _CustomModuleMsgPayload.BOOL_TRUE
AVAILABLE = _CustomModuleMsgPayload.AVAILABLE
UNAVAILABLE = _CustomModuleMsgPayload.UNAVAILABLE
BalancedWheels = _CustomModuleMsgPayload.BalancedWheels
JitterSimple = _CustomModuleMsgPayload.JitterSimple
JitterFullyCoupled = _CustomModuleMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CustomModuleMsgPayload.SysModel_swiginit(self, _CustomModuleMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CustomModuleMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CustomModuleMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CustomModuleMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CustomModuleMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CustomModuleMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CustomModuleMsgPayload.SysModel_ModelTag_get, _CustomModuleMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CustomModuleMsgPayload.SysModel_CallCounts_get, _CustomModuleMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CustomModuleMsgPayload.SysModel_RNGSeed_get, _CustomModuleMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CustomModuleMsgPayload.SysModel_moduleID_get, _CustomModuleMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CustomModuleMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CustomModuleMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CustomModuleMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CustomModuleMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CustomModuleMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CustomModuleMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CustomModuleMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CustomModuleMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CustomModuleMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CustomModuleMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CustomModuleMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CustomModuleMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CustomModuleMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataVector = property(_CustomModuleMsgPayload.CustomModuleMsgPayload_dataVector_get, _CustomModuleMsgPayload.CustomModuleMsgPayload_dataVector_set)

    def __init__(self):
        _CustomModuleMsgPayload.CustomModuleMsgPayload_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsgPayload())
    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsgPayload

# Register CustomModuleMsgPayload in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsgPayload_swigregister(CustomModuleMsgPayload)
class CustomModuleMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CustomModuleMsgPayload.CustomModuleMsgReader_bskLogger_get, _CustomModuleMsgPayload.CustomModuleMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CustomModuleMsgPayload.CustomModuleMsgReader_zeroMsgPayload_get, _CustomModuleMsgPayload.CustomModuleMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CustomModuleMsgPayload.CustomModuleMsgReader_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsgReader(*args))

    def __call__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgReader___call__(self)

    def isLinked(self):
        return _CustomModuleMsgPayload.CustomModuleMsgReader_isLinked(self)

    def isWritten(self):
        return _CustomModuleMsgPayload.CustomModuleMsgReader_isWritten(self)

    def timeWritten(self):
        return _CustomModuleMsgPayload.CustomModuleMsgReader_timeWritten(self)

    def moduleID(self):
        return _CustomModuleMsgPayload.CustomModuleMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CustomModuleMsgPayload.CustomModuleMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _CustomModuleMsgPayload.CustomModuleMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _CustomModuleMsgPayload.CustomModuleMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CustomModuleMsgPayload.CustomModuleMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _CustomModuleMsgPayload.CustomModuleMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CustomModuleMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CustomModuleMsgPayload import CustomModuleMsg_C
            if type(source) == CustomModuleMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CustomModuleMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CustomModuleMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CustomModuleMsgPayload import CustomModuleMsg_C
        except ImportError:
            return 0

        if type(source) == CustomModuleMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsgReader

# Register CustomModuleMsgReader in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsgReader_swigregister(CustomModuleMsgReader)
class CustomModuleMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CustomModuleMsgPayload.CustomModuleMsgWriter_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CustomModuleMsgPayload.CustomModuleMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsgWriter

# Register CustomModuleMsgWriter in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsgWriter_swigregister(CustomModuleMsgWriter)
class CustomModuleMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CustomModuleMsgPayload.CustomModuleMsg_write_get, _CustomModuleMsgPayload.CustomModuleMsg_write_set)

    def addSubscriber(self):
        return _CustomModuleMsgPayload.CustomModuleMsg_addSubscriber(self)

    def addAuthor(self):
        return _CustomModuleMsgPayload.CustomModuleMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CustomModuleMsgPayload.CustomModuleMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CustomModuleMsgPayload.CustomModuleMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CustomModuleMsgPayload.CustomModuleMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CustomModuleMsgPayload.CustomModuleMsg_zeroMsgPayload_get, _CustomModuleMsgPayload.CustomModuleMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CustomModuleMsgPayload.CustomModuleMsg_isLinked(self)

    def getPayloadSize(self):
        return _CustomModuleMsgPayload.CustomModuleMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CustomModuleMsgPayload.CustomModuleMsg_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsg())
    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsg

# Register CustomModuleMsg in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsg_swigregister(CustomModuleMsg)
class CustomModuleMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CustomModuleMsgPayload.CustomModuleMsgRecorder_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsgRecorder(*args))
    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsgRecorder

    def SelfInit(self):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder_clear(self)
    bskLogger = property(_CustomModuleMsgPayload.CustomModuleMsgRecorder_bskLogger_get, _CustomModuleMsgPayload.CustomModuleMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CustomModuleMsgPayload.CustomModuleMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CustomModuleMsgRecorder in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsgRecorder_swigregister(CustomModuleMsgRecorder)
class CustomModuleMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_pop(self)

    def append(self, x):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_append(self, x)

    def empty(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_empty(self)

    def size(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_size(self)

    def swap(self, v):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_begin(self)

    def end(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_end(self)

    def rbegin(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_rend(self)

    def clear(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsgPayloadVector(*args))

    def push_back(self, x):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_front(self)

    def back(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleMsgPayload.CustomModuleMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsgPayloadVector

# Register CustomModuleMsgPayloadVector in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsgPayloadVector_swigregister(CustomModuleMsgPayloadVector)
class CustomModuleMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_empty(self)

    def size(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_begin(self)

    def end(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_front(self)

    def back(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsgOutMsgsVector

# Register CustomModuleMsgOutMsgsVector in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsgOutMsgsVector_swigregister(CustomModuleMsgOutMsgsVector)
class CustomModuleMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsgOutMsgsPtrVector

# Register CustomModuleMsgOutMsgsPtrVector in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsgOutMsgsPtrVector_swigregister(CustomModuleMsgOutMsgsPtrVector)
class CustomModuleMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_empty(self)

    def size(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_begin(self)

    def end(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_rend(self)

    def clear(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_front(self)

    def back(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsgInMsgsVector

# Register CustomModuleMsgInMsgsVector in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsgInMsgsVector_swigregister(CustomModuleMsgInMsgsVector)
class CustomModuleMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CustomModuleMsgPayload.CustomModuleMsg_C_header_get, _CustomModuleMsgPayload.CustomModuleMsg_C_header_set)
    payload = property(_CustomModuleMsgPayload.CustomModuleMsg_C_payload_get, _CustomModuleMsgPayload.CustomModuleMsg_C_payload_set)
    payloadPointer = property(_CustomModuleMsgPayload.CustomModuleMsg_C_payloadPointer_get, _CustomModuleMsgPayload.CustomModuleMsg_C_payloadPointer_set)
    headerPointer = property(_CustomModuleMsgPayload.CustomModuleMsg_C_headerPointer_get, _CustomModuleMsgPayload.CustomModuleMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CustomModuleMsg
        if type(source) == type(self):
            CustomModuleMsg_C_subscribe(self, source)
        elif type(source) == CustomModuleMsg:
            CustomModuleMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CustomModuleMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CustomModuleMsg
        if type(source) == type(self):
            return (CustomModuleMsg_C_isSubscribedTo(self, source))
        elif type(source) == CustomModuleMsg:
            return (CustomModuleMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import CustomModuleMsgRecorder
        self.header.isLinked = 1
        return CustomModuleMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CustomModuleMsg_C_addAuthor(self, self)
        if data:
            CustomModuleMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CustomModuleMsg_C_addAuthor(self, self)
        CustomModuleMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CustomModuleMsg_C_read(self)


    def __init__(self):
        _CustomModuleMsgPayload.CustomModuleMsg_C_swiginit(self, _CustomModuleMsgPayload.new_CustomModuleMsg_C())
    __swig_destroy__ = _CustomModuleMsgPayload.delete_CustomModuleMsg_C

# Register CustomModuleMsg_C in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.CustomModuleMsg_C_swigregister(CustomModuleMsg_C)

def CustomModuleMsg_cpp_subscribe(subscriber, source):
    return _CustomModuleMsgPayload.CustomModuleMsg_cpp_subscribe(subscriber, source)

def CustomModuleMsg_C_subscribe(subscriber, source):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_subscribe(subscriber, source)

def CustomModuleMsg_C_isSubscribedTo(subscriber, source):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_isSubscribedTo(subscriber, source)

def CustomModuleMsg_cpp_isSubscribedTo(subscriber, source):
    return _CustomModuleMsgPayload.CustomModuleMsg_cpp_isSubscribedTo(subscriber, source)

def CustomModuleMsg_C_addAuthor(coowner, data):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_addAuthor(coowner, data)

def CustomModuleMsg_C_init(owner):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_init(owner)

def CustomModuleMsg_C_isLinked(data):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_isLinked(data)

def CustomModuleMsg_C_isWritten(data):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_isWritten(data)

def CustomModuleMsg_C_timeWritten(data):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_timeWritten(data)

def CustomModuleMsg_C_moduleID(data):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_moduleID(data)

def CustomModuleMsg_C_write(data, destination, moduleID, callTime):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_write(data, destination, moduleID, callTime)

def CustomModuleMsg_C_read(source):
    return _CustomModuleMsgPayload.CustomModuleMsg_C_read(source)

def CustomModuleMsg_C_zeroMsgPayload():
    return _CustomModuleMsgPayload.CustomModuleMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CustomModuleMsgPayload.MsgHeader_isLinked_get, _CustomModuleMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CustomModuleMsgPayload.MsgHeader_isWritten_get, _CustomModuleMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CustomModuleMsgPayload.MsgHeader_timeWritten_get, _CustomModuleMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CustomModuleMsgPayload.MsgHeader_moduleID_get, _CustomModuleMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CustomModuleMsgPayload.MsgHeader_swiginit(self, _CustomModuleMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CustomModuleMsgPayload.delete_MsgHeader

# Register MsgHeader in _CustomModuleMsgPayload:
_CustomModuleMsgPayload.MsgHeader_swigregister(MsgHeader)

