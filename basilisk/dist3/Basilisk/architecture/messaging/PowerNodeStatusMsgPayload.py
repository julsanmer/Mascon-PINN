# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PowerNodeStatusMsgPayload
else:
    import _PowerNodeStatusMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PowerNodeStatusMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PowerNodeStatusMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PowerNodeStatusMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PowerNodeStatusMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PowerNodeStatusMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PowerNodeStatusMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PowerNodeStatusMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PowerNodeStatusMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PowerNodeStatusMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PowerNodeStatusMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PowerNodeStatusMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PowerNodeStatusMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PowerNodeStatusMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PowerNodeStatusMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PowerNodeStatusMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PowerNodeStatusMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PowerNodeStatusMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PowerNodeStatusMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PowerNodeStatusMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PowerNodeStatusMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PowerNodeStatusMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PowerNodeStatusMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PowerNodeStatusMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PowerNodeStatusMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeStatusMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeStatusMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeStatusMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PowerNodeStatusMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeStatusMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeStatusMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeStatusMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeStatusMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeStatusMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PowerNodeStatusMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PowerNodeStatusMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PowerNodeStatusMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PowerNodeStatusMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PowerNodeStatusMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PowerNodeStatusMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PowerNodeStatusMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PowerNodeStatusMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PowerNodeStatusMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PowerNodeStatusMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeStatusMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeStatusMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.TimeVector_swiginit(self, _PowerNodeStatusMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PowerNodeStatusMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PowerNodeStatusMsgPayload.TimeVector_front(self)

    def back(self):
        return _PowerNodeStatusMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PowerNodeStatusMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeStatusMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeStatusMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeStatusMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeStatusMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_TimeVector

# Register TimeVector in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeStatusMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeStatusMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PowerNodeStatusMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeStatusMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeStatusMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeStatusMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeStatusMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PowerNodeStatusMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PowerNodeStatusMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeStatusMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.DoubleVector_swiginit(self, _PowerNodeStatusMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PowerNodeStatusMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PowerNodeStatusMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeStatusMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeStatusMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeStatusMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeStatusMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_DoubleVector

# Register DoubleVector in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeStatusMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeStatusMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeStatusMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PowerNodeStatusMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeStatusMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeStatusMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeStatusMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeStatusMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeStatusMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PowerNodeStatusMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PowerNodeStatusMsgPayload.StringVector_empty(self)

    def size(self):
        return _PowerNodeStatusMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PowerNodeStatusMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PowerNodeStatusMsgPayload.StringVector_begin(self)

    def end(self):
        return _PowerNodeStatusMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PowerNodeStatusMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PowerNodeStatusMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PowerNodeStatusMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PowerNodeStatusMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeStatusMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeStatusMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.StringVector_swiginit(self, _PowerNodeStatusMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PowerNodeStatusMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PowerNodeStatusMsgPayload.StringVector_front(self)

    def back(self):
        return _PowerNodeStatusMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PowerNodeStatusMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeStatusMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeStatusMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeStatusMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeStatusMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_StringVector

# Register StringVector in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PowerNodeStatusMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PowerNodeStatusMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PowerNodeStatusMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PowerNodeStatusMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PowerNodeStatusMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PowerNodeStatusMsgPayload.NANO2SEC
SEC2NANO = _PowerNodeStatusMsgPayload.SEC2NANO
SEC2HOUR = _PowerNodeStatusMsgPayload.SEC2HOUR
BOOL_FALSE = _PowerNodeStatusMsgPayload.BOOL_FALSE
BOOL_TRUE = _PowerNodeStatusMsgPayload.BOOL_TRUE
AVAILABLE = _PowerNodeStatusMsgPayload.AVAILABLE
UNAVAILABLE = _PowerNodeStatusMsgPayload.UNAVAILABLE
BalancedWheels = _PowerNodeStatusMsgPayload.BalancedWheels
JitterSimple = _PowerNodeStatusMsgPayload.JitterSimple
JitterFullyCoupled = _PowerNodeStatusMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.SysModel_swiginit(self, _PowerNodeStatusMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PowerNodeStatusMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PowerNodeStatusMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PowerNodeStatusMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PowerNodeStatusMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PowerNodeStatusMsgPayload.SysModel_ModelTag_get, _PowerNodeStatusMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PowerNodeStatusMsgPayload.SysModel_CallCounts_get, _PowerNodeStatusMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PowerNodeStatusMsgPayload.SysModel_RNGSeed_get, _PowerNodeStatusMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PowerNodeStatusMsgPayload.SysModel_moduleID_get, _PowerNodeStatusMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PowerNodeStatusMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PowerNodeStatusMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PowerNodeStatusMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PowerNodeStatusMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PowerNodeStatusMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PowerNodeStatusMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PowerNodeStatusMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PowerNodeStatusMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PowerNodeStatusMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PowerNodeStatusMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PowerNodeStatusMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PowerNodeStatusMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PowerNodeStatusMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    powerStatus = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayload_powerStatus_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayload_powerStatus_set)

    def __init__(self):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayload_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsgPayload())
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsgPayload

# Register PowerNodeStatusMsgPayload in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayload_swigregister(PowerNodeStatusMsgPayload)
class PowerNodeStatusMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_bskLogger_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_zeroMsgPayload_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsgReader(*args))

    def __call__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader___call__(self)

    def isLinked(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_isLinked(self)

    def isWritten(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_isWritten(self)

    def timeWritten(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_timeWritten(self)

    def moduleID(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PowerNodeStatusMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PowerNodeStatusMsgPayload import PowerNodeStatusMsg_C
            if type(source) == PowerNodeStatusMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PowerNodeStatusMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PowerNodeStatusMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PowerNodeStatusMsgPayload import PowerNodeStatusMsg_C
        except ImportError:
            return 0

        if type(source) == PowerNodeStatusMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsgReader

# Register PowerNodeStatusMsgReader in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsgReader_swigregister(PowerNodeStatusMsgReader)
class PowerNodeStatusMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsgWriter_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsgWriter

# Register PowerNodeStatusMsgWriter in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsgWriter_swigregister(PowerNodeStatusMsgWriter)
class PowerNodeStatusMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsg_write_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_write_set)

    def addSubscriber(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_addSubscriber(self)

    def addAuthor(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsg_zeroMsgPayload_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_isLinked(self)

    def getPayloadSize(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsg())
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsg

# Register PowerNodeStatusMsg in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsg_swigregister(PowerNodeStatusMsg)
class PowerNodeStatusMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsgRecorder(*args))
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsgRecorder

    def SelfInit(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_clear(self)
    bskLogger = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_bskLogger_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PowerNodeStatusMsgRecorder in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsgRecorder_swigregister(PowerNodeStatusMsgRecorder)
class PowerNodeStatusMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_pop(self)

    def append(self, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_append(self, x)

    def empty(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_empty(self)

    def size(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_size(self)

    def swap(self, v):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_begin(self)

    def end(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_end(self)

    def rbegin(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_rend(self)

    def clear(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsgPayloadVector(*args))

    def push_back(self, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_front(self)

    def back(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsgPayloadVector

# Register PowerNodeStatusMsgPayloadVector in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsgPayloadVector_swigregister(PowerNodeStatusMsgPayloadVector)
class PowerNodeStatusMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_empty(self)

    def size(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_begin(self)

    def end(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_front(self)

    def back(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsgOutMsgsVector

# Register PowerNodeStatusMsgOutMsgsVector in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsVector_swigregister(PowerNodeStatusMsgOutMsgsVector)
class PowerNodeStatusMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsgOutMsgsPtrVector

# Register PowerNodeStatusMsgOutMsgsPtrVector in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsgOutMsgsPtrVector_swigregister(PowerNodeStatusMsgOutMsgsPtrVector)
class PowerNodeStatusMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_empty(self)

    def size(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_begin(self)

    def end(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_rend(self)

    def clear(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_front(self)

    def back(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsgInMsgsVector

# Register PowerNodeStatusMsgInMsgsVector in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsgInMsgsVector_swigregister(PowerNodeStatusMsgInMsgsVector)
class PowerNodeStatusMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_header_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_header_set)
    payload = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_payload_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_payload_set)
    payloadPointer = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_payloadPointer_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_payloadPointer_set)
    headerPointer = property(_PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_headerPointer_get, _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PowerNodeStatusMsg
        if type(source) == type(self):
            PowerNodeStatusMsg_C_subscribe(self, source)
        elif type(source) == PowerNodeStatusMsg:
            PowerNodeStatusMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PowerNodeStatusMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PowerNodeStatusMsg
        if type(source) == type(self):
            return (PowerNodeStatusMsg_C_isSubscribedTo(self, source))
        elif type(source) == PowerNodeStatusMsg:
            return (PowerNodeStatusMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import PowerNodeStatusMsgRecorder
        self.header.isLinked = 1
        return PowerNodeStatusMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PowerNodeStatusMsg_C_addAuthor(self, self)
        if data:
            PowerNodeStatusMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PowerNodeStatusMsg_C_addAuthor(self, self)
        PowerNodeStatusMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PowerNodeStatusMsg_C_read(self)


    def __init__(self):
        _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_swiginit(self, _PowerNodeStatusMsgPayload.new_PowerNodeStatusMsg_C())
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_PowerNodeStatusMsg_C

# Register PowerNodeStatusMsg_C in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_swigregister(PowerNodeStatusMsg_C)

def PowerNodeStatusMsg_cpp_subscribe(subscriber, source):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_cpp_subscribe(subscriber, source)

def PowerNodeStatusMsg_C_subscribe(subscriber, source):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_subscribe(subscriber, source)

def PowerNodeStatusMsg_C_isSubscribedTo(subscriber, source):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_isSubscribedTo(subscriber, source)

def PowerNodeStatusMsg_cpp_isSubscribedTo(subscriber, source):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_cpp_isSubscribedTo(subscriber, source)

def PowerNodeStatusMsg_C_addAuthor(coowner, data):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_addAuthor(coowner, data)

def PowerNodeStatusMsg_C_init(owner):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_init(owner)

def PowerNodeStatusMsg_C_isLinked(data):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_isLinked(data)

def PowerNodeStatusMsg_C_isWritten(data):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_isWritten(data)

def PowerNodeStatusMsg_C_timeWritten(data):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_timeWritten(data)

def PowerNodeStatusMsg_C_moduleID(data):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_moduleID(data)

def PowerNodeStatusMsg_C_write(data, destination, moduleID, callTime):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_write(data, destination, moduleID, callTime)

def PowerNodeStatusMsg_C_read(source):
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_read(source)

def PowerNodeStatusMsg_C_zeroMsgPayload():
    return _PowerNodeStatusMsgPayload.PowerNodeStatusMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PowerNodeStatusMsgPayload.MsgHeader_isLinked_get, _PowerNodeStatusMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PowerNodeStatusMsgPayload.MsgHeader_isWritten_get, _PowerNodeStatusMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PowerNodeStatusMsgPayload.MsgHeader_timeWritten_get, _PowerNodeStatusMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PowerNodeStatusMsgPayload.MsgHeader_moduleID_get, _PowerNodeStatusMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PowerNodeStatusMsgPayload.MsgHeader_swiginit(self, _PowerNodeStatusMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PowerNodeStatusMsgPayload.delete_MsgHeader

# Register MsgHeader in _PowerNodeStatusMsgPayload:
_PowerNodeStatusMsgPayload.MsgHeader_swigregister(MsgHeader)

