# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IMUSensorMsgPayload
else:
    import _IMUSensorMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IMUSensorMsgPayload.delete_SwigPyIterator

    def value(self):
        return _IMUSensorMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IMUSensorMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IMUSensorMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IMUSensorMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IMUSensorMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IMUSensorMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _IMUSensorMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _IMUSensorMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _IMUSensorMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IMUSensorMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IMUSensorMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IMUSensorMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IMUSensorMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IMUSensorMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IMUSensorMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IMUSensorMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _IMUSensorMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _IMUSensorMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _IMUSensorMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _IMUSensorMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _IMUSensorMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _IMUSensorMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _IMUSensorMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _IMUSensorMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _IMUSensorMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _IMUSensorMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _IMUSensorMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _IMUSensorMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _IMUSensorMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _IMUSensorMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _IMUSensorMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _IMUSensorMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _IMUSensorMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _IMUSensorMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _IMUSensorMsgPayload.TimeVector_empty(self)

    def size(self):
        return _IMUSensorMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _IMUSensorMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _IMUSensorMsgPayload.TimeVector_begin(self)

    def end(self):
        return _IMUSensorMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _IMUSensorMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _IMUSensorMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _IMUSensorMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _IMUSensorMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorMsgPayload.TimeVector_swiginit(self, _IMUSensorMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _IMUSensorMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _IMUSensorMsgPayload.TimeVector_front(self)

    def back(self):
        return _IMUSensorMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _IMUSensorMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _IMUSensorMsgPayload.delete_TimeVector

# Register TimeVector in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _IMUSensorMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _IMUSensorMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _IMUSensorMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _IMUSensorMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _IMUSensorMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _IMUSensorMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _IMUSensorMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _IMUSensorMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _IMUSensorMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _IMUSensorMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _IMUSensorMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorMsgPayload.DoubleVector_swiginit(self, _IMUSensorMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _IMUSensorMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _IMUSensorMsgPayload.DoubleVector_front(self)

    def back(self):
        return _IMUSensorMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _IMUSensorMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _IMUSensorMsgPayload.delete_DoubleVector

# Register DoubleVector in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _IMUSensorMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _IMUSensorMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _IMUSensorMsgPayload.StringVector_empty(self)

    def size(self):
        return _IMUSensorMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _IMUSensorMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _IMUSensorMsgPayload.StringVector_begin(self)

    def end(self):
        return _IMUSensorMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _IMUSensorMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _IMUSensorMsgPayload.StringVector_rend(self)

    def clear(self):
        return _IMUSensorMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _IMUSensorMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorMsgPayload.StringVector_swiginit(self, _IMUSensorMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _IMUSensorMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _IMUSensorMsgPayload.StringVector_front(self)

    def back(self):
        return _IMUSensorMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _IMUSensorMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _IMUSensorMsgPayload.delete_StringVector

# Register StringVector in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _IMUSensorMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _IMUSensorMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _IMUSensorMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _IMUSensorMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _IMUSensorMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _IMUSensorMsgPayload.NANO2SEC
SEC2NANO = _IMUSensorMsgPayload.SEC2NANO
SEC2HOUR = _IMUSensorMsgPayload.SEC2HOUR
BOOL_FALSE = _IMUSensorMsgPayload.BOOL_FALSE
BOOL_TRUE = _IMUSensorMsgPayload.BOOL_TRUE
AVAILABLE = _IMUSensorMsgPayload.AVAILABLE
UNAVAILABLE = _IMUSensorMsgPayload.UNAVAILABLE
BalancedWheels = _IMUSensorMsgPayload.BalancedWheels
JitterSimple = _IMUSensorMsgPayload.JitterSimple
JitterFullyCoupled = _IMUSensorMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IMUSensorMsgPayload.SysModel_swiginit(self, _IMUSensorMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _IMUSensorMsgPayload.delete_SysModel

    def SelfInit(self):
        return _IMUSensorMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _IMUSensorMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _IMUSensorMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _IMUSensorMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_IMUSensorMsgPayload.SysModel_ModelTag_get, _IMUSensorMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_IMUSensorMsgPayload.SysModel_CallCounts_get, _IMUSensorMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_IMUSensorMsgPayload.SysModel_RNGSeed_get, _IMUSensorMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_IMUSensorMsgPayload.SysModel_moduleID_get, _IMUSensorMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _IMUSensorMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _IMUSensorMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _IMUSensorMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _IMUSensorMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _IMUSensorMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _IMUSensorMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _IMUSensorMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _IMUSensorMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _IMUSensorMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _IMUSensorMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _IMUSensorMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _IMUSensorMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class IMUSensorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DVFramePlatform = property(_IMUSensorMsgPayload.IMUSensorMsgPayload_DVFramePlatform_get, _IMUSensorMsgPayload.IMUSensorMsgPayload_DVFramePlatform_set)
    AccelPlatform = property(_IMUSensorMsgPayload.IMUSensorMsgPayload_AccelPlatform_get, _IMUSensorMsgPayload.IMUSensorMsgPayload_AccelPlatform_set)
    DRFramePlatform = property(_IMUSensorMsgPayload.IMUSensorMsgPayload_DRFramePlatform_get, _IMUSensorMsgPayload.IMUSensorMsgPayload_DRFramePlatform_set)
    AngVelPlatform = property(_IMUSensorMsgPayload.IMUSensorMsgPayload_AngVelPlatform_get, _IMUSensorMsgPayload.IMUSensorMsgPayload_AngVelPlatform_set)

    def __init__(self):
        _IMUSensorMsgPayload.IMUSensorMsgPayload_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsgPayload())
    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsgPayload

# Register IMUSensorMsgPayload in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsgPayload_swigregister(IMUSensorMsgPayload)
class IMUSensorMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_IMUSensorMsgPayload.IMUSensorMsgReader_bskLogger_get, _IMUSensorMsgPayload.IMUSensorMsgReader_bskLogger_set)
    zeroMsgPayload = property(_IMUSensorMsgPayload.IMUSensorMsgReader_zeroMsgPayload_get, _IMUSensorMsgPayload.IMUSensorMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _IMUSensorMsgPayload.IMUSensorMsgReader_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsgReader(*args))

    def __call__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgReader___call__(self)

    def isLinked(self):
        return _IMUSensorMsgPayload.IMUSensorMsgReader_isLinked(self)

    def isWritten(self):
        return _IMUSensorMsgPayload.IMUSensorMsgReader_isWritten(self)

    def timeWritten(self):
        return _IMUSensorMsgPayload.IMUSensorMsgReader_timeWritten(self)

    def moduleID(self):
        return _IMUSensorMsgPayload.IMUSensorMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _IMUSensorMsgPayload.IMUSensorMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _IMUSensorMsgPayload.IMUSensorMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _IMUSensorMsgPayload.IMUSensorMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _IMUSensorMsgPayload.IMUSensorMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _IMUSensorMsgPayload.IMUSensorMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == IMUSensorMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.IMUSensorMsgPayload import IMUSensorMsg_C
            if type(source) == IMUSensorMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<IMUSensorMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == IMUSensorMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.IMUSensorMsgPayload import IMUSensorMsg_C
        except ImportError:
            return 0

        if type(source) == IMUSensorMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsgReader

# Register IMUSensorMsgReader in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsgReader_swigregister(IMUSensorMsgReader)
class IMUSensorMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IMUSensorMsgPayload.IMUSensorMsgWriter_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _IMUSensorMsgPayload.IMUSensorMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsgWriter

# Register IMUSensorMsgWriter in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsgWriter_swigregister(IMUSensorMsgWriter)
class IMUSensorMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_IMUSensorMsgPayload.IMUSensorMsg_write_get, _IMUSensorMsgPayload.IMUSensorMsg_write_set)

    def addSubscriber(self):
        return _IMUSensorMsgPayload.IMUSensorMsg_addSubscriber(self)

    def addAuthor(self):
        return _IMUSensorMsgPayload.IMUSensorMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _IMUSensorMsgPayload.IMUSensorMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _IMUSensorMsgPayload.IMUSensorMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _IMUSensorMsgPayload.IMUSensorMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_IMUSensorMsgPayload.IMUSensorMsg_zeroMsgPayload_get, _IMUSensorMsgPayload.IMUSensorMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _IMUSensorMsgPayload.IMUSensorMsg_isLinked(self)

    def getPayloadSize(self):
        return _IMUSensorMsgPayload.IMUSensorMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _IMUSensorMsgPayload.IMUSensorMsg_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsg())
    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsg

# Register IMUSensorMsg in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsg_swigregister(IMUSensorMsg)
class IMUSensorMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IMUSensorMsgPayload.IMUSensorMsgRecorder_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsgRecorder(*args))
    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsgRecorder

    def SelfInit(self):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder_clear(self)
    bskLogger = property(_IMUSensorMsgPayload.IMUSensorMsgRecorder_bskLogger_get, _IMUSensorMsgPayload.IMUSensorMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _IMUSensorMsgPayload.IMUSensorMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register IMUSensorMsgRecorder in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsgRecorder_swigregister(IMUSensorMsgRecorder)
class IMUSensorMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___bool__(self)

    def __len__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_pop(self)

    def append(self, x):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_append(self, x)

    def empty(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_empty(self)

    def size(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_size(self)

    def swap(self, v):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_swap(self, v)

    def begin(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_begin(self)

    def end(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_end(self)

    def rbegin(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_rbegin(self)

    def rend(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_rend(self)

    def clear(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsgPayloadVector(*args))

    def push_back(self, x):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_push_back(self, x)

    def front(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_front(self)

    def back(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorMsgPayload.IMUSensorMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsgPayloadVector

# Register IMUSensorMsgPayloadVector in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsgPayloadVector_swigregister(IMUSensorMsgPayloadVector)
class IMUSensorMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_empty(self)

    def size(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_begin(self)

    def end(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_rend(self)

    def clear(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_front(self)

    def back(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsgOutMsgsVector

# Register IMUSensorMsgOutMsgsVector in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsgOutMsgsVector_swigregister(IMUSensorMsgOutMsgsVector)
class IMUSensorMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsgOutMsgsPtrVector

# Register IMUSensorMsgOutMsgsPtrVector in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsgOutMsgsPtrVector_swigregister(IMUSensorMsgOutMsgsPtrVector)
class IMUSensorMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_pop(self)

    def append(self, x):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_append(self, x)

    def empty(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_empty(self)

    def size(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_size(self)

    def swap(self, v):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_begin(self)

    def end(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_end(self)

    def rbegin(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_rend(self)

    def clear(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsgInMsgsVector(*args))

    def push_back(self, x):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_front(self)

    def back(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsgInMsgsVector

# Register IMUSensorMsgInMsgsVector in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsgInMsgsVector_swigregister(IMUSensorMsgInMsgsVector)
class IMUSensorMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_IMUSensorMsgPayload.IMUSensorMsg_C_header_get, _IMUSensorMsgPayload.IMUSensorMsg_C_header_set)
    payload = property(_IMUSensorMsgPayload.IMUSensorMsg_C_payload_get, _IMUSensorMsgPayload.IMUSensorMsg_C_payload_set)
    payloadPointer = property(_IMUSensorMsgPayload.IMUSensorMsg_C_payloadPointer_get, _IMUSensorMsgPayload.IMUSensorMsg_C_payloadPointer_set)
    headerPointer = property(_IMUSensorMsgPayload.IMUSensorMsg_C_headerPointer_get, _IMUSensorMsgPayload.IMUSensorMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import IMUSensorMsg
        if type(source) == type(self):
            IMUSensorMsg_C_subscribe(self, source)
        elif type(source) == IMUSensorMsg:
            IMUSensorMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe IMUSensorMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import IMUSensorMsg
        if type(source) == type(self):
            return (IMUSensorMsg_C_isSubscribedTo(self, source))
        elif type(source) == IMUSensorMsg:
            return (IMUSensorMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import IMUSensorMsgRecorder
        self.header.isLinked = 1
        return IMUSensorMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        IMUSensorMsg_C_addAuthor(self, self)
        if data:
            IMUSensorMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        IMUSensorMsg_C_addAuthor(self, self)
        IMUSensorMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return IMUSensorMsg_C_read(self)


    def __init__(self):
        _IMUSensorMsgPayload.IMUSensorMsg_C_swiginit(self, _IMUSensorMsgPayload.new_IMUSensorMsg_C())
    __swig_destroy__ = _IMUSensorMsgPayload.delete_IMUSensorMsg_C

# Register IMUSensorMsg_C in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.IMUSensorMsg_C_swigregister(IMUSensorMsg_C)

def IMUSensorMsg_cpp_subscribe(subscriber, source):
    return _IMUSensorMsgPayload.IMUSensorMsg_cpp_subscribe(subscriber, source)

def IMUSensorMsg_C_subscribe(subscriber, source):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_subscribe(subscriber, source)

def IMUSensorMsg_C_isSubscribedTo(subscriber, source):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_isSubscribedTo(subscriber, source)

def IMUSensorMsg_cpp_isSubscribedTo(subscriber, source):
    return _IMUSensorMsgPayload.IMUSensorMsg_cpp_isSubscribedTo(subscriber, source)

def IMUSensorMsg_C_addAuthor(coowner, data):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_addAuthor(coowner, data)

def IMUSensorMsg_C_init(owner):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_init(owner)

def IMUSensorMsg_C_isLinked(data):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_isLinked(data)

def IMUSensorMsg_C_isWritten(data):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_isWritten(data)

def IMUSensorMsg_C_timeWritten(data):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_timeWritten(data)

def IMUSensorMsg_C_moduleID(data):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_moduleID(data)

def IMUSensorMsg_C_write(data, destination, moduleID, callTime):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_write(data, destination, moduleID, callTime)

def IMUSensorMsg_C_read(source):
    return _IMUSensorMsgPayload.IMUSensorMsg_C_read(source)

def IMUSensorMsg_C_zeroMsgPayload():
    return _IMUSensorMsgPayload.IMUSensorMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_IMUSensorMsgPayload.MsgHeader_isLinked_get, _IMUSensorMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_IMUSensorMsgPayload.MsgHeader_isWritten_get, _IMUSensorMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_IMUSensorMsgPayload.MsgHeader_timeWritten_get, _IMUSensorMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_IMUSensorMsgPayload.MsgHeader_moduleID_get, _IMUSensorMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _IMUSensorMsgPayload.MsgHeader_swiginit(self, _IMUSensorMsgPayload.new_MsgHeader())
    __swig_destroy__ = _IMUSensorMsgPayload.delete_MsgHeader

# Register MsgHeader in _IMUSensorMsgPayload:
_IMUSensorMsgPayload.MsgHeader_swigregister(MsgHeader)

