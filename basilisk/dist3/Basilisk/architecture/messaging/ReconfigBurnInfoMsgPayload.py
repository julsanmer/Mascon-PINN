# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ReconfigBurnInfoMsgPayload
else:
    import _ReconfigBurnInfoMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ReconfigBurnInfoMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ReconfigBurnInfoMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ReconfigBurnInfoMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ReconfigBurnInfoMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ReconfigBurnInfoMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ReconfigBurnInfoMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ReconfigBurnInfoMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ReconfigBurnInfoMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ReconfigBurnInfoMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ReconfigBurnInfoMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ReconfigBurnInfoMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ReconfigBurnInfoMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ReconfigBurnInfoMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ReconfigBurnInfoMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ReconfigBurnInfoMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ReconfigBurnInfoMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ReconfigBurnInfoMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ReconfigBurnInfoMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ReconfigBurnInfoMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ReconfigBurnInfoMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ReconfigBurnInfoMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.TimeVector_swiginit(self, _ReconfigBurnInfoMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ReconfigBurnInfoMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_front(self)

    def back(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ReconfigBurnInfoMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ReconfigBurnInfoMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ReconfigBurnInfoMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ReconfigBurnInfoMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ReconfigBurnInfoMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_TimeVector

# Register TimeVector in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.DoubleVector_swiginit(self, _ReconfigBurnInfoMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ReconfigBurnInfoMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_DoubleVector

# Register DoubleVector in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ReconfigBurnInfoMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ReconfigBurnInfoMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ReconfigBurnInfoMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ReconfigBurnInfoMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ReconfigBurnInfoMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_empty(self)

    def size(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ReconfigBurnInfoMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_begin(self)

    def end(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ReconfigBurnInfoMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.StringVector_swiginit(self, _ReconfigBurnInfoMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ReconfigBurnInfoMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_front(self)

    def back(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ReconfigBurnInfoMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ReconfigBurnInfoMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ReconfigBurnInfoMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ReconfigBurnInfoMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ReconfigBurnInfoMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_StringVector

# Register StringVector in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ReconfigBurnInfoMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ReconfigBurnInfoMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ReconfigBurnInfoMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ReconfigBurnInfoMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ReconfigBurnInfoMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ReconfigBurnInfoMsgPayload.NANO2SEC
SEC2NANO = _ReconfigBurnInfoMsgPayload.SEC2NANO
SEC2HOUR = _ReconfigBurnInfoMsgPayload.SEC2HOUR
BOOL_FALSE = _ReconfigBurnInfoMsgPayload.BOOL_FALSE
BOOL_TRUE = _ReconfigBurnInfoMsgPayload.BOOL_TRUE
AVAILABLE = _ReconfigBurnInfoMsgPayload.AVAILABLE
UNAVAILABLE = _ReconfigBurnInfoMsgPayload.UNAVAILABLE
BalancedWheels = _ReconfigBurnInfoMsgPayload.BalancedWheels
JitterSimple = _ReconfigBurnInfoMsgPayload.JitterSimple
JitterFullyCoupled = _ReconfigBurnInfoMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.SysModel_swiginit(self, _ReconfigBurnInfoMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ReconfigBurnInfoMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ReconfigBurnInfoMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ReconfigBurnInfoMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ReconfigBurnInfoMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ReconfigBurnInfoMsgPayload.SysModel_ModelTag_get, _ReconfigBurnInfoMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ReconfigBurnInfoMsgPayload.SysModel_CallCounts_get, _ReconfigBurnInfoMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ReconfigBurnInfoMsgPayload.SysModel_RNGSeed_get, _ReconfigBurnInfoMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ReconfigBurnInfoMsgPayload.SysModel_moduleID_get, _ReconfigBurnInfoMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ReconfigBurnInfoMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ReconfigBurnInfoMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ReconfigBurnInfoMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ReconfigBurnInfoMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ReconfigBurnInfoMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ReconfigBurnInfoMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ReconfigBurnInfoMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ReconfigBurnInfoMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ReconfigBurnInfoMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ReconfigBurnInfoMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flag = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_flag_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_flag_set)
    t = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_t_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_t_set)
    thrustOnTime = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_thrustOnTime_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_thrustOnTime_set)
    sigma_RN = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_sigma_RN_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_sigma_RN_set)

    def __init__(self):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsgPayload())
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsgPayload

# Register ReconfigBurnInfoMsgPayload in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayload_swigregister(ReconfigBurnInfoMsgPayload)
class ReconfigBurnInfoMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_bskLogger_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_zeroMsgPayload_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsgReader(*args))

    def __call__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader___call__(self)

    def isLinked(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_isLinked(self)

    def isWritten(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_isWritten(self)

    def timeWritten(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_timeWritten(self)

    def moduleID(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ReconfigBurnInfoMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ReconfigBurnInfoMsgPayload import ReconfigBurnInfoMsg_C
            if type(source) == ReconfigBurnInfoMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ReconfigBurnInfoMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ReconfigBurnInfoMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ReconfigBurnInfoMsgPayload import ReconfigBurnInfoMsg_C
        except ImportError:
            return 0

        if type(source) == ReconfigBurnInfoMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsgReader

# Register ReconfigBurnInfoMsgReader in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgReader_swigregister(ReconfigBurnInfoMsgReader)
class ReconfigBurnInfoMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgWriter_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsgWriter

# Register ReconfigBurnInfoMsgWriter in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgWriter_swigregister(ReconfigBurnInfoMsgWriter)
class ReconfigBurnInfoMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_write_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_write_set)

    def addSubscriber(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_addSubscriber(self)

    def addAuthor(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_zeroMsgPayload_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_isLinked(self)

    def getPayloadSize(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsg())
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsg

# Register ReconfigBurnInfoMsg in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_swigregister(ReconfigBurnInfoMsg)
class ReconfigBurnInfoMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsgRecorder(*args))
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsgRecorder

    def SelfInit(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_clear(self)
    bskLogger = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_bskLogger_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ReconfigBurnInfoMsgRecorder in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgRecorder_swigregister(ReconfigBurnInfoMsgRecorder)
class ReconfigBurnInfoMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_pop(self)

    def append(self, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_append(self, x)

    def empty(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_empty(self)

    def size(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_size(self)

    def swap(self, v):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_begin(self)

    def end(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_end(self)

    def rbegin(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_rend(self)

    def clear(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsgPayloadVector(*args))

    def push_back(self, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_front(self)

    def back(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsgPayloadVector

# Register ReconfigBurnInfoMsgPayloadVector in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgPayloadVector_swigregister(ReconfigBurnInfoMsgPayloadVector)
class ReconfigBurnInfoMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_empty(self)

    def size(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_begin(self)

    def end(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_front(self)

    def back(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsgOutMsgsVector

# Register ReconfigBurnInfoMsgOutMsgsVector in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsVector_swigregister(ReconfigBurnInfoMsgOutMsgsVector)
class ReconfigBurnInfoMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsgOutMsgsPtrVector

# Register ReconfigBurnInfoMsgOutMsgsPtrVector in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgOutMsgsPtrVector_swigregister(ReconfigBurnInfoMsgOutMsgsPtrVector)
class ReconfigBurnInfoMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_empty(self)

    def size(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_begin(self)

    def end(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_rend(self)

    def clear(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_front(self)

    def back(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsgInMsgsVector

# Register ReconfigBurnInfoMsgInMsgsVector in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsgInMsgsVector_swigregister(ReconfigBurnInfoMsgInMsgsVector)
class ReconfigBurnInfoMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_header_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_header_set)
    payload = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_payload_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_payload_set)
    payloadPointer = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_payloadPointer_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_payloadPointer_set)
    headerPointer = property(_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_headerPointer_get, _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ReconfigBurnInfoMsg
        if type(source) == type(self):
            ReconfigBurnInfoMsg_C_subscribe(self, source)
        elif type(source) == ReconfigBurnInfoMsg:
            ReconfigBurnInfoMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ReconfigBurnInfoMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ReconfigBurnInfoMsg
        if type(source) == type(self):
            return (ReconfigBurnInfoMsg_C_isSubscribedTo(self, source))
        elif type(source) == ReconfigBurnInfoMsg:
            return (ReconfigBurnInfoMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import ReconfigBurnInfoMsgRecorder
        self.header.isLinked = 1
        return ReconfigBurnInfoMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ReconfigBurnInfoMsg_C_addAuthor(self, self)
        if data:
            ReconfigBurnInfoMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ReconfigBurnInfoMsg_C_addAuthor(self, self)
        ReconfigBurnInfoMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ReconfigBurnInfoMsg_C_read(self)


    def __init__(self):
        _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_swiginit(self, _ReconfigBurnInfoMsgPayload.new_ReconfigBurnInfoMsg_C())
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_ReconfigBurnInfoMsg_C

# Register ReconfigBurnInfoMsg_C in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_swigregister(ReconfigBurnInfoMsg_C)

def ReconfigBurnInfoMsg_cpp_subscribe(subscriber, source):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_cpp_subscribe(subscriber, source)

def ReconfigBurnInfoMsg_C_subscribe(subscriber, source):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_subscribe(subscriber, source)

def ReconfigBurnInfoMsg_C_isSubscribedTo(subscriber, source):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_isSubscribedTo(subscriber, source)

def ReconfigBurnInfoMsg_cpp_isSubscribedTo(subscriber, source):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_cpp_isSubscribedTo(subscriber, source)

def ReconfigBurnInfoMsg_C_addAuthor(coowner, data):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_addAuthor(coowner, data)

def ReconfigBurnInfoMsg_C_init(owner):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_init(owner)

def ReconfigBurnInfoMsg_C_isLinked(data):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_isLinked(data)

def ReconfigBurnInfoMsg_C_isWritten(data):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_isWritten(data)

def ReconfigBurnInfoMsg_C_timeWritten(data):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_timeWritten(data)

def ReconfigBurnInfoMsg_C_moduleID(data):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_moduleID(data)

def ReconfigBurnInfoMsg_C_write(data, destination, moduleID, callTime):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_write(data, destination, moduleID, callTime)

def ReconfigBurnInfoMsg_C_read(source):
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_read(source)

def ReconfigBurnInfoMsg_C_zeroMsgPayload():
    return _ReconfigBurnInfoMsgPayload.ReconfigBurnInfoMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ReconfigBurnInfoMsgPayload.MsgHeader_isLinked_get, _ReconfigBurnInfoMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ReconfigBurnInfoMsgPayload.MsgHeader_isWritten_get, _ReconfigBurnInfoMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ReconfigBurnInfoMsgPayload.MsgHeader_timeWritten_get, _ReconfigBurnInfoMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ReconfigBurnInfoMsgPayload.MsgHeader_moduleID_get, _ReconfigBurnInfoMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ReconfigBurnInfoMsgPayload.MsgHeader_swiginit(self, _ReconfigBurnInfoMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ReconfigBurnInfoMsgPayload.delete_MsgHeader

# Register MsgHeader in _ReconfigBurnInfoMsgPayload:
_ReconfigBurnInfoMsgPayload.MsgHeader_swigregister(MsgHeader)

