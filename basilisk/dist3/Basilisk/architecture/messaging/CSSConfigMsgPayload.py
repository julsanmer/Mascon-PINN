# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CSSConfigMsgPayload
else:
    import _CSSConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSSConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CSSConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CSSConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CSSConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CSSConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CSSConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CSSConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CSSConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CSSConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CSSConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CSSConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CSSConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CSSConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CSSConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CSSConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CSSConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CSSConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CSSConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CSSConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CSSConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CSSConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CSSConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CSSConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CSSConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CSSConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CSSConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CSSConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CSSConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CSSConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CSSConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CSSConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CSSConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CSSConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CSSConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CSSConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CSSConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CSSConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CSSConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CSSConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CSSConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CSSConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CSSConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CSSConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CSSConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigMsgPayload.TimeVector_swiginit(self, _CSSConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CSSConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CSSConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _CSSConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CSSConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CSSConfigMsgPayload.delete_TimeVector

# Register TimeVector in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CSSConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CSSConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CSSConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CSSConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CSSConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CSSConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CSSConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CSSConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CSSConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CSSConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CSSConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigMsgPayload.DoubleVector_swiginit(self, _CSSConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CSSConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CSSConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CSSConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CSSConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CSSConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CSSConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CSSConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CSSConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _CSSConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CSSConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CSSConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _CSSConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CSSConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CSSConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CSSConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CSSConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigMsgPayload.StringVector_swiginit(self, _CSSConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CSSConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CSSConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _CSSConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CSSConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CSSConfigMsgPayload.delete_StringVector

# Register StringVector in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CSSConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CSSConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CSSConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CSSConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CSSConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CSSConfigMsgPayload.NANO2SEC
SEC2NANO = _CSSConfigMsgPayload.SEC2NANO
SEC2HOUR = _CSSConfigMsgPayload.SEC2HOUR
BOOL_FALSE = _CSSConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _CSSConfigMsgPayload.BOOL_TRUE
AVAILABLE = _CSSConfigMsgPayload.AVAILABLE
UNAVAILABLE = _CSSConfigMsgPayload.UNAVAILABLE
BalancedWheels = _CSSConfigMsgPayload.BalancedWheels
JitterSimple = _CSSConfigMsgPayload.JitterSimple
JitterFullyCoupled = _CSSConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSConfigMsgPayload.SysModel_swiginit(self, _CSSConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CSSConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CSSConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CSSConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CSSConfigMsgPayload.SysModel_ModelTag_get, _CSSConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CSSConfigMsgPayload.SysModel_CallCounts_get, _CSSConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CSSConfigMsgPayload.SysModel_RNGSeed_get, _CSSConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CSSConfigMsgPayload.SysModel_moduleID_get, _CSSConfigMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CSSConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CSSConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CSSConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CSSConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CSSConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CSSConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CSSConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CSSConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CSSConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CSSConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CSSConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CSSConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CSSConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nCSS = property(_CSSConfigMsgPayload.CSSConfigMsgPayload_nCSS_get, _CSSConfigMsgPayload.CSSConfigMsgPayload_nCSS_set)
    cssVals = property(_CSSConfigMsgPayload.CSSConfigMsgPayload_cssVals_get, _CSSConfigMsgPayload.CSSConfigMsgPayload_cssVals_set)

    def __init__(self):
        _CSSConfigMsgPayload.CSSConfigMsgPayload_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsgPayload())
    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsgPayload

# Register CSSConfigMsgPayload in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsgPayload_swigregister(CSSConfigMsgPayload)
class CSSConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CSSConfigMsgPayload.CSSConfigMsgReader_bskLogger_get, _CSSConfigMsgPayload.CSSConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CSSConfigMsgPayload.CSSConfigMsgReader_zeroMsgPayload_get, _CSSConfigMsgPayload.CSSConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CSSConfigMsgPayload.CSSConfigMsgReader_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsgReader(*args))

    def __call__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgReader___call__(self)

    def isLinked(self):
        return _CSSConfigMsgPayload.CSSConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _CSSConfigMsgPayload.CSSConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _CSSConfigMsgPayload.CSSConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _CSSConfigMsgPayload.CSSConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CSSConfigMsgPayload.CSSConfigMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _CSSConfigMsgPayload.CSSConfigMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _CSSConfigMsgPayload.CSSConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CSSConfigMsgPayload.CSSConfigMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _CSSConfigMsgPayload.CSSConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CSSConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CSSConfigMsgPayload import CSSConfigMsg_C
            if type(source) == CSSConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CSSConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CSSConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CSSConfigMsgPayload import CSSConfigMsg_C
        except ImportError:
            return 0

        if type(source) == CSSConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsgReader

# Register CSSConfigMsgReader in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsgReader_swigregister(CSSConfigMsgReader)
class CSSConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSConfigMsgPayload.CSSConfigMsgWriter_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CSSConfigMsgPayload.CSSConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsgWriter

# Register CSSConfigMsgWriter in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsgWriter_swigregister(CSSConfigMsgWriter)
class CSSConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CSSConfigMsgPayload.CSSConfigMsg_write_get, _CSSConfigMsgPayload.CSSConfigMsg_write_set)

    def addSubscriber(self):
        return _CSSConfigMsgPayload.CSSConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _CSSConfigMsgPayload.CSSConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CSSConfigMsgPayload.CSSConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CSSConfigMsgPayload.CSSConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CSSConfigMsgPayload.CSSConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CSSConfigMsgPayload.CSSConfigMsg_zeroMsgPayload_get, _CSSConfigMsgPayload.CSSConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CSSConfigMsgPayload.CSSConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _CSSConfigMsgPayload.CSSConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CSSConfigMsgPayload.CSSConfigMsg_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsg())
    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsg

# Register CSSConfigMsg in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsg_swigregister(CSSConfigMsg)
class CSSConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSConfigMsgPayload.CSSConfigMsgRecorder_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsgRecorder(*args))
    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsgRecorder

    def SelfInit(self):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder_clear(self)
    bskLogger = property(_CSSConfigMsgPayload.CSSConfigMsgRecorder_bskLogger_get, _CSSConfigMsgPayload.CSSConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CSSConfigMsgPayload.CSSConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CSSConfigMsgRecorder in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsgRecorder_swigregister(CSSConfigMsgRecorder)
class CSSConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_empty(self)

    def size(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_begin(self)

    def end(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_front(self)

    def back(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigMsgPayload.CSSConfigMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsgPayloadVector

# Register CSSConfigMsgPayloadVector in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsgPayloadVector_swigregister(CSSConfigMsgPayloadVector)
class CSSConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsgOutMsgsVector

# Register CSSConfigMsgOutMsgsVector in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsgOutMsgsVector_swigregister(CSSConfigMsgOutMsgsVector)
class CSSConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsgOutMsgsPtrVector

# Register CSSConfigMsgOutMsgsPtrVector in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsgOutMsgsPtrVector_swigregister(CSSConfigMsgOutMsgsPtrVector)
class CSSConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_front(self)

    def back(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsgInMsgsVector

# Register CSSConfigMsgInMsgsVector in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsgInMsgsVector_swigregister(CSSConfigMsgInMsgsVector)
class CSSConfigMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CSSConfigMsgPayload.CSSConfigMsg_C_header_get, _CSSConfigMsgPayload.CSSConfigMsg_C_header_set)
    payload = property(_CSSConfigMsgPayload.CSSConfigMsg_C_payload_get, _CSSConfigMsgPayload.CSSConfigMsg_C_payload_set)
    payloadPointer = property(_CSSConfigMsgPayload.CSSConfigMsg_C_payloadPointer_get, _CSSConfigMsgPayload.CSSConfigMsg_C_payloadPointer_set)
    headerPointer = property(_CSSConfigMsgPayload.CSSConfigMsg_C_headerPointer_get, _CSSConfigMsgPayload.CSSConfigMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CSSConfigMsg
        if type(source) == type(self):
            CSSConfigMsg_C_subscribe(self, source)
        elif type(source) == CSSConfigMsg:
            CSSConfigMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CSSConfigMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CSSConfigMsg
        if type(source) == type(self):
            return (CSSConfigMsg_C_isSubscribedTo(self, source))
        elif type(source) == CSSConfigMsg:
            return (CSSConfigMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import CSSConfigMsgRecorder
        self.header.isLinked = 1
        return CSSConfigMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CSSConfigMsg_C_addAuthor(self, self)
        if data:
            CSSConfigMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CSSConfigMsg_C_addAuthor(self, self)
        CSSConfigMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CSSConfigMsg_C_read(self)


    def __init__(self):
        _CSSConfigMsgPayload.CSSConfigMsg_C_swiginit(self, _CSSConfigMsgPayload.new_CSSConfigMsg_C())
    __swig_destroy__ = _CSSConfigMsgPayload.delete_CSSConfigMsg_C

# Register CSSConfigMsg_C in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.CSSConfigMsg_C_swigregister(CSSConfigMsg_C)

def CSSConfigMsg_cpp_subscribe(subscriber, source):
    return _CSSConfigMsgPayload.CSSConfigMsg_cpp_subscribe(subscriber, source)

def CSSConfigMsg_C_subscribe(subscriber, source):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_subscribe(subscriber, source)

def CSSConfigMsg_C_isSubscribedTo(subscriber, source):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_isSubscribedTo(subscriber, source)

def CSSConfigMsg_cpp_isSubscribedTo(subscriber, source):
    return _CSSConfigMsgPayload.CSSConfigMsg_cpp_isSubscribedTo(subscriber, source)

def CSSConfigMsg_C_addAuthor(coowner, data):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_addAuthor(coowner, data)

def CSSConfigMsg_C_init(owner):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_init(owner)

def CSSConfigMsg_C_isLinked(data):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_isLinked(data)

def CSSConfigMsg_C_isWritten(data):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_isWritten(data)

def CSSConfigMsg_C_timeWritten(data):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_timeWritten(data)

def CSSConfigMsg_C_moduleID(data):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_moduleID(data)

def CSSConfigMsg_C_write(data, destination, moduleID, callTime):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_write(data, destination, moduleID, callTime)

def CSSConfigMsg_C_read(source):
    return _CSSConfigMsgPayload.CSSConfigMsg_C_read(source)

def CSSConfigMsg_C_zeroMsgPayload():
    return _CSSConfigMsgPayload.CSSConfigMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CSSConfigMsgPayload.MsgHeader_isLinked_get, _CSSConfigMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CSSConfigMsgPayload.MsgHeader_isWritten_get, _CSSConfigMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CSSConfigMsgPayload.MsgHeader_timeWritten_get, _CSSConfigMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CSSConfigMsgPayload.MsgHeader_moduleID_get, _CSSConfigMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CSSConfigMsgPayload.MsgHeader_swiginit(self, _CSSConfigMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CSSConfigMsgPayload.delete_MsgHeader

# Register MsgHeader in _CSSConfigMsgPayload:
_CSSConfigMsgPayload.MsgHeader_swigregister(MsgHeader)

