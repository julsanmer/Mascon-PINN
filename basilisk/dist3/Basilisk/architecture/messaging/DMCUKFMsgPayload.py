# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DMCUKFMsgPayload
else:
    import _DMCUKFMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DMCUKFMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DMCUKFMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DMCUKFMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DMCUKFMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DMCUKFMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DMCUKFMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DMCUKFMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DMCUKFMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DMCUKFMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DMCUKFMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DMCUKFMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DMCUKFMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DMCUKFMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DMCUKFMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DMCUKFMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DMCUKFMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DMCUKFMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DMCUKFMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DMCUKFMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DMCUKFMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DMCUKFMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DMCUKFMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DMCUKFMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DMCUKFMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DMCUKFMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DMCUKFMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DMCUKFMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DMCUKFMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DMCUKFMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DMCUKFMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DMCUKFMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DMCUKFMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DMCUKFMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DMCUKFMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DMCUKFMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DMCUKFMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DMCUKFMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DMCUKFMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DMCUKFMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DMCUKFMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DMCUKFMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DMCUKFMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DMCUKFMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DMCUKFMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DMCUKFMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DMCUKFMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DMCUKFMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DMCUKFMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DMCUKFMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DMCUKFMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DMCUKFMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DMCUKFMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DMCUKFMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DMCUKFMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DMCUKFMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DMCUKFMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DMCUKFMsgPayload.TimeVector_swiginit(self, _DMCUKFMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DMCUKFMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DMCUKFMsgPayload.TimeVector_front(self)

    def back(self):
        return _DMCUKFMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DMCUKFMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DMCUKFMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DMCUKFMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DMCUKFMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DMCUKFMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DMCUKFMsgPayload.delete_TimeVector

# Register TimeVector in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DMCUKFMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DMCUKFMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DMCUKFMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DMCUKFMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DMCUKFMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DMCUKFMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DMCUKFMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DMCUKFMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DMCUKFMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DMCUKFMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DMCUKFMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DMCUKFMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DMCUKFMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DMCUKFMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DMCUKFMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DMCUKFMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DMCUKFMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DMCUKFMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DMCUKFMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DMCUKFMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DMCUKFMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DMCUKFMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DMCUKFMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DMCUKFMsgPayload.DoubleVector_swiginit(self, _DMCUKFMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DMCUKFMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DMCUKFMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DMCUKFMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DMCUKFMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DMCUKFMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DMCUKFMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DMCUKFMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DMCUKFMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DoubleVector

# Register DoubleVector in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DMCUKFMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DMCUKFMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DMCUKFMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DMCUKFMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DMCUKFMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DMCUKFMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DMCUKFMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DMCUKFMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DMCUKFMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DMCUKFMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DMCUKFMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DMCUKFMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DMCUKFMsgPayload.StringVector_empty(self)

    def size(self):
        return _DMCUKFMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DMCUKFMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DMCUKFMsgPayload.StringVector_begin(self)

    def end(self):
        return _DMCUKFMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DMCUKFMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DMCUKFMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DMCUKFMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DMCUKFMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DMCUKFMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DMCUKFMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DMCUKFMsgPayload.StringVector_swiginit(self, _DMCUKFMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DMCUKFMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DMCUKFMsgPayload.StringVector_front(self)

    def back(self):
        return _DMCUKFMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DMCUKFMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DMCUKFMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DMCUKFMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DMCUKFMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DMCUKFMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DMCUKFMsgPayload.delete_StringVector

# Register StringVector in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DMCUKFMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DMCUKFMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DMCUKFMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DMCUKFMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DMCUKFMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DMCUKFMsgPayload.NANO2SEC
SEC2NANO = _DMCUKFMsgPayload.SEC2NANO
SEC2HOUR = _DMCUKFMsgPayload.SEC2HOUR
BOOL_FALSE = _DMCUKFMsgPayload.BOOL_FALSE
BOOL_TRUE = _DMCUKFMsgPayload.BOOL_TRUE
AVAILABLE = _DMCUKFMsgPayload.AVAILABLE
UNAVAILABLE = _DMCUKFMsgPayload.UNAVAILABLE
BalancedWheels = _DMCUKFMsgPayload.BalancedWheels
JitterSimple = _DMCUKFMsgPayload.JitterSimple
JitterFullyCoupled = _DMCUKFMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DMCUKFMsgPayload.SysModel_swiginit(self, _DMCUKFMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DMCUKFMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DMCUKFMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DMCUKFMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DMCUKFMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DMCUKFMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DMCUKFMsgPayload.SysModel_ModelTag_get, _DMCUKFMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DMCUKFMsgPayload.SysModel_CallCounts_get, _DMCUKFMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DMCUKFMsgPayload.SysModel_RNGSeed_get, _DMCUKFMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DMCUKFMsgPayload.SysModel_moduleID_get, _DMCUKFMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DMCUKFMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DMCUKFMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DMCUKFMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DMCUKFMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DMCUKFMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DMCUKFMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DMCUKFMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DMCUKFMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DMCUKFMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DMCUKFMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DMCUKFMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DMCUKFMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class DMCUKFMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_DMCUKFMsgPayload.DMCUKFMsgPayload_x_get, _DMCUKFMsgPayload.DMCUKFMsgPayload_x_set)
    Pxx = property(_DMCUKFMsgPayload.DMCUKFMsgPayload_Pxx_get, _DMCUKFMsgPayload.DMCUKFMsgPayload_Pxx_set)

    def __init__(self):
        _DMCUKFMsgPayload.DMCUKFMsgPayload_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsgPayload())
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsgPayload

# Register DMCUKFMsgPayload in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsgPayload_swigregister(DMCUKFMsgPayload)
class DMCUKFMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DMCUKFMsgPayload.DMCUKFMsgReader_bskLogger_get, _DMCUKFMsgPayload.DMCUKFMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DMCUKFMsgPayload.DMCUKFMsgReader_zeroMsgPayload_get, _DMCUKFMsgPayload.DMCUKFMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DMCUKFMsgPayload.DMCUKFMsgReader_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsgReader(*args))

    def __call__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgReader___call__(self)

    def isLinked(self):
        return _DMCUKFMsgPayload.DMCUKFMsgReader_isLinked(self)

    def isWritten(self):
        return _DMCUKFMsgPayload.DMCUKFMsgReader_isWritten(self)

    def timeWritten(self):
        return _DMCUKFMsgPayload.DMCUKFMsgReader_timeWritten(self)

    def moduleID(self):
        return _DMCUKFMsgPayload.DMCUKFMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DMCUKFMsgPayload.DMCUKFMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _DMCUKFMsgPayload.DMCUKFMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _DMCUKFMsgPayload.DMCUKFMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DMCUKFMsgPayload.DMCUKFMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _DMCUKFMsgPayload.DMCUKFMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DMCUKFMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DMCUKFMsgPayload import DMCUKFMsg_C
            if type(source) == DMCUKFMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DMCUKFMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DMCUKFMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DMCUKFMsgPayload import DMCUKFMsg_C
        except ImportError:
            return 0

        if type(source) == DMCUKFMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsgReader

# Register DMCUKFMsgReader in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsgReader_swigregister(DMCUKFMsgReader)
class DMCUKFMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DMCUKFMsgPayload.DMCUKFMsgWriter_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DMCUKFMsgPayload.DMCUKFMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsgWriter

# Register DMCUKFMsgWriter in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsgWriter_swigregister(DMCUKFMsgWriter)
class DMCUKFMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DMCUKFMsgPayload.DMCUKFMsg_write_get, _DMCUKFMsgPayload.DMCUKFMsg_write_set)

    def addSubscriber(self):
        return _DMCUKFMsgPayload.DMCUKFMsg_addSubscriber(self)

    def addAuthor(self):
        return _DMCUKFMsgPayload.DMCUKFMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DMCUKFMsgPayload.DMCUKFMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DMCUKFMsgPayload.DMCUKFMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DMCUKFMsgPayload.DMCUKFMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DMCUKFMsgPayload.DMCUKFMsg_zeroMsgPayload_get, _DMCUKFMsgPayload.DMCUKFMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DMCUKFMsgPayload.DMCUKFMsg_isLinked(self)

    def getPayloadSize(self):
        return _DMCUKFMsgPayload.DMCUKFMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DMCUKFMsgPayload.DMCUKFMsg_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsg())
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsg

# Register DMCUKFMsg in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsg_swigregister(DMCUKFMsg)
class DMCUKFMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DMCUKFMsgPayload.DMCUKFMsgRecorder_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsgRecorder(*args))
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsgRecorder

    def SelfInit(self):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder_clear(self)
    bskLogger = property(_DMCUKFMsgPayload.DMCUKFMsgRecorder_bskLogger_get, _DMCUKFMsgPayload.DMCUKFMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DMCUKFMsgPayload.DMCUKFMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DMCUKFMsgRecorder in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsgRecorder_swigregister(DMCUKFMsgRecorder)
class DMCUKFMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_pop(self)

    def append(self, x):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_append(self, x)

    def empty(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_empty(self)

    def size(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_size(self)

    def swap(self, v):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_begin(self)

    def end(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_end(self)

    def rbegin(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_rend(self)

    def clear(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsgPayloadVector(*args))

    def push_back(self, x):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_front(self)

    def back(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DMCUKFMsgPayload.DMCUKFMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsgPayloadVector

# Register DMCUKFMsgPayloadVector in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsgPayloadVector_swigregister(DMCUKFMsgPayloadVector)
class DMCUKFMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_empty(self)

    def size(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_begin(self)

    def end(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_front(self)

    def back(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsgOutMsgsVector

# Register DMCUKFMsgOutMsgsVector in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsgOutMsgsVector_swigregister(DMCUKFMsgOutMsgsVector)
class DMCUKFMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsgOutMsgsPtrVector

# Register DMCUKFMsgOutMsgsPtrVector in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsgOutMsgsPtrVector_swigregister(DMCUKFMsgOutMsgsPtrVector)
class DMCUKFMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_empty(self)

    def size(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_begin(self)

    def end(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_rend(self)

    def clear(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_front(self)

    def back(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsgInMsgsVector

# Register DMCUKFMsgInMsgsVector in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsgInMsgsVector_swigregister(DMCUKFMsgInMsgsVector)
class DMCUKFMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_DMCUKFMsgPayload.DMCUKFMsg_C_header_get, _DMCUKFMsgPayload.DMCUKFMsg_C_header_set)
    payload = property(_DMCUKFMsgPayload.DMCUKFMsg_C_payload_get, _DMCUKFMsgPayload.DMCUKFMsg_C_payload_set)
    payloadPointer = property(_DMCUKFMsgPayload.DMCUKFMsg_C_payloadPointer_get, _DMCUKFMsgPayload.DMCUKFMsg_C_payloadPointer_set)
    headerPointer = property(_DMCUKFMsgPayload.DMCUKFMsg_C_headerPointer_get, _DMCUKFMsgPayload.DMCUKFMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import DMCUKFMsg
        if type(source) == type(self):
            DMCUKFMsg_C_subscribe(self, source)
        elif type(source) == DMCUKFMsg:
            DMCUKFMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe DMCUKFMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import DMCUKFMsg
        if type(source) == type(self):
            return (DMCUKFMsg_C_isSubscribedTo(self, source))
        elif type(source) == DMCUKFMsg:
            return (DMCUKFMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import DMCUKFMsgRecorder
        self.header.isLinked = 1
        return DMCUKFMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        DMCUKFMsg_C_addAuthor(self, self)
        if data:
            DMCUKFMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        DMCUKFMsg_C_addAuthor(self, self)
        DMCUKFMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return DMCUKFMsg_C_read(self)


    def __init__(self):
        _DMCUKFMsgPayload.DMCUKFMsg_C_swiginit(self, _DMCUKFMsgPayload.new_DMCUKFMsg_C())
    __swig_destroy__ = _DMCUKFMsgPayload.delete_DMCUKFMsg_C

# Register DMCUKFMsg_C in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.DMCUKFMsg_C_swigregister(DMCUKFMsg_C)

def DMCUKFMsg_cpp_subscribe(subscriber, source):
    return _DMCUKFMsgPayload.DMCUKFMsg_cpp_subscribe(subscriber, source)

def DMCUKFMsg_C_subscribe(subscriber, source):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_subscribe(subscriber, source)

def DMCUKFMsg_C_isSubscribedTo(subscriber, source):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_isSubscribedTo(subscriber, source)

def DMCUKFMsg_cpp_isSubscribedTo(subscriber, source):
    return _DMCUKFMsgPayload.DMCUKFMsg_cpp_isSubscribedTo(subscriber, source)

def DMCUKFMsg_C_addAuthor(coowner, data):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_addAuthor(coowner, data)

def DMCUKFMsg_C_init(owner):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_init(owner)

def DMCUKFMsg_C_isLinked(data):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_isLinked(data)

def DMCUKFMsg_C_isWritten(data):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_isWritten(data)

def DMCUKFMsg_C_timeWritten(data):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_timeWritten(data)

def DMCUKFMsg_C_moduleID(data):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_moduleID(data)

def DMCUKFMsg_C_write(data, destination, moduleID, callTime):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_write(data, destination, moduleID, callTime)

def DMCUKFMsg_C_read(source):
    return _DMCUKFMsgPayload.DMCUKFMsg_C_read(source)

def DMCUKFMsg_C_zeroMsgPayload():
    return _DMCUKFMsgPayload.DMCUKFMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_DMCUKFMsgPayload.MsgHeader_isLinked_get, _DMCUKFMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_DMCUKFMsgPayload.MsgHeader_isWritten_get, _DMCUKFMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_DMCUKFMsgPayload.MsgHeader_timeWritten_get, _DMCUKFMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_DMCUKFMsgPayload.MsgHeader_moduleID_get, _DMCUKFMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _DMCUKFMsgPayload.MsgHeader_swiginit(self, _DMCUKFMsgPayload.new_MsgHeader())
    __swig_destroy__ = _DMCUKFMsgPayload.delete_MsgHeader

# Register MsgHeader in _DMCUKFMsgPayload:
_DMCUKFMsgPayload.MsgHeader_swigregister(MsgHeader)

