# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PrescribedTransMsgPayload
else:
    import _PrescribedTransMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PrescribedTransMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PrescribedTransMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PrescribedTransMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PrescribedTransMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PrescribedTransMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PrescribedTransMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PrescribedTransMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PrescribedTransMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PrescribedTransMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PrescribedTransMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PrescribedTransMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PrescribedTransMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PrescribedTransMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PrescribedTransMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PrescribedTransMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PrescribedTransMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PrescribedTransMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PrescribedTransMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PrescribedTransMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PrescribedTransMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PrescribedTransMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PrescribedTransMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PrescribedTransMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PrescribedTransMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PrescribedTransMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PrescribedTransMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PrescribedTransMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PrescribedTransMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PrescribedTransMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PrescribedTransMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PrescribedTransMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PrescribedTransMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTransMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTransMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTransMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PrescribedTransMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTransMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTransMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTransMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTransMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTransMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTransMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTransMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PrescribedTransMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PrescribedTransMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PrescribedTransMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PrescribedTransMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PrescribedTransMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PrescribedTransMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PrescribedTransMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PrescribedTransMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PrescribedTransMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PrescribedTransMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTransMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTransMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTransMsgPayload.TimeVector_swiginit(self, _PrescribedTransMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PrescribedTransMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PrescribedTransMsgPayload.TimeVector_front(self)

    def back(self):
        return _PrescribedTransMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PrescribedTransMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTransMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTransMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTransMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTransMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_TimeVector

# Register TimeVector in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTransMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTransMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTransMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PrescribedTransMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTransMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTransMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTransMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTransMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTransMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTransMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTransMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PrescribedTransMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PrescribedTransMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PrescribedTransMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PrescribedTransMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PrescribedTransMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PrescribedTransMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PrescribedTransMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PrescribedTransMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PrescribedTransMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PrescribedTransMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTransMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTransMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTransMsgPayload.DoubleVector_swiginit(self, _PrescribedTransMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PrescribedTransMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PrescribedTransMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PrescribedTransMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PrescribedTransMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTransMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTransMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTransMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTransMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_DoubleVector

# Register DoubleVector in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTransMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTransMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTransMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PrescribedTransMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTransMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTransMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTransMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTransMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTransMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTransMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTransMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PrescribedTransMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PrescribedTransMsgPayload.StringVector_empty(self)

    def size(self):
        return _PrescribedTransMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PrescribedTransMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PrescribedTransMsgPayload.StringVector_begin(self)

    def end(self):
        return _PrescribedTransMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PrescribedTransMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PrescribedTransMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PrescribedTransMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PrescribedTransMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTransMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTransMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTransMsgPayload.StringVector_swiginit(self, _PrescribedTransMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PrescribedTransMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PrescribedTransMsgPayload.StringVector_front(self)

    def back(self):
        return _PrescribedTransMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PrescribedTransMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTransMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTransMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTransMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTransMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_StringVector

# Register StringVector in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PrescribedTransMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PrescribedTransMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PrescribedTransMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PrescribedTransMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PrescribedTransMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PrescribedTransMsgPayload.NANO2SEC
SEC2NANO = _PrescribedTransMsgPayload.SEC2NANO
SEC2HOUR = _PrescribedTransMsgPayload.SEC2HOUR
BOOL_FALSE = _PrescribedTransMsgPayload.BOOL_FALSE
BOOL_TRUE = _PrescribedTransMsgPayload.BOOL_TRUE
AVAILABLE = _PrescribedTransMsgPayload.AVAILABLE
UNAVAILABLE = _PrescribedTransMsgPayload.UNAVAILABLE
BalancedWheels = _PrescribedTransMsgPayload.BalancedWheels
JitterSimple = _PrescribedTransMsgPayload.JitterSimple
JitterFullyCoupled = _PrescribedTransMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedTransMsgPayload.SysModel_swiginit(self, _PrescribedTransMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PrescribedTransMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PrescribedTransMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PrescribedTransMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PrescribedTransMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PrescribedTransMsgPayload.SysModel_ModelTag_get, _PrescribedTransMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PrescribedTransMsgPayload.SysModel_CallCounts_get, _PrescribedTransMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PrescribedTransMsgPayload.SysModel_RNGSeed_get, _PrescribedTransMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PrescribedTransMsgPayload.SysModel_moduleID_get, _PrescribedTransMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PrescribedTransMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PrescribedTransMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PrescribedTransMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PrescribedTransMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PrescribedTransMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PrescribedTransMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PrescribedTransMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PrescribedTransMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PrescribedTransMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PrescribedTransMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PrescribedTransMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PrescribedTransMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PrescribedTransMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scalarPos = property(_PrescribedTransMsgPayload.PrescribedTransMsgPayload_scalarPos_get, _PrescribedTransMsgPayload.PrescribedTransMsgPayload_scalarPos_set)
    scalarVel = property(_PrescribedTransMsgPayload.PrescribedTransMsgPayload_scalarVel_get, _PrescribedTransMsgPayload.PrescribedTransMsgPayload_scalarVel_set)

    def __init__(self):
        _PrescribedTransMsgPayload.PrescribedTransMsgPayload_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsgPayload())
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsgPayload

# Register PrescribedTransMsgPayload in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsgPayload_swigregister(PrescribedTransMsgPayload)
class PrescribedTransMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PrescribedTransMsgPayload.PrescribedTransMsgReader_bskLogger_get, _PrescribedTransMsgPayload.PrescribedTransMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PrescribedTransMsgPayload.PrescribedTransMsgReader_zeroMsgPayload_get, _PrescribedTransMsgPayload.PrescribedTransMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PrescribedTransMsgPayload.PrescribedTransMsgReader_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsgReader(*args))

    def __call__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader___call__(self)

    def isLinked(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader_isLinked(self)

    def isWritten(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader_isWritten(self)

    def timeWritten(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader_timeWritten(self)

    def moduleID(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _PrescribedTransMsgPayload.PrescribedTransMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PrescribedTransMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PrescribedTransMsgPayload import PrescribedTransMsg_C
            if type(source) == PrescribedTransMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PrescribedTransMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PrescribedTransMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PrescribedTransMsgPayload import PrescribedTransMsg_C
        except ImportError:
            return 0

        if type(source) == PrescribedTransMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsgReader

# Register PrescribedTransMsgReader in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsgReader_swigregister(PrescribedTransMsgReader)
class PrescribedTransMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedTransMsgPayload.PrescribedTransMsgWriter_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PrescribedTransMsgPayload.PrescribedTransMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsgWriter

# Register PrescribedTransMsgWriter in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsgWriter_swigregister(PrescribedTransMsgWriter)
class PrescribedTransMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PrescribedTransMsgPayload.PrescribedTransMsg_write_get, _PrescribedTransMsgPayload.PrescribedTransMsg_write_set)

    def addSubscriber(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsg_addSubscriber(self)

    def addAuthor(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PrescribedTransMsgPayload.PrescribedTransMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PrescribedTransMsgPayload.PrescribedTransMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PrescribedTransMsgPayload.PrescribedTransMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PrescribedTransMsgPayload.PrescribedTransMsg_zeroMsgPayload_get, _PrescribedTransMsgPayload.PrescribedTransMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsg_isLinked(self)

    def getPayloadSize(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PrescribedTransMsgPayload.PrescribedTransMsg_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsg())
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsg

# Register PrescribedTransMsg in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsg_swigregister(PrescribedTransMsg)
class PrescribedTransMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsgRecorder(*args))
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsgRecorder

    def SelfInit(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_clear(self)
    bskLogger = property(_PrescribedTransMsgPayload.PrescribedTransMsgRecorder_bskLogger_get, _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PrescribedTransMsgPayload.PrescribedTransMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PrescribedTransMsgRecorder in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsgRecorder_swigregister(PrescribedTransMsgRecorder)
class PrescribedTransMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_pop(self)

    def append(self, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_append(self, x)

    def empty(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_empty(self)

    def size(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_size(self)

    def swap(self, v):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_begin(self)

    def end(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_end(self)

    def rbegin(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_rend(self)

    def clear(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsgPayloadVector(*args))

    def push_back(self, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_front(self)

    def back(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsgPayloadVector

# Register PrescribedTransMsgPayloadVector in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsgPayloadVector_swigregister(PrescribedTransMsgPayloadVector)
class PrescribedTransMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_empty(self)

    def size(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_begin(self)

    def end(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_front(self)

    def back(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsgOutMsgsVector

# Register PrescribedTransMsgOutMsgsVector in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsVector_swigregister(PrescribedTransMsgOutMsgsVector)
class PrescribedTransMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsgOutMsgsPtrVector

# Register PrescribedTransMsgOutMsgsPtrVector in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsgOutMsgsPtrVector_swigregister(PrescribedTransMsgOutMsgsPtrVector)
class PrescribedTransMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_empty(self)

    def size(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_begin(self)

    def end(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_rend(self)

    def clear(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_front(self)

    def back(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsgInMsgsVector

# Register PrescribedTransMsgInMsgsVector in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsgInMsgsVector_swigregister(PrescribedTransMsgInMsgsVector)
class PrescribedTransMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PrescribedTransMsgPayload.PrescribedTransMsg_C_header_get, _PrescribedTransMsgPayload.PrescribedTransMsg_C_header_set)
    payload = property(_PrescribedTransMsgPayload.PrescribedTransMsg_C_payload_get, _PrescribedTransMsgPayload.PrescribedTransMsg_C_payload_set)
    payloadPointer = property(_PrescribedTransMsgPayload.PrescribedTransMsg_C_payloadPointer_get, _PrescribedTransMsgPayload.PrescribedTransMsg_C_payloadPointer_set)
    headerPointer = property(_PrescribedTransMsgPayload.PrescribedTransMsg_C_headerPointer_get, _PrescribedTransMsgPayload.PrescribedTransMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PrescribedTransMsg
        if type(source) == type(self):
            PrescribedTransMsg_C_subscribe(self, source)
        elif type(source) == PrescribedTransMsg:
            PrescribedTransMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PrescribedTransMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PrescribedTransMsg
        if type(source) == type(self):
            return (PrescribedTransMsg_C_isSubscribedTo(self, source))
        elif type(source) == PrescribedTransMsg:
            return (PrescribedTransMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import PrescribedTransMsgRecorder
        self.header.isLinked = 1
        return PrescribedTransMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PrescribedTransMsg_C_addAuthor(self, self)
        if data:
            PrescribedTransMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PrescribedTransMsg_C_addAuthor(self, self)
        PrescribedTransMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PrescribedTransMsg_C_read(self)


    def __init__(self):
        _PrescribedTransMsgPayload.PrescribedTransMsg_C_swiginit(self, _PrescribedTransMsgPayload.new_PrescribedTransMsg_C())
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_PrescribedTransMsg_C

# Register PrescribedTransMsg_C in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.PrescribedTransMsg_C_swigregister(PrescribedTransMsg_C)

def PrescribedTransMsg_cpp_subscribe(subscriber, source):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_cpp_subscribe(subscriber, source)

def PrescribedTransMsg_C_subscribe(subscriber, source):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_subscribe(subscriber, source)

def PrescribedTransMsg_C_isSubscribedTo(subscriber, source):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_isSubscribedTo(subscriber, source)

def PrescribedTransMsg_cpp_isSubscribedTo(subscriber, source):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_cpp_isSubscribedTo(subscriber, source)

def PrescribedTransMsg_C_addAuthor(coowner, data):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_addAuthor(coowner, data)

def PrescribedTransMsg_C_init(owner):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_init(owner)

def PrescribedTransMsg_C_isLinked(data):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_isLinked(data)

def PrescribedTransMsg_C_isWritten(data):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_isWritten(data)

def PrescribedTransMsg_C_timeWritten(data):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_timeWritten(data)

def PrescribedTransMsg_C_moduleID(data):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_moduleID(data)

def PrescribedTransMsg_C_write(data, destination, moduleID, callTime):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_write(data, destination, moduleID, callTime)

def PrescribedTransMsg_C_read(source):
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_read(source)

def PrescribedTransMsg_C_zeroMsgPayload():
    return _PrescribedTransMsgPayload.PrescribedTransMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PrescribedTransMsgPayload.MsgHeader_isLinked_get, _PrescribedTransMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PrescribedTransMsgPayload.MsgHeader_isWritten_get, _PrescribedTransMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PrescribedTransMsgPayload.MsgHeader_timeWritten_get, _PrescribedTransMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PrescribedTransMsgPayload.MsgHeader_moduleID_get, _PrescribedTransMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PrescribedTransMsgPayload.MsgHeader_swiginit(self, _PrescribedTransMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PrescribedTransMsgPayload.delete_MsgHeader

# Register MsgHeader in _PrescribedTransMsgPayload:
_PrescribedTransMsgPayload.MsgHeader_swigregister(MsgHeader)

