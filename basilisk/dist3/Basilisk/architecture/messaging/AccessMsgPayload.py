# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AccessMsgPayload
else:
    import _AccessMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AccessMsgPayload.delete_SwigPyIterator

    def value(self):
        return _AccessMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AccessMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AccessMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AccessMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AccessMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AccessMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _AccessMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _AccessMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _AccessMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AccessMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AccessMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AccessMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AccessMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AccessMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AccessMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AccessMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AccessMsgPayload:
_AccessMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _AccessMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _AccessMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _AccessMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _AccessMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _AccessMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _AccessMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _AccessMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _AccessMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _AccessMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _AccessMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _AccessMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _AccessMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _AccessMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _AccessMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _AccessMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _AccessMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccessMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccessMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _AccessMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _AccessMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _AccessMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccessMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccessMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccessMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccessMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccessMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _AccessMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _AccessMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _AccessMsgPayload.TimeVector_empty(self)

    def size(self):
        return _AccessMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _AccessMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _AccessMsgPayload.TimeVector_begin(self)

    def end(self):
        return _AccessMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _AccessMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _AccessMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _AccessMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _AccessMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _AccessMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _AccessMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _AccessMsgPayload.TimeVector_swiginit(self, _AccessMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _AccessMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _AccessMsgPayload.TimeVector_front(self)

    def back(self):
        return _AccessMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _AccessMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _AccessMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _AccessMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _AccessMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _AccessMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _AccessMsgPayload.delete_TimeVector

# Register TimeVector in _AccessMsgPayload:
_AccessMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccessMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccessMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AccessMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _AccessMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AccessMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccessMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccessMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccessMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccessMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccessMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AccessMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _AccessMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _AccessMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _AccessMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _AccessMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _AccessMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _AccessMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _AccessMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _AccessMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _AccessMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _AccessMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AccessMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AccessMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _AccessMsgPayload.DoubleVector_swiginit(self, _AccessMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _AccessMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _AccessMsgPayload.DoubleVector_front(self)

    def back(self):
        return _AccessMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _AccessMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AccessMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AccessMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AccessMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AccessMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _AccessMsgPayload.delete_DoubleVector

# Register DoubleVector in _AccessMsgPayload:
_AccessMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccessMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccessMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _AccessMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _AccessMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _AccessMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccessMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccessMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccessMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccessMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccessMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _AccessMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _AccessMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _AccessMsgPayload.StringVector_empty(self)

    def size(self):
        return _AccessMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _AccessMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _AccessMsgPayload.StringVector_begin(self)

    def end(self):
        return _AccessMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _AccessMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _AccessMsgPayload.StringVector_rend(self)

    def clear(self):
        return _AccessMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _AccessMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _AccessMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _AccessMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _AccessMsgPayload.StringVector_swiginit(self, _AccessMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _AccessMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _AccessMsgPayload.StringVector_front(self)

    def back(self):
        return _AccessMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _AccessMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _AccessMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _AccessMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _AccessMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _AccessMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _AccessMsgPayload.delete_StringVector

# Register StringVector in _AccessMsgPayload:
_AccessMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _AccessMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _AccessMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _AccessMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _AccessMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _AccessMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _AccessMsgPayload.NANO2SEC
SEC2NANO = _AccessMsgPayload.SEC2NANO
SEC2HOUR = _AccessMsgPayload.SEC2HOUR
BOOL_FALSE = _AccessMsgPayload.BOOL_FALSE
BOOL_TRUE = _AccessMsgPayload.BOOL_TRUE
AVAILABLE = _AccessMsgPayload.AVAILABLE
UNAVAILABLE = _AccessMsgPayload.UNAVAILABLE
BalancedWheels = _AccessMsgPayload.BalancedWheels
JitterSimple = _AccessMsgPayload.JitterSimple
JitterFullyCoupled = _AccessMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccessMsgPayload.SysModel_swiginit(self, _AccessMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _AccessMsgPayload.delete_SysModel

    def SelfInit(self):
        return _AccessMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _AccessMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AccessMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AccessMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_AccessMsgPayload.SysModel_ModelTag_get, _AccessMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_AccessMsgPayload.SysModel_CallCounts_get, _AccessMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_AccessMsgPayload.SysModel_RNGSeed_get, _AccessMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_AccessMsgPayload.SysModel_moduleID_get, _AccessMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _AccessMsgPayload:
_AccessMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _AccessMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _AccessMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _AccessMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _AccessMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _AccessMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _AccessMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _AccessMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _AccessMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _AccessMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _AccessMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _AccessMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _AccessMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class AccessMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hasAccess = property(_AccessMsgPayload.AccessMsgPayload_hasAccess_get, _AccessMsgPayload.AccessMsgPayload_hasAccess_set)
    slantRange = property(_AccessMsgPayload.AccessMsgPayload_slantRange_get, _AccessMsgPayload.AccessMsgPayload_slantRange_set)
    elevation = property(_AccessMsgPayload.AccessMsgPayload_elevation_get, _AccessMsgPayload.AccessMsgPayload_elevation_set)
    azimuth = property(_AccessMsgPayload.AccessMsgPayload_azimuth_get, _AccessMsgPayload.AccessMsgPayload_azimuth_set)
    range_dot = property(_AccessMsgPayload.AccessMsgPayload_range_dot_get, _AccessMsgPayload.AccessMsgPayload_range_dot_set)
    el_dot = property(_AccessMsgPayload.AccessMsgPayload_el_dot_get, _AccessMsgPayload.AccessMsgPayload_el_dot_set)
    az_dot = property(_AccessMsgPayload.AccessMsgPayload_az_dot_get, _AccessMsgPayload.AccessMsgPayload_az_dot_set)
    r_BL_L = property(_AccessMsgPayload.AccessMsgPayload_r_BL_L_get, _AccessMsgPayload.AccessMsgPayload_r_BL_L_set)
    v_BL_L = property(_AccessMsgPayload.AccessMsgPayload_v_BL_L_get, _AccessMsgPayload.AccessMsgPayload_v_BL_L_set)

    def __init__(self):
        _AccessMsgPayload.AccessMsgPayload_swiginit(self, _AccessMsgPayload.new_AccessMsgPayload())
    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsgPayload

# Register AccessMsgPayload in _AccessMsgPayload:
_AccessMsgPayload.AccessMsgPayload_swigregister(AccessMsgPayload)
class AccessMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_AccessMsgPayload.AccessMsgReader_bskLogger_get, _AccessMsgPayload.AccessMsgReader_bskLogger_set)
    zeroMsgPayload = property(_AccessMsgPayload.AccessMsgReader_zeroMsgPayload_get, _AccessMsgPayload.AccessMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _AccessMsgPayload.AccessMsgReader_swiginit(self, _AccessMsgPayload.new_AccessMsgReader(*args))

    def __call__(self):
        return _AccessMsgPayload.AccessMsgReader___call__(self)

    def isLinked(self):
        return _AccessMsgPayload.AccessMsgReader_isLinked(self)

    def isWritten(self):
        return _AccessMsgPayload.AccessMsgReader_isWritten(self)

    def timeWritten(self):
        return _AccessMsgPayload.AccessMsgReader_timeWritten(self)

    def moduleID(self):
        return _AccessMsgPayload.AccessMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _AccessMsgPayload.AccessMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _AccessMsgPayload.AccessMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _AccessMsgPayload.AccessMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _AccessMsgPayload.AccessMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _AccessMsgPayload.AccessMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == AccessMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.AccessMsgPayload import AccessMsg_C
            if type(source) == AccessMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<AccessMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == AccessMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.AccessMsgPayload import AccessMsg_C
        except ImportError:
            return 0

        if type(source) == AccessMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsgReader

# Register AccessMsgReader in _AccessMsgPayload:
_AccessMsgPayload.AccessMsgReader_swigregister(AccessMsgReader)
class AccessMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccessMsgPayload.AccessMsgWriter_swiginit(self, _AccessMsgPayload.new_AccessMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _AccessMsgPayload.AccessMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsgWriter

# Register AccessMsgWriter in _AccessMsgPayload:
_AccessMsgPayload.AccessMsgWriter_swigregister(AccessMsgWriter)
class AccessMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_AccessMsgPayload.AccessMsg_write_get, _AccessMsgPayload.AccessMsg_write_set)

    def addSubscriber(self):
        return _AccessMsgPayload.AccessMsg_addSubscriber(self)

    def addAuthor(self):
        return _AccessMsgPayload.AccessMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _AccessMsgPayload.AccessMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _AccessMsgPayload.AccessMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _AccessMsgPayload.AccessMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_AccessMsgPayload.AccessMsg_zeroMsgPayload_get, _AccessMsgPayload.AccessMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _AccessMsgPayload.AccessMsg_isLinked(self)

    def getPayloadSize(self):
        return _AccessMsgPayload.AccessMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _AccessMsgPayload.AccessMsg_swiginit(self, _AccessMsgPayload.new_AccessMsg())
    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsg

# Register AccessMsg in _AccessMsgPayload:
_AccessMsgPayload.AccessMsg_swigregister(AccessMsg)
class AccessMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccessMsgPayload.AccessMsgRecorder_swiginit(self, _AccessMsgPayload.new_AccessMsgRecorder(*args))
    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsgRecorder

    def SelfInit(self):
        return _AccessMsgPayload.AccessMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _AccessMsgPayload.AccessMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AccessMsgPayload.AccessMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AccessMsgPayload.AccessMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _AccessMsgPayload.AccessMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _AccessMsgPayload.AccessMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _AccessMsgPayload.AccessMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _AccessMsgPayload.AccessMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _AccessMsgPayload.AccessMsgRecorder_clear(self)
    bskLogger = property(_AccessMsgPayload.AccessMsgRecorder_bskLogger_get, _AccessMsgPayload.AccessMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _AccessMsgPayload.AccessMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register AccessMsgRecorder in _AccessMsgPayload:
_AccessMsgPayload.AccessMsgRecorder_swigregister(AccessMsgRecorder)
class AccessMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccessMsgPayload.AccessMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _AccessMsgPayload.AccessMsgPayloadVector___bool__(self)

    def __len__(self):
        return _AccessMsgPayload.AccessMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _AccessMsgPayload.AccessMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccessMsgPayload.AccessMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccessMsgPayload.AccessMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccessMsgPayload.AccessMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccessMsgPayload.AccessMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccessMsgPayload.AccessMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_pop(self)

    def append(self, x):
        return _AccessMsgPayload.AccessMsgPayloadVector_append(self, x)

    def empty(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_empty(self)

    def size(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_size(self)

    def swap(self, v):
        return _AccessMsgPayload.AccessMsgPayloadVector_swap(self, v)

    def begin(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_begin(self)

    def end(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_end(self)

    def rbegin(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_rbegin(self)

    def rend(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_rend(self)

    def clear(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _AccessMsgPayload.AccessMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _AccessMsgPayload.AccessMsgPayloadVector_swiginit(self, _AccessMsgPayload.new_AccessMsgPayloadVector(*args))

    def push_back(self, x):
        return _AccessMsgPayload.AccessMsgPayloadVector_push_back(self, x)

    def front(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_front(self)

    def back(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _AccessMsgPayload.AccessMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _AccessMsgPayload.AccessMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _AccessMsgPayload.AccessMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _AccessMsgPayload.AccessMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _AccessMsgPayload.AccessMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsgPayloadVector

# Register AccessMsgPayloadVector in _AccessMsgPayload:
_AccessMsgPayload.AccessMsgPayloadVector_swigregister(AccessMsgPayloadVector)
class AccessMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_empty(self)

    def size(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_begin(self)

    def end(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_rend(self)

    def clear(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AccessMsgPayload.AccessMsgOutMsgsVector_swiginit(self, _AccessMsgPayload.new_AccessMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_front(self)

    def back(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _AccessMsgPayload.AccessMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsgOutMsgsVector

# Register AccessMsgOutMsgsVector in _AccessMsgPayload:
_AccessMsgPayload.AccessMsgOutMsgsVector_swigregister(AccessMsgOutMsgsVector)
class AccessMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _AccessMsgPayload.AccessMsgOutMsgsPtrVector_swiginit(self, _AccessMsgPayload.new_AccessMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _AccessMsgPayload.AccessMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsgOutMsgsPtrVector

# Register AccessMsgOutMsgsPtrVector in _AccessMsgPayload:
_AccessMsgPayload.AccessMsgOutMsgsPtrVector_swigregister(AccessMsgOutMsgsPtrVector)
class AccessMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AccessMsgPayload.AccessMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccessMsgPayload.AccessMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccessMsgPayload.AccessMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccessMsgPayload.AccessMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccessMsgPayload.AccessMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccessMsgPayload.AccessMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_pop(self)

    def append(self, x):
        return _AccessMsgPayload.AccessMsgInMsgsVector_append(self, x)

    def empty(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_empty(self)

    def size(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_size(self)

    def swap(self, v):
        return _AccessMsgPayload.AccessMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_begin(self)

    def end(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_end(self)

    def rbegin(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_rend(self)

    def clear(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AccessMsgPayload.AccessMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AccessMsgPayload.AccessMsgInMsgsVector_swiginit(self, _AccessMsgPayload.new_AccessMsgInMsgsVector(*args))

    def push_back(self, x):
        return _AccessMsgPayload.AccessMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_front(self)

    def back(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _AccessMsgPayload.AccessMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AccessMsgPayload.AccessMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AccessMsgPayload.AccessMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AccessMsgPayload.AccessMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _AccessMsgPayload.AccessMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsgInMsgsVector

# Register AccessMsgInMsgsVector in _AccessMsgPayload:
_AccessMsgPayload.AccessMsgInMsgsVector_swigregister(AccessMsgInMsgsVector)
class AccessMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_AccessMsgPayload.AccessMsg_C_header_get, _AccessMsgPayload.AccessMsg_C_header_set)
    payload = property(_AccessMsgPayload.AccessMsg_C_payload_get, _AccessMsgPayload.AccessMsg_C_payload_set)
    payloadPointer = property(_AccessMsgPayload.AccessMsg_C_payloadPointer_get, _AccessMsgPayload.AccessMsg_C_payloadPointer_set)
    headerPointer = property(_AccessMsgPayload.AccessMsg_C_headerPointer_get, _AccessMsgPayload.AccessMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import AccessMsg
        if type(source) == type(self):
            AccessMsg_C_subscribe(self, source)
        elif type(source) == AccessMsg:
            AccessMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe AccessMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import AccessMsg
        if type(source) == type(self):
            return (AccessMsg_C_isSubscribedTo(self, source))
        elif type(source) == AccessMsg:
            return (AccessMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import AccessMsgRecorder
        self.header.isLinked = 1
        return AccessMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        AccessMsg_C_addAuthor(self, self)
        if data:
            AccessMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        AccessMsg_C_addAuthor(self, self)
        AccessMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return AccessMsg_C_read(self)


    def __init__(self):
        _AccessMsgPayload.AccessMsg_C_swiginit(self, _AccessMsgPayload.new_AccessMsg_C())
    __swig_destroy__ = _AccessMsgPayload.delete_AccessMsg_C

# Register AccessMsg_C in _AccessMsgPayload:
_AccessMsgPayload.AccessMsg_C_swigregister(AccessMsg_C)

def AccessMsg_cpp_subscribe(subscriber, source):
    return _AccessMsgPayload.AccessMsg_cpp_subscribe(subscriber, source)

def AccessMsg_C_subscribe(subscriber, source):
    return _AccessMsgPayload.AccessMsg_C_subscribe(subscriber, source)

def AccessMsg_C_isSubscribedTo(subscriber, source):
    return _AccessMsgPayload.AccessMsg_C_isSubscribedTo(subscriber, source)

def AccessMsg_cpp_isSubscribedTo(subscriber, source):
    return _AccessMsgPayload.AccessMsg_cpp_isSubscribedTo(subscriber, source)

def AccessMsg_C_addAuthor(coowner, data):
    return _AccessMsgPayload.AccessMsg_C_addAuthor(coowner, data)

def AccessMsg_C_init(owner):
    return _AccessMsgPayload.AccessMsg_C_init(owner)

def AccessMsg_C_isLinked(data):
    return _AccessMsgPayload.AccessMsg_C_isLinked(data)

def AccessMsg_C_isWritten(data):
    return _AccessMsgPayload.AccessMsg_C_isWritten(data)

def AccessMsg_C_timeWritten(data):
    return _AccessMsgPayload.AccessMsg_C_timeWritten(data)

def AccessMsg_C_moduleID(data):
    return _AccessMsgPayload.AccessMsg_C_moduleID(data)

def AccessMsg_C_write(data, destination, moduleID, callTime):
    return _AccessMsgPayload.AccessMsg_C_write(data, destination, moduleID, callTime)

def AccessMsg_C_read(source):
    return _AccessMsgPayload.AccessMsg_C_read(source)

def AccessMsg_C_zeroMsgPayload():
    return _AccessMsgPayload.AccessMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_AccessMsgPayload.MsgHeader_isLinked_get, _AccessMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_AccessMsgPayload.MsgHeader_isWritten_get, _AccessMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_AccessMsgPayload.MsgHeader_timeWritten_get, _AccessMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_AccessMsgPayload.MsgHeader_moduleID_get, _AccessMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _AccessMsgPayload.MsgHeader_swiginit(self, _AccessMsgPayload.new_MsgHeader())
    __swig_destroy__ = _AccessMsgPayload.delete_MsgHeader

# Register MsgHeader in _AccessMsgPayload:
_AccessMsgPayload.MsgHeader_swigregister(MsgHeader)

