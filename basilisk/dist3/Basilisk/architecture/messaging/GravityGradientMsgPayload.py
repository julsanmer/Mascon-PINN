# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GravityGradientMsgPayload
else:
    import _GravityGradientMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GravityGradientMsgPayload.delete_SwigPyIterator

    def value(self):
        return _GravityGradientMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GravityGradientMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GravityGradientMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GravityGradientMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GravityGradientMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GravityGradientMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _GravityGradientMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _GravityGradientMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _GravityGradientMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GravityGradientMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GravityGradientMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GravityGradientMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GravityGradientMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GravityGradientMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GravityGradientMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GravityGradientMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _GravityGradientMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _GravityGradientMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _GravityGradientMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _GravityGradientMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _GravityGradientMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _GravityGradientMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _GravityGradientMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _GravityGradientMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _GravityGradientMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _GravityGradientMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _GravityGradientMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _GravityGradientMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _GravityGradientMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _GravityGradientMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _GravityGradientMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _GravityGradientMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GravityGradientMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GravityGradientMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _GravityGradientMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _GravityGradientMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _GravityGradientMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GravityGradientMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GravityGradientMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GravityGradientMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GravityGradientMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GravityGradientMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _GravityGradientMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _GravityGradientMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _GravityGradientMsgPayload.TimeVector_empty(self)

    def size(self):
        return _GravityGradientMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _GravityGradientMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _GravityGradientMsgPayload.TimeVector_begin(self)

    def end(self):
        return _GravityGradientMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _GravityGradientMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _GravityGradientMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _GravityGradientMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _GravityGradientMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _GravityGradientMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _GravityGradientMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _GravityGradientMsgPayload.TimeVector_swiginit(self, _GravityGradientMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _GravityGradientMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _GravityGradientMsgPayload.TimeVector_front(self)

    def back(self):
        return _GravityGradientMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _GravityGradientMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _GravityGradientMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _GravityGradientMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _GravityGradientMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _GravityGradientMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _GravityGradientMsgPayload.delete_TimeVector

# Register TimeVector in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GravityGradientMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GravityGradientMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _GravityGradientMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _GravityGradientMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _GravityGradientMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GravityGradientMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GravityGradientMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GravityGradientMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GravityGradientMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GravityGradientMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _GravityGradientMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _GravityGradientMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _GravityGradientMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _GravityGradientMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _GravityGradientMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _GravityGradientMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _GravityGradientMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _GravityGradientMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _GravityGradientMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _GravityGradientMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _GravityGradientMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _GravityGradientMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _GravityGradientMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _GravityGradientMsgPayload.DoubleVector_swiginit(self, _GravityGradientMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _GravityGradientMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _GravityGradientMsgPayload.DoubleVector_front(self)

    def back(self):
        return _GravityGradientMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _GravityGradientMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _GravityGradientMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _GravityGradientMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _GravityGradientMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _GravityGradientMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _GravityGradientMsgPayload.delete_DoubleVector

# Register DoubleVector in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GravityGradientMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GravityGradientMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _GravityGradientMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _GravityGradientMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _GravityGradientMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GravityGradientMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GravityGradientMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GravityGradientMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GravityGradientMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GravityGradientMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _GravityGradientMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _GravityGradientMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _GravityGradientMsgPayload.StringVector_empty(self)

    def size(self):
        return _GravityGradientMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _GravityGradientMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _GravityGradientMsgPayload.StringVector_begin(self)

    def end(self):
        return _GravityGradientMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _GravityGradientMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _GravityGradientMsgPayload.StringVector_rend(self)

    def clear(self):
        return _GravityGradientMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _GravityGradientMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _GravityGradientMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _GravityGradientMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _GravityGradientMsgPayload.StringVector_swiginit(self, _GravityGradientMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _GravityGradientMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _GravityGradientMsgPayload.StringVector_front(self)

    def back(self):
        return _GravityGradientMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _GravityGradientMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _GravityGradientMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _GravityGradientMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _GravityGradientMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _GravityGradientMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _GravityGradientMsgPayload.delete_StringVector

# Register StringVector in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _GravityGradientMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _GravityGradientMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _GravityGradientMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _GravityGradientMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _GravityGradientMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _GravityGradientMsgPayload.NANO2SEC
SEC2NANO = _GravityGradientMsgPayload.SEC2NANO
SEC2HOUR = _GravityGradientMsgPayload.SEC2HOUR
BOOL_FALSE = _GravityGradientMsgPayload.BOOL_FALSE
BOOL_TRUE = _GravityGradientMsgPayload.BOOL_TRUE
AVAILABLE = _GravityGradientMsgPayload.AVAILABLE
UNAVAILABLE = _GravityGradientMsgPayload.UNAVAILABLE
BalancedWheels = _GravityGradientMsgPayload.BalancedWheels
JitterSimple = _GravityGradientMsgPayload.JitterSimple
JitterFullyCoupled = _GravityGradientMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GravityGradientMsgPayload.SysModel_swiginit(self, _GravityGradientMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _GravityGradientMsgPayload.delete_SysModel

    def SelfInit(self):
        return _GravityGradientMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _GravityGradientMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _GravityGradientMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _GravityGradientMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_GravityGradientMsgPayload.SysModel_ModelTag_get, _GravityGradientMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_GravityGradientMsgPayload.SysModel_CallCounts_get, _GravityGradientMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_GravityGradientMsgPayload.SysModel_RNGSeed_get, _GravityGradientMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_GravityGradientMsgPayload.SysModel_moduleID_get, _GravityGradientMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _GravityGradientMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _GravityGradientMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _GravityGradientMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _GravityGradientMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _GravityGradientMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _GravityGradientMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _GravityGradientMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _GravityGradientMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _GravityGradientMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _GravityGradientMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _GravityGradientMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _GravityGradientMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class GravityGradientMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gravityGradientTorque_B = property(_GravityGradientMsgPayload.GravityGradientMsgPayload_gravityGradientTorque_B_get, _GravityGradientMsgPayload.GravityGradientMsgPayload_gravityGradientTorque_B_set)

    def __init__(self):
        _GravityGradientMsgPayload.GravityGradientMsgPayload_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsgPayload())
    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsgPayload

# Register GravityGradientMsgPayload in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsgPayload_swigregister(GravityGradientMsgPayload)
class GravityGradientMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_GravityGradientMsgPayload.GravityGradientMsgReader_bskLogger_get, _GravityGradientMsgPayload.GravityGradientMsgReader_bskLogger_set)
    zeroMsgPayload = property(_GravityGradientMsgPayload.GravityGradientMsgReader_zeroMsgPayload_get, _GravityGradientMsgPayload.GravityGradientMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _GravityGradientMsgPayload.GravityGradientMsgReader_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsgReader(*args))

    def __call__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgReader___call__(self)

    def isLinked(self):
        return _GravityGradientMsgPayload.GravityGradientMsgReader_isLinked(self)

    def isWritten(self):
        return _GravityGradientMsgPayload.GravityGradientMsgReader_isWritten(self)

    def timeWritten(self):
        return _GravityGradientMsgPayload.GravityGradientMsgReader_timeWritten(self)

    def moduleID(self):
        return _GravityGradientMsgPayload.GravityGradientMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _GravityGradientMsgPayload.GravityGradientMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _GravityGradientMsgPayload.GravityGradientMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _GravityGradientMsgPayload.GravityGradientMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _GravityGradientMsgPayload.GravityGradientMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _GravityGradientMsgPayload.GravityGradientMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == GravityGradientMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.GravityGradientMsgPayload import GravityGradientMsg_C
            if type(source) == GravityGradientMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<GravityGradientMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == GravityGradientMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.GravityGradientMsgPayload import GravityGradientMsg_C
        except ImportError:
            return 0

        if type(source) == GravityGradientMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsgReader

# Register GravityGradientMsgReader in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsgReader_swigregister(GravityGradientMsgReader)
class GravityGradientMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GravityGradientMsgPayload.GravityGradientMsgWriter_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _GravityGradientMsgPayload.GravityGradientMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsgWriter

# Register GravityGradientMsgWriter in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsgWriter_swigregister(GravityGradientMsgWriter)
class GravityGradientMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_GravityGradientMsgPayload.GravityGradientMsg_write_get, _GravityGradientMsgPayload.GravityGradientMsg_write_set)

    def addSubscriber(self):
        return _GravityGradientMsgPayload.GravityGradientMsg_addSubscriber(self)

    def addAuthor(self):
        return _GravityGradientMsgPayload.GravityGradientMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _GravityGradientMsgPayload.GravityGradientMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _GravityGradientMsgPayload.GravityGradientMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _GravityGradientMsgPayload.GravityGradientMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_GravityGradientMsgPayload.GravityGradientMsg_zeroMsgPayload_get, _GravityGradientMsgPayload.GravityGradientMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _GravityGradientMsgPayload.GravityGradientMsg_isLinked(self)

    def getPayloadSize(self):
        return _GravityGradientMsgPayload.GravityGradientMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _GravityGradientMsgPayload.GravityGradientMsg_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsg())
    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsg

# Register GravityGradientMsg in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsg_swigregister(GravityGradientMsg)
class GravityGradientMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GravityGradientMsgPayload.GravityGradientMsgRecorder_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsgRecorder(*args))
    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsgRecorder

    def SelfInit(self):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder_clear(self)
    bskLogger = property(_GravityGradientMsgPayload.GravityGradientMsgRecorder_bskLogger_get, _GravityGradientMsgPayload.GravityGradientMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _GravityGradientMsgPayload.GravityGradientMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register GravityGradientMsgRecorder in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsgRecorder_swigregister(GravityGradientMsgRecorder)
class GravityGradientMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___bool__(self)

    def __len__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_pop(self)

    def append(self, x):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_append(self, x)

    def empty(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_empty(self)

    def size(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_size(self)

    def swap(self, v):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_swap(self, v)

    def begin(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_begin(self)

    def end(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_end(self)

    def rbegin(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_rbegin(self)

    def rend(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_rend(self)

    def clear(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsgPayloadVector(*args))

    def push_back(self, x):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_push_back(self, x)

    def front(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_front(self)

    def back(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _GravityGradientMsgPayload.GravityGradientMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsgPayloadVector

# Register GravityGradientMsgPayloadVector in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsgPayloadVector_swigregister(GravityGradientMsgPayloadVector)
class GravityGradientMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_empty(self)

    def size(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_begin(self)

    def end(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_rend(self)

    def clear(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_front(self)

    def back(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsgOutMsgsVector

# Register GravityGradientMsgOutMsgsVector in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsgOutMsgsVector_swigregister(GravityGradientMsgOutMsgsVector)
class GravityGradientMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsgOutMsgsPtrVector

# Register GravityGradientMsgOutMsgsPtrVector in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsgOutMsgsPtrVector_swigregister(GravityGradientMsgOutMsgsPtrVector)
class GravityGradientMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_pop(self)

    def append(self, x):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_append(self, x)

    def empty(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_empty(self)

    def size(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_size(self)

    def swap(self, v):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_begin(self)

    def end(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_end(self)

    def rbegin(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_rend(self)

    def clear(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsgInMsgsVector(*args))

    def push_back(self, x):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_front(self)

    def back(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsgInMsgsVector

# Register GravityGradientMsgInMsgsVector in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsgInMsgsVector_swigregister(GravityGradientMsgInMsgsVector)
class GravityGradientMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_GravityGradientMsgPayload.GravityGradientMsg_C_header_get, _GravityGradientMsgPayload.GravityGradientMsg_C_header_set)
    payload = property(_GravityGradientMsgPayload.GravityGradientMsg_C_payload_get, _GravityGradientMsgPayload.GravityGradientMsg_C_payload_set)
    payloadPointer = property(_GravityGradientMsgPayload.GravityGradientMsg_C_payloadPointer_get, _GravityGradientMsgPayload.GravityGradientMsg_C_payloadPointer_set)
    headerPointer = property(_GravityGradientMsgPayload.GravityGradientMsg_C_headerPointer_get, _GravityGradientMsgPayload.GravityGradientMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import GravityGradientMsg
        if type(source) == type(self):
            GravityGradientMsg_C_subscribe(self, source)
        elif type(source) == GravityGradientMsg:
            GravityGradientMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe GravityGradientMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import GravityGradientMsg
        if type(source) == type(self):
            return (GravityGradientMsg_C_isSubscribedTo(self, source))
        elif type(source) == GravityGradientMsg:
            return (GravityGradientMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import GravityGradientMsgRecorder
        self.header.isLinked = 1
        return GravityGradientMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        GravityGradientMsg_C_addAuthor(self, self)
        if data:
            GravityGradientMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        GravityGradientMsg_C_addAuthor(self, self)
        GravityGradientMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return GravityGradientMsg_C_read(self)


    def __init__(self):
        _GravityGradientMsgPayload.GravityGradientMsg_C_swiginit(self, _GravityGradientMsgPayload.new_GravityGradientMsg_C())
    __swig_destroy__ = _GravityGradientMsgPayload.delete_GravityGradientMsg_C

# Register GravityGradientMsg_C in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.GravityGradientMsg_C_swigregister(GravityGradientMsg_C)

def GravityGradientMsg_cpp_subscribe(subscriber, source):
    return _GravityGradientMsgPayload.GravityGradientMsg_cpp_subscribe(subscriber, source)

def GravityGradientMsg_C_subscribe(subscriber, source):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_subscribe(subscriber, source)

def GravityGradientMsg_C_isSubscribedTo(subscriber, source):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_isSubscribedTo(subscriber, source)

def GravityGradientMsg_cpp_isSubscribedTo(subscriber, source):
    return _GravityGradientMsgPayload.GravityGradientMsg_cpp_isSubscribedTo(subscriber, source)

def GravityGradientMsg_C_addAuthor(coowner, data):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_addAuthor(coowner, data)

def GravityGradientMsg_C_init(owner):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_init(owner)

def GravityGradientMsg_C_isLinked(data):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_isLinked(data)

def GravityGradientMsg_C_isWritten(data):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_isWritten(data)

def GravityGradientMsg_C_timeWritten(data):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_timeWritten(data)

def GravityGradientMsg_C_moduleID(data):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_moduleID(data)

def GravityGradientMsg_C_write(data, destination, moduleID, callTime):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_write(data, destination, moduleID, callTime)

def GravityGradientMsg_C_read(source):
    return _GravityGradientMsgPayload.GravityGradientMsg_C_read(source)

def GravityGradientMsg_C_zeroMsgPayload():
    return _GravityGradientMsgPayload.GravityGradientMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_GravityGradientMsgPayload.MsgHeader_isLinked_get, _GravityGradientMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_GravityGradientMsgPayload.MsgHeader_isWritten_get, _GravityGradientMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_GravityGradientMsgPayload.MsgHeader_timeWritten_get, _GravityGradientMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_GravityGradientMsgPayload.MsgHeader_moduleID_get, _GravityGradientMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _GravityGradientMsgPayload.MsgHeader_swiginit(self, _GravityGradientMsgPayload.new_MsgHeader())
    __swig_destroy__ = _GravityGradientMsgPayload.delete_MsgHeader

# Register MsgHeader in _GravityGradientMsgPayload:
_GravityGradientMsgPayload.MsgHeader_swigregister(MsgHeader)

