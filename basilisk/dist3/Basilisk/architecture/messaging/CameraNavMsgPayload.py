# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CameraNavMsgPayload
else:
    import _CameraNavMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CameraNavMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CameraNavMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CameraNavMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CameraNavMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CameraNavMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CameraNavMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CameraNavMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CameraNavMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CameraNavMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CameraNavMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CameraNavMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CameraNavMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CameraNavMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CameraNavMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CameraNavMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CameraNavMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CameraNavMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CameraNavMsgPayload:
_CameraNavMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CameraNavMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CameraNavMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CameraNavMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CameraNavMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CameraNavMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CameraNavMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CameraNavMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CameraNavMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CameraNavMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CameraNavMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CameraNavMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CameraNavMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CameraNavMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CameraNavMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CameraNavMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CameraNavMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNavMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNavMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CameraNavMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CameraNavMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNavMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNavMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNavMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNavMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNavMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNavMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CameraNavMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CameraNavMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CameraNavMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CameraNavMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CameraNavMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CameraNavMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CameraNavMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CameraNavMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CameraNavMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CameraNavMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CameraNavMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CameraNavMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CameraNavMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNavMsgPayload.TimeVector_swiginit(self, _CameraNavMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CameraNavMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CameraNavMsgPayload.TimeVector_front(self)

    def back(self):
        return _CameraNavMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CameraNavMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNavMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNavMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNavMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CameraNavMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CameraNavMsgPayload.delete_TimeVector

# Register TimeVector in _CameraNavMsgPayload:
_CameraNavMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNavMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNavMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CameraNavMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CameraNavMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNavMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNavMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNavMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNavMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNavMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNavMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CameraNavMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CameraNavMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CameraNavMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CameraNavMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CameraNavMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CameraNavMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CameraNavMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CameraNavMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CameraNavMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CameraNavMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CameraNavMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CameraNavMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CameraNavMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNavMsgPayload.DoubleVector_swiginit(self, _CameraNavMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CameraNavMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CameraNavMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CameraNavMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CameraNavMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNavMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNavMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNavMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CameraNavMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CameraNavMsgPayload.delete_DoubleVector

# Register DoubleVector in _CameraNavMsgPayload:
_CameraNavMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNavMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNavMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CameraNavMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CameraNavMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNavMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNavMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNavMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNavMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNavMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNavMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CameraNavMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CameraNavMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CameraNavMsgPayload.StringVector_empty(self)

    def size(self):
        return _CameraNavMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CameraNavMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CameraNavMsgPayload.StringVector_begin(self)

    def end(self):
        return _CameraNavMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CameraNavMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CameraNavMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CameraNavMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CameraNavMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CameraNavMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CameraNavMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNavMsgPayload.StringVector_swiginit(self, _CameraNavMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CameraNavMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CameraNavMsgPayload.StringVector_front(self)

    def back(self):
        return _CameraNavMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CameraNavMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNavMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNavMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNavMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CameraNavMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CameraNavMsgPayload.delete_StringVector

# Register StringVector in _CameraNavMsgPayload:
_CameraNavMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CameraNavMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CameraNavMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CameraNavMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CameraNavMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CameraNavMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CameraNavMsgPayload.NANO2SEC
SEC2NANO = _CameraNavMsgPayload.SEC2NANO
SEC2HOUR = _CameraNavMsgPayload.SEC2HOUR
BOOL_FALSE = _CameraNavMsgPayload.BOOL_FALSE
BOOL_TRUE = _CameraNavMsgPayload.BOOL_TRUE
AVAILABLE = _CameraNavMsgPayload.AVAILABLE
UNAVAILABLE = _CameraNavMsgPayload.UNAVAILABLE
BalancedWheels = _CameraNavMsgPayload.BalancedWheels
JitterSimple = _CameraNavMsgPayload.JitterSimple
JitterFullyCoupled = _CameraNavMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraNavMsgPayload.SysModel_swiginit(self, _CameraNavMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CameraNavMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CameraNavMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CameraNavMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CameraNavMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CameraNavMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CameraNavMsgPayload.SysModel_ModelTag_get, _CameraNavMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CameraNavMsgPayload.SysModel_CallCounts_get, _CameraNavMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CameraNavMsgPayload.SysModel_RNGSeed_get, _CameraNavMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CameraNavMsgPayload.SysModel_moduleID_get, _CameraNavMsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _CameraNavMsgPayload:
_CameraNavMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CameraNavMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CameraNavMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CameraNavMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CameraNavMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CameraNavMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CameraNavMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CameraNavMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CameraNavMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CameraNavMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CameraNavMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CameraNavMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CameraNavMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

MAX_LANDMARKS_BUF = _CameraNavMsgPayload.MAX_LANDMARKS_BUF
class CameraNavMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nLvisible = property(_CameraNavMsgPayload.CameraNavMsgPayload_nLvisible_get, _CameraNavMsgPayload.CameraNavMsgPayload_nLvisible_set)
    idxLvisible = property(_CameraNavMsgPayload.CameraNavMsgPayload_idxLvisible_get, _CameraNavMsgPayload.CameraNavMsgPayload_idxLvisible_set)
    pLvisible = property(_CameraNavMsgPayload.CameraNavMsgPayload_pLvisible_get, _CameraNavMsgPayload.CameraNavMsgPayload_pLvisible_set)

    def __init__(self):
        _CameraNavMsgPayload.CameraNavMsgPayload_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsgPayload())
    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsgPayload

# Register CameraNavMsgPayload in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsgPayload_swigregister(CameraNavMsgPayload)
class CameraNavMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CameraNavMsgPayload.CameraNavMsgReader_bskLogger_get, _CameraNavMsgPayload.CameraNavMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CameraNavMsgPayload.CameraNavMsgReader_zeroMsgPayload_get, _CameraNavMsgPayload.CameraNavMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CameraNavMsgPayload.CameraNavMsgReader_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsgReader(*args))

    def __call__(self):
        return _CameraNavMsgPayload.CameraNavMsgReader___call__(self)

    def isLinked(self):
        return _CameraNavMsgPayload.CameraNavMsgReader_isLinked(self)

    def isWritten(self):
        return _CameraNavMsgPayload.CameraNavMsgReader_isWritten(self)

    def timeWritten(self):
        return _CameraNavMsgPayload.CameraNavMsgReader_timeWritten(self)

    def moduleID(self):
        return _CameraNavMsgPayload.CameraNavMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CameraNavMsgPayload.CameraNavMsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _CameraNavMsgPayload.CameraNavMsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _CameraNavMsgPayload.CameraNavMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CameraNavMsgPayload.CameraNavMsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _CameraNavMsgPayload.CameraNavMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CameraNavMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CameraNavMsgPayload import CameraNavMsg_C
            if type(source) == CameraNavMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CameraNavMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CameraNavMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CameraNavMsgPayload import CameraNavMsg_C
        except ImportError:
            return 0

        if type(source) == CameraNavMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsgReader

# Register CameraNavMsgReader in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsgReader_swigregister(CameraNavMsgReader)
class CameraNavMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraNavMsgPayload.CameraNavMsgWriter_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CameraNavMsgPayload.CameraNavMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsgWriter

# Register CameraNavMsgWriter in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsgWriter_swigregister(CameraNavMsgWriter)
class CameraNavMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CameraNavMsgPayload.CameraNavMsg_write_get, _CameraNavMsgPayload.CameraNavMsg_write_set)

    def addSubscriber(self):
        return _CameraNavMsgPayload.CameraNavMsg_addSubscriber(self)

    def addAuthor(self):
        return _CameraNavMsgPayload.CameraNavMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CameraNavMsgPayload.CameraNavMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CameraNavMsgPayload.CameraNavMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CameraNavMsgPayload.CameraNavMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CameraNavMsgPayload.CameraNavMsg_zeroMsgPayload_get, _CameraNavMsgPayload.CameraNavMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CameraNavMsgPayload.CameraNavMsg_isLinked(self)

    def getPayloadSize(self):
        return _CameraNavMsgPayload.CameraNavMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CameraNavMsgPayload.CameraNavMsg_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsg())
    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsg

# Register CameraNavMsg in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsg_swigregister(CameraNavMsg)
class CameraNavMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraNavMsgPayload.CameraNavMsgRecorder_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsgRecorder(*args))
    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsgRecorder

    def SelfInit(self):
        return _CameraNavMsgPayload.CameraNavMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CameraNavMsgPayload.CameraNavMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CameraNavMsgPayload.CameraNavMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CameraNavMsgPayload.CameraNavMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CameraNavMsgPayload.CameraNavMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CameraNavMsgPayload.CameraNavMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CameraNavMsgPayload.CameraNavMsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _CameraNavMsgPayload.CameraNavMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CameraNavMsgPayload.CameraNavMsgRecorder_clear(self)
    bskLogger = property(_CameraNavMsgPayload.CameraNavMsgRecorder_bskLogger_get, _CameraNavMsgPayload.CameraNavMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CameraNavMsgPayload.CameraNavMsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CameraNavMsgRecorder in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsgRecorder_swigregister(CameraNavMsgRecorder)
class CameraNavMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_pop(self)

    def append(self, x):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_append(self, x)

    def empty(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_empty(self)

    def size(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_size(self)

    def swap(self, v):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_begin(self)

    def end(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_end(self)

    def rbegin(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_rend(self)

    def clear(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNavMsgPayload.CameraNavMsgPayloadVector_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsgPayloadVector(*args))

    def push_back(self, x):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_front(self)

    def back(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CameraNavMsgPayload.CameraNavMsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsgPayloadVector

# Register CameraNavMsgPayloadVector in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsgPayloadVector_swigregister(CameraNavMsgPayloadVector)
class CameraNavMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_empty(self)

    def size(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_begin(self)

    def end(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_front(self)

    def back(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsgOutMsgsVector

# Register CameraNavMsgOutMsgsVector in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsgOutMsgsVector_swigregister(CameraNavMsgOutMsgsVector)
class CameraNavMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsgOutMsgsPtrVector

# Register CameraNavMsgOutMsgsPtrVector in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsgOutMsgsPtrVector_swigregister(CameraNavMsgOutMsgsPtrVector)
class CameraNavMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_empty(self)

    def size(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_begin(self)

    def end(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_rend(self)

    def clear(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNavMsgPayload.CameraNavMsgInMsgsVector_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_front(self)

    def back(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CameraNavMsgPayload.CameraNavMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsgInMsgsVector

# Register CameraNavMsgInMsgsVector in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsgInMsgsVector_swigregister(CameraNavMsgInMsgsVector)
class CameraNavMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CameraNavMsgPayload.CameraNavMsg_C_header_get, _CameraNavMsgPayload.CameraNavMsg_C_header_set)
    payload = property(_CameraNavMsgPayload.CameraNavMsg_C_payload_get, _CameraNavMsgPayload.CameraNavMsg_C_payload_set)
    payloadPointer = property(_CameraNavMsgPayload.CameraNavMsg_C_payloadPointer_get, _CameraNavMsgPayload.CameraNavMsg_C_payloadPointer_set)
    headerPointer = property(_CameraNavMsgPayload.CameraNavMsg_C_headerPointer_get, _CameraNavMsgPayload.CameraNavMsg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CameraNavMsg
        if type(source) == type(self):
            CameraNavMsg_C_subscribe(self, source)
        elif type(source) == CameraNavMsg:
            CameraNavMsg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CameraNavMsg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CameraNavMsg
        if type(source) == type(self):
            return (CameraNavMsg_C_isSubscribedTo(self, source))
        elif type(source) == CameraNavMsg:
            return (CameraNavMsg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import CameraNavMsgRecorder
        self.header.isLinked = 1
        return CameraNavMsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CameraNavMsg_C_addAuthor(self, self)
        if data:
            CameraNavMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CameraNavMsg_C_addAuthor(self, self)
        CameraNavMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CameraNavMsg_C_read(self)


    def __init__(self):
        _CameraNavMsgPayload.CameraNavMsg_C_swiginit(self, _CameraNavMsgPayload.new_CameraNavMsg_C())
    __swig_destroy__ = _CameraNavMsgPayload.delete_CameraNavMsg_C

# Register CameraNavMsg_C in _CameraNavMsgPayload:
_CameraNavMsgPayload.CameraNavMsg_C_swigregister(CameraNavMsg_C)

def CameraNavMsg_cpp_subscribe(subscriber, source):
    return _CameraNavMsgPayload.CameraNavMsg_cpp_subscribe(subscriber, source)

def CameraNavMsg_C_subscribe(subscriber, source):
    return _CameraNavMsgPayload.CameraNavMsg_C_subscribe(subscriber, source)

def CameraNavMsg_C_isSubscribedTo(subscriber, source):
    return _CameraNavMsgPayload.CameraNavMsg_C_isSubscribedTo(subscriber, source)

def CameraNavMsg_cpp_isSubscribedTo(subscriber, source):
    return _CameraNavMsgPayload.CameraNavMsg_cpp_isSubscribedTo(subscriber, source)

def CameraNavMsg_C_addAuthor(coowner, data):
    return _CameraNavMsgPayload.CameraNavMsg_C_addAuthor(coowner, data)

def CameraNavMsg_C_init(owner):
    return _CameraNavMsgPayload.CameraNavMsg_C_init(owner)

def CameraNavMsg_C_isLinked(data):
    return _CameraNavMsgPayload.CameraNavMsg_C_isLinked(data)

def CameraNavMsg_C_isWritten(data):
    return _CameraNavMsgPayload.CameraNavMsg_C_isWritten(data)

def CameraNavMsg_C_timeWritten(data):
    return _CameraNavMsgPayload.CameraNavMsg_C_timeWritten(data)

def CameraNavMsg_C_moduleID(data):
    return _CameraNavMsgPayload.CameraNavMsg_C_moduleID(data)

def CameraNavMsg_C_write(data, destination, moduleID, callTime):
    return _CameraNavMsgPayload.CameraNavMsg_C_write(data, destination, moduleID, callTime)

def CameraNavMsg_C_read(source):
    return _CameraNavMsgPayload.CameraNavMsg_C_read(source)

def CameraNavMsg_C_zeroMsgPayload():
    return _CameraNavMsgPayload.CameraNavMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CameraNavMsgPayload.MsgHeader_isLinked_get, _CameraNavMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CameraNavMsgPayload.MsgHeader_isWritten_get, _CameraNavMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CameraNavMsgPayload.MsgHeader_timeWritten_get, _CameraNavMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CameraNavMsgPayload.MsgHeader_moduleID_get, _CameraNavMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CameraNavMsgPayload.MsgHeader_swiginit(self, _CameraNavMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CameraNavMsgPayload.delete_MsgHeader

# Register MsgHeader in _CameraNavMsgPayload:
_CameraNavMsgPayload.MsgHeader_swigregister(MsgHeader)

