# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CameraNav2MsgPayload
else:
    import _CameraNav2MsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CameraNav2MsgPayload.delete_SwigPyIterator

    def value(self):
        return _CameraNav2MsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CameraNav2MsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CameraNav2MsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CameraNav2MsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CameraNav2MsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CameraNav2MsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CameraNav2MsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CameraNav2MsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CameraNav2MsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CameraNav2MsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CameraNav2MsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CameraNav2MsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CameraNav2MsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CameraNav2MsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CameraNav2MsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CameraNav2MsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CameraNav2MsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CameraNav2MsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CameraNav2MsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CameraNav2MsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CameraNav2MsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CameraNav2MsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CameraNav2MsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CameraNav2MsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CameraNav2MsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CameraNav2MsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CameraNav2MsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CameraNav2MsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CameraNav2MsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CameraNav2MsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CameraNav2MsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CameraNav2MsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNav2MsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNav2MsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CameraNav2MsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CameraNav2MsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNav2MsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNav2MsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNav2MsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNav2MsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNav2MsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNav2MsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CameraNav2MsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CameraNav2MsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CameraNav2MsgPayload.TimeVector_empty(self)

    def size(self):
        return _CameraNav2MsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CameraNav2MsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CameraNav2MsgPayload.TimeVector_begin(self)

    def end(self):
        return _CameraNav2MsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CameraNav2MsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CameraNav2MsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CameraNav2MsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CameraNav2MsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CameraNav2MsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CameraNav2MsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNav2MsgPayload.TimeVector_swiginit(self, _CameraNav2MsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CameraNav2MsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CameraNav2MsgPayload.TimeVector_front(self)

    def back(self):
        return _CameraNav2MsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CameraNav2MsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNav2MsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNav2MsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNav2MsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CameraNav2MsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CameraNav2MsgPayload.delete_TimeVector

# Register TimeVector in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNav2MsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNav2MsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CameraNav2MsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CameraNav2MsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNav2MsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNav2MsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNav2MsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNav2MsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNav2MsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNav2MsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CameraNav2MsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CameraNav2MsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CameraNav2MsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CameraNav2MsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CameraNav2MsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CameraNav2MsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CameraNav2MsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CameraNav2MsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CameraNav2MsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CameraNav2MsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CameraNav2MsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CameraNav2MsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CameraNav2MsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNav2MsgPayload.DoubleVector_swiginit(self, _CameraNav2MsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CameraNav2MsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CameraNav2MsgPayload.DoubleVector_front(self)

    def back(self):
        return _CameraNav2MsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CameraNav2MsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNav2MsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNav2MsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNav2MsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CameraNav2MsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CameraNav2MsgPayload.delete_DoubleVector

# Register DoubleVector in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNav2MsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNav2MsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CameraNav2MsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CameraNav2MsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNav2MsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNav2MsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNav2MsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNav2MsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNav2MsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNav2MsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CameraNav2MsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CameraNav2MsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CameraNav2MsgPayload.StringVector_empty(self)

    def size(self):
        return _CameraNav2MsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CameraNav2MsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CameraNav2MsgPayload.StringVector_begin(self)

    def end(self):
        return _CameraNav2MsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CameraNav2MsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CameraNav2MsgPayload.StringVector_rend(self)

    def clear(self):
        return _CameraNav2MsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CameraNav2MsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CameraNav2MsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CameraNav2MsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNav2MsgPayload.StringVector_swiginit(self, _CameraNav2MsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CameraNav2MsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CameraNav2MsgPayload.StringVector_front(self)

    def back(self):
        return _CameraNav2MsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CameraNav2MsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNav2MsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNav2MsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNav2MsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CameraNav2MsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CameraNav2MsgPayload.delete_StringVector

# Register StringVector in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CameraNav2MsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CameraNav2MsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CameraNav2MsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CameraNav2MsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CameraNav2MsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CameraNav2MsgPayload.NANO2SEC
SEC2NANO = _CameraNav2MsgPayload.SEC2NANO
SEC2HOUR = _CameraNav2MsgPayload.SEC2HOUR
BOOL_FALSE = _CameraNav2MsgPayload.BOOL_FALSE
BOOL_TRUE = _CameraNav2MsgPayload.BOOL_TRUE
AVAILABLE = _CameraNav2MsgPayload.AVAILABLE
UNAVAILABLE = _CameraNav2MsgPayload.UNAVAILABLE
BalancedWheels = _CameraNav2MsgPayload.BalancedWheels
JitterSimple = _CameraNav2MsgPayload.JitterSimple
JitterFullyCoupled = _CameraNav2MsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraNav2MsgPayload.SysModel_swiginit(self, _CameraNav2MsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CameraNav2MsgPayload.delete_SysModel

    def SelfInit(self):
        return _CameraNav2MsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CameraNav2MsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CameraNav2MsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CameraNav2MsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CameraNav2MsgPayload.SysModel_ModelTag_get, _CameraNav2MsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CameraNav2MsgPayload.SysModel_CallCounts_get, _CameraNav2MsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CameraNav2MsgPayload.SysModel_RNGSeed_get, _CameraNav2MsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CameraNav2MsgPayload.SysModel_moduleID_get, _CameraNav2MsgPayload.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


# Register SysModel in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CameraNav2MsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CameraNav2MsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CameraNav2MsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CameraNav2MsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CameraNav2MsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CameraNav2MsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CameraNav2MsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CameraNav2MsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CameraNav2MsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CameraNav2MsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CameraNav2MsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CameraNav2MsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CameraNav2MsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BP_P = property(_CameraNav2MsgPayload.CameraNav2MsgPayload_r_BP_P_get, _CameraNav2MsgPayload.CameraNav2MsgPayload_r_BP_P_set)
    P = property(_CameraNav2MsgPayload.CameraNav2MsgPayload_P_get, _CameraNav2MsgPayload.CameraNav2MsgPayload_P_set)
    nLvisible = property(_CameraNav2MsgPayload.CameraNav2MsgPayload_nLvisible_get, _CameraNav2MsgPayload.CameraNav2MsgPayload_nLvisible_set)
    percArea = property(_CameraNav2MsgPayload.CameraNav2MsgPayload_percArea_get, _CameraNav2MsgPayload.CameraNav2MsgPayload_percArea_set)
    isBright = property(_CameraNav2MsgPayload.CameraNav2MsgPayload_isBright_get, _CameraNav2MsgPayload.CameraNav2MsgPayload_isBright_set)

    def __init__(self):
        _CameraNav2MsgPayload.CameraNav2MsgPayload_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2MsgPayload())
    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2MsgPayload

# Register CameraNav2MsgPayload in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2MsgPayload_swigregister(CameraNav2MsgPayload)
class CameraNav2MsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CameraNav2MsgPayload.CameraNav2MsgReader_bskLogger_get, _CameraNav2MsgPayload.CameraNav2MsgReader_bskLogger_set)
    zeroMsgPayload = property(_CameraNav2MsgPayload.CameraNav2MsgReader_zeroMsgPayload_get, _CameraNav2MsgPayload.CameraNav2MsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CameraNav2MsgPayload.CameraNav2MsgReader_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2MsgReader(*args))

    def __call__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgReader___call__(self)

    def isLinked(self):
        return _CameraNav2MsgPayload.CameraNav2MsgReader_isLinked(self)

    def isWritten(self):
        return _CameraNav2MsgPayload.CameraNav2MsgReader_isWritten(self)

    def timeWritten(self):
        return _CameraNav2MsgPayload.CameraNav2MsgReader_timeWritten(self)

    def moduleID(self):
        return _CameraNav2MsgPayload.CameraNav2MsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CameraNav2MsgPayload.CameraNav2MsgReader___subscribe_to_C(self, source)

    def __subscribe_to(self, source):
        return _CameraNav2MsgPayload.CameraNav2MsgReader___subscribe_to(self, source)

    def __is_subscribed_to_C(self, source):
        return _CameraNav2MsgPayload.CameraNav2MsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CameraNav2MsgPayload.CameraNav2MsgReader___is_subscribed_to(self, source)

    def recorder(self, timeDiff=0):
        return _CameraNav2MsgPayload.CameraNav2MsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CameraNav2Msg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CameraNav2MsgPayload import CameraNav2Msg_C
            if type(source) == CameraNav2Msg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CameraNav2MsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CameraNav2Msg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CameraNav2MsgPayload import CameraNav2Msg_C
        except ImportError:
            return 0

        if type(source) == CameraNav2Msg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2MsgReader

# Register CameraNav2MsgReader in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2MsgReader_swigregister(CameraNav2MsgReader)
class CameraNav2MsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraNav2MsgPayload.CameraNav2MsgWriter_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2MsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CameraNav2MsgPayload.CameraNav2MsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2MsgWriter

# Register CameraNav2MsgWriter in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2MsgWriter_swigregister(CameraNav2MsgWriter)
class CameraNav2Msg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CameraNav2MsgPayload.CameraNav2Msg_write_get, _CameraNav2MsgPayload.CameraNav2Msg_write_set)

    def addSubscriber(self):
        return _CameraNav2MsgPayload.CameraNav2Msg_addSubscriber(self)

    def addAuthor(self):
        return _CameraNav2MsgPayload.CameraNav2Msg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CameraNav2MsgPayload.CameraNav2Msg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CameraNav2MsgPayload.CameraNav2Msg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CameraNav2MsgPayload.CameraNav2Msg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CameraNav2MsgPayload.CameraNav2Msg_zeroMsgPayload_get, _CameraNav2MsgPayload.CameraNav2Msg_zeroMsgPayload_set)

    def isLinked(self):
        return _CameraNav2MsgPayload.CameraNav2Msg_isLinked(self)

    def getPayloadSize(self):
        return _CameraNav2MsgPayload.CameraNav2Msg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CameraNav2MsgPayload.CameraNav2Msg_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2Msg())
    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2Msg

# Register CameraNav2Msg in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2Msg_swigregister(CameraNav2Msg)
class CameraNav2MsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraNav2MsgPayload.CameraNav2MsgRecorder_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2MsgRecorder(*args))
    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2MsgRecorder

    def SelfInit(self):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder___record_vector(self)

    def findMsgName(self, msgName):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder_clear(self)
    bskLogger = property(_CameraNav2MsgPayload.CameraNav2MsgRecorder_bskLogger_get, _CameraNav2MsgPayload.CameraNav2MsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CameraNav2MsgPayload.CameraNav2MsgRecorder_updateTimeInterval(self, timeDiff)

    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, content):
        if "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            pass
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types 
                    content[attr_name] = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content[attr_name] = []
                for data in attr:
                    content[attr_name].append(data)
            else:
                for subattr_name in  dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content[attr_name] = attr

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.iterator():
            content = {}
            self.explore_and_find_subattr(rec.__getattribute__(name), name, content)
            if len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CameraNav2MsgRecorder in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2MsgRecorder_swigregister(CameraNav2MsgRecorder)
class CameraNav2MsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___bool__(self)

    def __len__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_pop(self)

    def append(self, x):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_append(self, x)

    def empty(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_empty(self)

    def size(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_size(self)

    def swap(self, v):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_swap(self, v)

    def begin(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_begin(self)

    def end(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_end(self)

    def rbegin(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_rbegin(self)

    def rend(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_rend(self)

    def clear(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2MsgPayloadVector(*args))

    def push_back(self, x):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_push_back(self, x)

    def front(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_front(self)

    def back(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CameraNav2MsgPayload.CameraNav2MsgPayloadVector_capacity(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.iterator():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2MsgPayloadVector

# Register CameraNav2MsgPayloadVector in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2MsgPayloadVector_swigregister(CameraNav2MsgPayloadVector)
class CameraNav2MsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_empty(self)

    def size(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_begin(self)

    def end(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_rend(self)

    def clear(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2MsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_front(self)

    def back(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2MsgOutMsgsVector

# Register CameraNav2MsgOutMsgsVector in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2MsgOutMsgsVector_swigregister(CameraNav2MsgOutMsgsVector)
class CameraNav2MsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2MsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2MsgOutMsgsPtrVector

# Register CameraNav2MsgOutMsgsPtrVector in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2MsgOutMsgsPtrVector_swigregister(CameraNav2MsgOutMsgsPtrVector)
class CameraNav2MsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_pop(self)

    def append(self, x):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_append(self, x)

    def empty(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_empty(self)

    def size(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_size(self)

    def swap(self, v):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_begin(self)

    def end(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_end(self)

    def rbegin(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_rend(self)

    def clear(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2MsgInMsgsVector(*args))

    def push_back(self, x):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_front(self)

    def back(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2MsgInMsgsVector

# Register CameraNav2MsgInMsgsVector in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2MsgInMsgsVector_swigregister(CameraNav2MsgInMsgsVector)
class CameraNav2Msg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CameraNav2MsgPayload.CameraNav2Msg_C_header_get, _CameraNav2MsgPayload.CameraNav2Msg_C_header_set)
    payload = property(_CameraNav2MsgPayload.CameraNav2Msg_C_payload_get, _CameraNav2MsgPayload.CameraNav2Msg_C_payload_set)
    payloadPointer = property(_CameraNav2MsgPayload.CameraNav2Msg_C_payloadPointer_get, _CameraNav2MsgPayload.CameraNav2Msg_C_payloadPointer_set)
    headerPointer = property(_CameraNav2MsgPayload.CameraNav2Msg_C_headerPointer_get, _CameraNav2MsgPayload.CameraNav2Msg_C_headerPointer_set)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CameraNav2Msg
        if type(source) == type(self):
            CameraNav2Msg_C_subscribe(self, source)
        elif type(source) == CameraNav2Msg:
            CameraNav2Msg_cpp_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CameraNav2Msg to another message type')



    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CameraNav2Msg
        if type(source) == type(self):
            return (CameraNav2Msg_C_isSubscribedTo(self, source))
        elif type(source) == CameraNav2Msg:
            return (CameraNav2Msg_cpp_isSubscribedTo(self, source))
        else:
            return 0


    def recorder(self, timeDiff=0):
        """create a recorder module for this message"""
        from Basilisk.architecture.messaging import CameraNav2MsgRecorder
        self.header.isLinked = 1
        return CameraNav2MsgRecorder(self, timeDiff)

    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CameraNav2Msg_C_addAuthor(self, self)
        if data:
            CameraNav2Msg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CameraNav2Msg_C_addAuthor(self, self)
        CameraNav2Msg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CameraNav2Msg_C_read(self)


    def __init__(self):
        _CameraNav2MsgPayload.CameraNav2Msg_C_swiginit(self, _CameraNav2MsgPayload.new_CameraNav2Msg_C())
    __swig_destroy__ = _CameraNav2MsgPayload.delete_CameraNav2Msg_C

# Register CameraNav2Msg_C in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.CameraNav2Msg_C_swigregister(CameraNav2Msg_C)

def CameraNav2Msg_cpp_subscribe(subscriber, source):
    return _CameraNav2MsgPayload.CameraNav2Msg_cpp_subscribe(subscriber, source)

def CameraNav2Msg_C_subscribe(subscriber, source):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_subscribe(subscriber, source)

def CameraNav2Msg_C_isSubscribedTo(subscriber, source):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_isSubscribedTo(subscriber, source)

def CameraNav2Msg_cpp_isSubscribedTo(subscriber, source):
    return _CameraNav2MsgPayload.CameraNav2Msg_cpp_isSubscribedTo(subscriber, source)

def CameraNav2Msg_C_addAuthor(coowner, data):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_addAuthor(coowner, data)

def CameraNav2Msg_C_init(owner):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_init(owner)

def CameraNav2Msg_C_isLinked(data):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_isLinked(data)

def CameraNav2Msg_C_isWritten(data):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_isWritten(data)

def CameraNav2Msg_C_timeWritten(data):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_timeWritten(data)

def CameraNav2Msg_C_moduleID(data):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_moduleID(data)

def CameraNav2Msg_C_write(data, destination, moduleID, callTime):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_write(data, destination, moduleID, callTime)

def CameraNav2Msg_C_read(source):
    return _CameraNav2MsgPayload.CameraNav2Msg_C_read(source)

def CameraNav2Msg_C_zeroMsgPayload():
    return _CameraNav2MsgPayload.CameraNav2Msg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CameraNav2MsgPayload.MsgHeader_isLinked_get, _CameraNav2MsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CameraNav2MsgPayload.MsgHeader_isWritten_get, _CameraNav2MsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CameraNav2MsgPayload.MsgHeader_timeWritten_get, _CameraNav2MsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CameraNav2MsgPayload.MsgHeader_moduleID_get, _CameraNav2MsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CameraNav2MsgPayload.MsgHeader_swiginit(self, _CameraNav2MsgPayload.new_MsgHeader())
    __swig_destroy__ = _CameraNav2MsgPayload.delete_MsgHeader

# Register MsgHeader in _CameraNav2MsgPayload:
_CameraNav2MsgPayload.MsgHeader_swigregister(MsgHeader)

