# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable
from Basilisk.utilities import pythonVariableLogger



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _prescribedRot1DOF
else:
    import _prescribedRot1DOF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _prescribedRot1DOF.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _prescribedRot1DOF.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _prescribedRot1DOF.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _prescribedRot1DOF.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _prescribedRot1DOF.new_longArray(nelements)

def delete_longArray(ary):
    return _prescribedRot1DOF.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _prescribedRot1DOF.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _prescribedRot1DOF.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _prescribedRot1DOF.new_intArray(nelements)

def delete_intArray(ary):
    return _prescribedRot1DOF.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _prescribedRot1DOF.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _prescribedRot1DOF.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _prescribedRot1DOF.new_shortArray(nelements)

def delete_shortArray(ary):
    return _prescribedRot1DOF.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _prescribedRot1DOF.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _prescribedRot1DOF.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


MAX_LOGGING_LENGTH = _prescribedRot1DOF.MAX_LOGGING_LENGTH
BSK_DEBUG = _prescribedRot1DOF.BSK_DEBUG
BSK_INFORMATION = _prescribedRot1DOF.BSK_INFORMATION
BSK_WARNING = _prescribedRot1DOF.BSK_WARNING
BSK_ERROR = _prescribedRot1DOF.BSK_ERROR
BSK_SILENT = _prescribedRot1DOF.BSK_SILENT

def printDefaultLogLevel():
    return _prescribedRot1DOF.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _prescribedRot1DOF.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _prescribedRot1DOF.getDefaultLogLevel()
class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _prescribedRot1DOF.BSKLogger_swiginit(self, _prescribedRot1DOF.new_BSKLogger(*args))
    __swig_destroy__ = _prescribedRot1DOF.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _prescribedRot1DOF.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _prescribedRot1DOF.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _prescribedRot1DOF.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _prescribedRot1DOF.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_prescribedRot1DOF.BSKLogger_logLevelMap_get, _prescribedRot1DOF.BSKLogger_logLevelMap_set)

# Register BSKLogger in _prescribedRot1DOF:
_prescribedRot1DOF.BSKLogger_swigregister(BSKLogger)
cvar = _prescribedRot1DOF.cvar


def _BSKLogger():
    return _prescribedRot1DOF._BSKLogger()

def _BSKLogger_d(arg1):
    return _prescribedRot1DOF._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _prescribedRot1DOF._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _prescribedRot1DOF._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _prescribedRot1DOF._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _prescribedRot1DOF.SysModel_swiginit(self, _prescribedRot1DOF.new_SysModel(*args))
    __swig_destroy__ = _prescribedRot1DOF.delete_SysModel

    def SelfInit(self):
        return _prescribedRot1DOF.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _prescribedRot1DOF.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _prescribedRot1DOF.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _prescribedRot1DOF.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_prescribedRot1DOF.SysModel_ModelTag_get, _prescribedRot1DOF.SysModel_ModelTag_set)
    CallCounts = property(_prescribedRot1DOF.SysModel_CallCounts_get, _prescribedRot1DOF.SysModel_CallCounts_set)
    RNGSeed = property(_prescribedRot1DOF.SysModel_RNGSeed_get, _prescribedRot1DOF.SysModel_RNGSeed_set)
    moduleID = property(_prescribedRot1DOF.SysModel_moduleID_get, _prescribedRot1DOF.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        logging_functions = {
            variable_name: lambda _, vn=variable_name: getattr(self, vn)
            for variable_name in variableNames
        }

        for variable_name, log_fun in logging_functions.items():
            try:
                log_fun(0)
            except AttributeError:
                raise ValueError(f"Cannot log {variable_name} as it is not a "
                                f"variable of {type(self).__name__}")

        return pythonVariableLogger.PythonVariableLogger(logging_functions, recordingTime)


# Register SysModel in _prescribedRot1DOF:
_prescribedRot1DOF.SysModel_swigregister(SysModel)
class PrescribedRot1DOFConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thetaDDotMax = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_thetaDDotMax_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_thetaDDotMax_set)
    rotAxis_M = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_rotAxis_M_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_rotAxis_M_set)
    r_FM_M = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_r_FM_M_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_r_FM_M_set)
    rPrime_FM_M = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_rPrime_FM_M_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_rPrime_FM_M_set)
    rPrimePrime_FM_M = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_rPrimePrime_FM_M_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_rPrimePrime_FM_M_set)
    omega_FM_F = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_omega_FM_F_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_omega_FM_F_set)
    omegaPrime_FM_F = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_omegaPrime_FM_F_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_omegaPrime_FM_F_set)
    sigma_FM = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_sigma_FM_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_sigma_FM_set)
    convergence = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_convergence_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_convergence_set)
    tInit = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_tInit_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_tInit_set)
    thetaInit = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_thetaInit_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_thetaInit_set)
    thetaDotInit = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_thetaDotInit_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_thetaDotInit_set)
    thetaRef = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_thetaRef_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_thetaRef_set)
    thetaDotRef = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_thetaDotRef_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_thetaDotRef_set)
    ts = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_ts_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_ts_set)
    tf = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_tf_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_tf_set)
    a = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_a_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_a_set)
    b = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_b_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_b_set)
    bskLogger = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_bskLogger_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_bskLogger_set)
    spinningBodyInMsg = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_spinningBodyInMsg_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_spinningBodyInMsg_set)
    spinningBodyOutMsg = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_spinningBodyOutMsg_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_spinningBodyOutMsg_set)
    prescribedMotionOutMsg = property(_prescribedRot1DOF.PrescribedRot1DOFConfig_prescribedMotionOutMsg_get, _prescribedRot1DOF.PrescribedRot1DOFConfig_prescribedMotionOutMsg_set)

    def createWrapper(self):
        return prescribedRot1DOF(self)


    def __init__(self):
        _prescribedRot1DOF.PrescribedRot1DOFConfig_swiginit(self, _prescribedRot1DOF.new_PrescribedRot1DOFConfig())
    __swig_destroy__ = _prescribedRot1DOF.delete_PrescribedRot1DOFConfig

# Register PrescribedRot1DOFConfig in _prescribedRot1DOF:
_prescribedRot1DOF.PrescribedRot1DOFConfig_swigregister(PrescribedRot1DOFConfig)
class prescribedRot1DOF(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _prescribedRot1DOF.prescribedRot1DOF_swiginit(self, _prescribedRot1DOF.new_prescribedRot1DOF(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _prescribedRot1DOF.prescribedRot1DOF_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _prescribedRot1DOF.prescribedRot1DOF_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _prescribedRot1DOF.prescribedRot1DOF_Reset(self, currentSimNanos)

    def __deref__(self):
        return _prescribedRot1DOF.prescribedRot1DOF___deref__(self)

    def getConfig(self):
        return _prescribedRot1DOF.prescribedRot1DOF_getConfig(self)
    __swig_destroy__ = _prescribedRot1DOF.delete_prescribedRot1DOF
    thetaDDotMax = property(_prescribedRot1DOF.prescribedRot1DOF_thetaDDotMax_get, _prescribedRot1DOF.prescribedRot1DOF_thetaDDotMax_set)
    rotAxis_M = property(_prescribedRot1DOF.prescribedRot1DOF_rotAxis_M_get, _prescribedRot1DOF.prescribedRot1DOF_rotAxis_M_set)
    r_FM_M = property(_prescribedRot1DOF.prescribedRot1DOF_r_FM_M_get, _prescribedRot1DOF.prescribedRot1DOF_r_FM_M_set)
    rPrime_FM_M = property(_prescribedRot1DOF.prescribedRot1DOF_rPrime_FM_M_get, _prescribedRot1DOF.prescribedRot1DOF_rPrime_FM_M_set)
    rPrimePrime_FM_M = property(_prescribedRot1DOF.prescribedRot1DOF_rPrimePrime_FM_M_get, _prescribedRot1DOF.prescribedRot1DOF_rPrimePrime_FM_M_set)
    omega_FM_F = property(_prescribedRot1DOF.prescribedRot1DOF_omega_FM_F_get, _prescribedRot1DOF.prescribedRot1DOF_omega_FM_F_set)
    omegaPrime_FM_F = property(_prescribedRot1DOF.prescribedRot1DOF_omegaPrime_FM_F_get, _prescribedRot1DOF.prescribedRot1DOF_omegaPrime_FM_F_set)
    sigma_FM = property(_prescribedRot1DOF.prescribedRot1DOF_sigma_FM_get, _prescribedRot1DOF.prescribedRot1DOF_sigma_FM_set)
    convergence = property(_prescribedRot1DOF.prescribedRot1DOF_convergence_get, _prescribedRot1DOF.prescribedRot1DOF_convergence_set)
    tInit = property(_prescribedRot1DOF.prescribedRot1DOF_tInit_get, _prescribedRot1DOF.prescribedRot1DOF_tInit_set)
    thetaInit = property(_prescribedRot1DOF.prescribedRot1DOF_thetaInit_get, _prescribedRot1DOF.prescribedRot1DOF_thetaInit_set)
    thetaDotInit = property(_prescribedRot1DOF.prescribedRot1DOF_thetaDotInit_get, _prescribedRot1DOF.prescribedRot1DOF_thetaDotInit_set)
    thetaRef = property(_prescribedRot1DOF.prescribedRot1DOF_thetaRef_get, _prescribedRot1DOF.prescribedRot1DOF_thetaRef_set)
    thetaDotRef = property(_prescribedRot1DOF.prescribedRot1DOF_thetaDotRef_get, _prescribedRot1DOF.prescribedRot1DOF_thetaDotRef_set)
    ts = property(_prescribedRot1DOF.prescribedRot1DOF_ts_get, _prescribedRot1DOF.prescribedRot1DOF_ts_set)
    tf = property(_prescribedRot1DOF.prescribedRot1DOF_tf_get, _prescribedRot1DOF.prescribedRot1DOF_tf_set)
    a = property(_prescribedRot1DOF.prescribedRot1DOF_a_get, _prescribedRot1DOF.prescribedRot1DOF_a_set)
    b = property(_prescribedRot1DOF.prescribedRot1DOF_b_get, _prescribedRot1DOF.prescribedRot1DOF_b_set)
    bskLogger = property(_prescribedRot1DOF.prescribedRot1DOF_bskLogger_get, _prescribedRot1DOF.prescribedRot1DOF_bskLogger_set)
    spinningBodyInMsg = property(_prescribedRot1DOF.prescribedRot1DOF_spinningBodyInMsg_get, _prescribedRot1DOF.prescribedRot1DOF_spinningBodyInMsg_set)
    spinningBodyOutMsg = property(_prescribedRot1DOF.prescribedRot1DOF_spinningBodyOutMsg_get, _prescribedRot1DOF.prescribedRot1DOF_spinningBodyOutMsg_set)
    prescribedMotionOutMsg = property(_prescribedRot1DOF.prescribedRot1DOF_prescribedMotionOutMsg_get, _prescribedRot1DOF.prescribedRot1DOF_prescribedMotionOutMsg_set)

# Register prescribedRot1DOF in _prescribedRot1DOF:
_prescribedRot1DOF.prescribedRot1DOF_swigregister(prescribedRot1DOF)
class HingedRigidBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    theta = property(_prescribedRot1DOF.HingedRigidBodyMsgPayload_theta_get, _prescribedRot1DOF.HingedRigidBodyMsgPayload_theta_set)
    thetaDot = property(_prescribedRot1DOF.HingedRigidBodyMsgPayload_thetaDot_get, _prescribedRot1DOF.HingedRigidBodyMsgPayload_thetaDot_set)

    def __init__(self):
        _prescribedRot1DOF.HingedRigidBodyMsgPayload_swiginit(self, _prescribedRot1DOF.new_HingedRigidBodyMsgPayload())
    __swig_destroy__ = _prescribedRot1DOF.delete_HingedRigidBodyMsgPayload

# Register HingedRigidBodyMsgPayload in _prescribedRot1DOF:
_prescribedRot1DOF.HingedRigidBodyMsgPayload_swigregister(HingedRigidBodyMsgPayload)
class PrescribedMotionMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_FM_M = property(_prescribedRot1DOF.PrescribedMotionMsgPayload_r_FM_M_get, _prescribedRot1DOF.PrescribedMotionMsgPayload_r_FM_M_set)
    rPrime_FM_M = property(_prescribedRot1DOF.PrescribedMotionMsgPayload_rPrime_FM_M_get, _prescribedRot1DOF.PrescribedMotionMsgPayload_rPrime_FM_M_set)
    rPrimePrime_FM_M = property(_prescribedRot1DOF.PrescribedMotionMsgPayload_rPrimePrime_FM_M_get, _prescribedRot1DOF.PrescribedMotionMsgPayload_rPrimePrime_FM_M_set)
    omega_FM_F = property(_prescribedRot1DOF.PrescribedMotionMsgPayload_omega_FM_F_get, _prescribedRot1DOF.PrescribedMotionMsgPayload_omega_FM_F_set)
    omegaPrime_FM_F = property(_prescribedRot1DOF.PrescribedMotionMsgPayload_omegaPrime_FM_F_get, _prescribedRot1DOF.PrescribedMotionMsgPayload_omegaPrime_FM_F_set)
    sigma_FM = property(_prescribedRot1DOF.PrescribedMotionMsgPayload_sigma_FM_get, _prescribedRot1DOF.PrescribedMotionMsgPayload_sigma_FM_set)

    def __init__(self):
        _prescribedRot1DOF.PrescribedMotionMsgPayload_swiginit(self, _prescribedRot1DOF.new_PrescribedMotionMsgPayload())
    __swig_destroy__ = _prescribedRot1DOF.delete_PrescribedMotionMsgPayload

# Register PrescribedMotionMsgPayload in _prescribedRot1DOF:
_prescribedRot1DOF.PrescribedMotionMsgPayload_swigregister(PrescribedMotionMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


