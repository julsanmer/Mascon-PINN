# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _masconFit
else:
    import _masconFit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *

from Basilisk.fswAlgorithms.polyhedralShapeModel import PolyhedralShapeModel

from Basilisk.utilities import deprecated

PolyhedralShape = PolyhedralShapeModel

from typing import Optional, Union



def new_doubleArray(nelements):
    return _masconFit.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _masconFit.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _masconFit.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _masconFit.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _masconFit.new_longArray(nelements)

def delete_longArray(ary):
    return _masconFit.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _masconFit.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _masconFit.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _masconFit.new_intArray(nelements)

def delete_intArray(ary):
    return _masconFit.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _masconFit.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _masconFit.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _masconFit.new_shortArray(nelements)

def delete_shortArray(ary):
    return _masconFit.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _masconFit.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _masconFit.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



import sys
protectAllClasses(sys.modules[__name__])

class MasconFit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _masconFit.MasconFit_swiginit(self, _masconFit.new_MasconFit())

        object.__setattr__(self, "_pyShapeModel", None) # Enable setting _pyShapeModel
        self.shapeModel = PolyhedralShapeModel() # Re-set gravityModel to populate the _pyShapeModel


    __swig_destroy__ = _masconFit.delete_MasconFit

    def setMaxIter(self, maxIter):
        return _masconFit.MasconFit_setMaxIter(self, maxIter)

    def setLR(self, lr):
        return _masconFit.MasconFit_setLR(self, lr)

    def setBatchSize(self, batchSize):
        return _masconFit.MasconFit_setBatchSize(self, batchSize)

    def setHyperparam(self, beta1, beta2, eps):
        return _masconFit.MasconFit_setHyperparam(self, beta1, beta2, eps)

    def setMasconDist(self, x):
        return _masconFit.MasconFit_setMasconDist(self, x)

    def train(self, posData, accData, show_progress):
        return _masconFit.MasconFit_train(self, posData, accData, show_progress)

    def getLoss(self):
        return _masconFit.MasconFit_getLoss(self)
    mu = property(_masconFit.MasconFit_mu_get, _masconFit.MasconFit_mu_set)
    nM = property(_masconFit.MasconFit_nM_get, _masconFit.MasconFit_nM_set)
    muM = property(_masconFit.MasconFit_muM_get, _masconFit.MasconFit_muM_set)
    xyzM = property(_masconFit.MasconFit_xyzM_get, _masconFit.MasconFit_xyzM_set)
    muMad = property(_masconFit.MasconFit_muMad_get, _masconFit.MasconFit_muMad_set)
    xyzMad = property(_masconFit.MasconFit_xyzMad_get, _masconFit.MasconFit_xyzMad_set)
    accMax = property(_masconFit.MasconFit_accMax_get, _masconFit.MasconFit_accMax_set)
    trainXYZ = property(_masconFit.MasconFit_trainXYZ_get, _masconFit.MasconFit_trainXYZ_set)
    lossType = property(_masconFit.MasconFit_lossType_get, _masconFit.MasconFit_lossType_set)
    bskLogger = property(_masconFit.MasconFit_bskLogger_get, _masconFit.MasconFit_bskLogger_set)
    graddescent = property(_masconFit.MasconFit_graddescent_get, _masconFit.MasconFit_graddescent_set)
    shapeModel = property(_masconFit.MasconFit_shapeModel_get, _masconFit.MasconFit_shapeModel_set)


    """
    """
    _shapeModel = shapeModel
    @property
    def shapeModel(self):
        return self._pyShapeModel

    @shapeModel.setter
    def shapeModel(self, value):
        self._shapeModel = value
        self._pyShapeModel = value



# Register MasconFit in _masconFit:
_masconFit.MasconFit_swigregister(MasconFit)

