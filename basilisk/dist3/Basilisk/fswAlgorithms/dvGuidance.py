# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable
from Basilisk.utilities import pythonVariableLogger



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dvGuidance
else:
    import _dvGuidance

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _dvGuidance.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _dvGuidance.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _dvGuidance.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _dvGuidance.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _dvGuidance.new_longArray(nelements)

def delete_longArray(ary):
    return _dvGuidance.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _dvGuidance.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _dvGuidance.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _dvGuidance.new_intArray(nelements)

def delete_intArray(ary):
    return _dvGuidance.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _dvGuidance.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _dvGuidance.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _dvGuidance.new_shortArray(nelements)

def delete_shortArray(ary):
    return _dvGuidance.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _dvGuidance.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _dvGuidance.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    import sys
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


MAX_LOGGING_LENGTH = _dvGuidance.MAX_LOGGING_LENGTH
BSK_DEBUG = _dvGuidance.BSK_DEBUG
BSK_INFORMATION = _dvGuidance.BSK_INFORMATION
BSK_WARNING = _dvGuidance.BSK_WARNING
BSK_ERROR = _dvGuidance.BSK_ERROR
BSK_SILENT = _dvGuidance.BSK_SILENT

def printDefaultLogLevel():
    return _dvGuidance.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _dvGuidance.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _dvGuidance.getDefaultLogLevel()
class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dvGuidance.BSKLogger_swiginit(self, _dvGuidance.new_BSKLogger(*args))
    __swig_destroy__ = _dvGuidance.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _dvGuidance.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _dvGuidance.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _dvGuidance.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _dvGuidance.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_dvGuidance.BSKLogger_logLevelMap_get, _dvGuidance.BSKLogger_logLevelMap_set)

# Register BSKLogger in _dvGuidance:
_dvGuidance.BSKLogger_swigregister(BSKLogger)
cvar = _dvGuidance.cvar


def _BSKLogger():
    return _dvGuidance._BSKLogger()

def _BSKLogger_d(arg1):
    return _dvGuidance._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _dvGuidance._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _dvGuidance._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _dvGuidance._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dvGuidance.SysModel_swiginit(self, _dvGuidance.new_SysModel(*args))
    __swig_destroy__ = _dvGuidance.delete_SysModel

    def SelfInit(self):
        return _dvGuidance.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _dvGuidance.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _dvGuidance.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _dvGuidance.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_dvGuidance.SysModel_ModelTag_get, _dvGuidance.SysModel_ModelTag_set)
    CallCounts = property(_dvGuidance.SysModel_CallCounts_get, _dvGuidance.SysModel_CallCounts_set)
    RNGSeed = property(_dvGuidance.SysModel_RNGSeed_get, _dvGuidance.SysModel_RNGSeed_set)
    moduleID = property(_dvGuidance.SysModel_moduleID_get, _dvGuidance.SysModel_moduleID_set)

    def logger(self, *args, **kwargs):
        raise TypeError(
            f"The 'logger' function is not supported for this type ('{type(self).__qualname__}'). "
            "To fix this, update the SWIG file for this module. Change "
            """'%include "sys_model.h"' to '%include "sys_model.i"'"""
        )


    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        logging_functions = {
            variable_name: lambda _, vn=variable_name: getattr(self, vn)
            for variable_name in variableNames
        }

        for variable_name, log_fun in logging_functions.items():
            try:
                log_fun(0)
            except AttributeError:
                raise ValueError(f"Cannot log {variable_name} as it is not a "
                                f"variable of {type(self).__name__}")

        return pythonVariableLogger.PythonVariableLogger(logging_functions, recordingTime)


# Register SysModel in _dvGuidance:
_dvGuidance.SysModel_swigregister(SysModel)
class dvGuidanceConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attRefOutMsg = property(_dvGuidance.dvGuidanceConfig_attRefOutMsg_get, _dvGuidance.dvGuidanceConfig_attRefOutMsg_set)
    burnDataInMsg = property(_dvGuidance.dvGuidanceConfig_burnDataInMsg_get, _dvGuidance.dvGuidanceConfig_burnDataInMsg_set)
    bskLogger = property(_dvGuidance.dvGuidanceConfig_bskLogger_get, _dvGuidance.dvGuidanceConfig_bskLogger_set)

    def createWrapper(self):
        return dvGuidance(self)


    def __init__(self):
        _dvGuidance.dvGuidanceConfig_swiginit(self, _dvGuidance.new_dvGuidanceConfig())
    __swig_destroy__ = _dvGuidance.delete_dvGuidanceConfig

# Register dvGuidanceConfig in _dvGuidance:
_dvGuidance.dvGuidanceConfig_swigregister(dvGuidanceConfig)
class dvGuidance(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dvGuidance.dvGuidance_swiginit(self, _dvGuidance.new_dvGuidance(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _dvGuidance.dvGuidance_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _dvGuidance.dvGuidance_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _dvGuidance.dvGuidance_Reset(self, currentSimNanos)

    def __deref__(self):
        return _dvGuidance.dvGuidance___deref__(self)

    def getConfig(self):
        return _dvGuidance.dvGuidance_getConfig(self)
    __swig_destroy__ = _dvGuidance.delete_dvGuidance
    attRefOutMsg = property(_dvGuidance.dvGuidance_attRefOutMsg_get, _dvGuidance.dvGuidance_attRefOutMsg_set)
    burnDataInMsg = property(_dvGuidance.dvGuidance_burnDataInMsg_get, _dvGuidance.dvGuidance_burnDataInMsg_set)
    bskLogger = property(_dvGuidance.dvGuidance_bskLogger_get, _dvGuidance.dvGuidance_bskLogger_set)

# Register dvGuidance in _dvGuidance:
_dvGuidance.dvGuidance_swigregister(dvGuidance)
class AttRefMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sigma_RN = property(_dvGuidance.AttRefMsgPayload_sigma_RN_get, _dvGuidance.AttRefMsgPayload_sigma_RN_set)
    omega_RN_N = property(_dvGuidance.AttRefMsgPayload_omega_RN_N_get, _dvGuidance.AttRefMsgPayload_omega_RN_N_set)
    domega_RN_N = property(_dvGuidance.AttRefMsgPayload_domega_RN_N_get, _dvGuidance.AttRefMsgPayload_domega_RN_N_set)

    def __init__(self):
        _dvGuidance.AttRefMsgPayload_swiginit(self, _dvGuidance.new_AttRefMsgPayload())
    __swig_destroy__ = _dvGuidance.delete_AttRefMsgPayload

# Register AttRefMsgPayload in _dvGuidance:
_dvGuidance.AttRefMsgPayload_swigregister(AttRefMsgPayload)
class DvBurnCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dvInrtlCmd = property(_dvGuidance.DvBurnCmdMsgPayload_dvInrtlCmd_get, _dvGuidance.DvBurnCmdMsgPayload_dvInrtlCmd_set)
    dvRotVecUnit = property(_dvGuidance.DvBurnCmdMsgPayload_dvRotVecUnit_get, _dvGuidance.DvBurnCmdMsgPayload_dvRotVecUnit_set)
    dvRotVecMag = property(_dvGuidance.DvBurnCmdMsgPayload_dvRotVecMag_get, _dvGuidance.DvBurnCmdMsgPayload_dvRotVecMag_set)
    burnStartTime = property(_dvGuidance.DvBurnCmdMsgPayload_burnStartTime_get, _dvGuidance.DvBurnCmdMsgPayload_burnStartTime_set)

    def __init__(self):
        _dvGuidance.DvBurnCmdMsgPayload_swiginit(self, _dvGuidance.new_DvBurnCmdMsgPayload())
    __swig_destroy__ = _dvGuidance.delete_DvBurnCmdMsgPayload

# Register DvBurnCmdMsgPayload in _dvGuidance:
_dvGuidance.DvBurnCmdMsgPayload_swigregister(DvBurnCmdMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


